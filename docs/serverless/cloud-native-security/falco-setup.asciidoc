[[ingest-falco]]
= Ingest CNCF Falco data

CNCF Falco is an open-source runtime security tool that detects anomalous activity in Linux hosts, containers, Kubernetes, and cloud environments. You can ingest Falco alerts into {es} to view them on {elastic-sec}'s **Alerts** page and incorporate them into your security workflows by using Falcosidekick, a proxy forwarder that can send alerts from your Falco deployments to {es}.

First, you'll need to configure {elastic-sec} to receive data from Falco, then you'll need to configure Falco and Falcosidekick to send data to {es}. 

[discrete]
[[ingest-falco-setup-kibana]]
== Configure {elastic-sec} to receive Falco data

In {elastic-sec}:

. Click **Add integrations**.
. Search the **Integrations** page for `Falco`, then select it.
. Go to the Falco integration's **Settings** tab. 
. Click **Install Falco**, then confirm by clicking **Install Falco** again. Installation should take less than a minute. 

{elastic-sec} is now ready to receive data from Falco. The Falco integration page now has an **Assets** tab where you can inspect the newly installed assets that help to ingest Falco data.

Next, to make alerts from Falco appear on {elastic-sec}'s **Alerts** page:

. Find the **Detection rules (SIEM)** page in the navigation menu or by using the {kibana-ref}/introduction.html#kibana-navigation-search[global search field].
. Search for a rule named `External Alerts`. Install it if necessary, and enable it.


[discrete]
[[ingest-falco-setup-falco]]
== Configure Falco and Falcosidekick 

You can either:

* <<ingest-falco-setup-falco-vm,Send Falco data to {es} from virtual machines (VMs)>>; or,
* <<ingest-falco-setup-falco-kubernetes,Send Falco data to {es} from Kubernetes>>.

[discrete]
[[ingest-falco-setup-falco-vm]]
=== Configure Falco and Falcosidekick for VMs

Multiple methods for configuring Falco to send data from VMs to {es} are available. This guide uses the https://github.com/falcosecurity/falcosidekick/blob/master/docs/outputs/elasticsearch.md[Falco sidekick on Docker using environment variables] method. 

[discrete]
=== Configure Falco for VMs:

. Refer to Falco's documentation to https://falco.org/docs/setup/packages/[install Falco on the Linux VMs you wish to monitor]. 
. Once Falco is installed, update `/etc/falco/falco.yaml` as follows:
.. Enable JSON output: `json_output: true`
.. Enable HTTP output: under `http_output`, for the `url` value, enter the `url:port` where Falcosidekick will listen. For example, if Falcosidekick is running on localhost:
+
```
http_output:
  enabled: true
  url: "http://0.0.0.0:2801/"
```

[discrete]
[[falco-config-falco-for-vms]]
=== Configure Falcosidekick for VMs:

. Refer to Falcosidekick's documentation to https://github.com/falcosecurity/falcosidekick?tab=readme-ov-file#installation[install Falcosidekick].
. Use the https://github.com/falcosecurity/falcosidekick/blob/master/docs/outputs/elasticsearch.md[Falcosidekick on Docker using environment variables] method and set your environment variables as follows:
.. `ELASTICSEARCH_HOSTPORT`: Your {es} endpoint URL, which can be found under **Connection details** on the upper right of the **Integrations** page in {kib}.
.. `ELASTICSEARCH_INDEX`: The {es} index where you want to store Falco logs. 
+
IMPORTANT: Your `ELASTICSEARCH_INDEX` value must match `logs-falco.alerts-*`.
+
.. `ELASTICSEARCH_SUFFIX`: The frequency with which you want the {es} index suffix to change. Either `daily`, `monthly`, `annually`, or `none`. 
.. `ELASTICSEARCH_APIKEY`: The recommended way to authenticate to {es}, by providing an {kibana-ref}/api-keys.html[API key]. Note that support for this environment variable starts with Falcosidekick version 2.30. You can access the latest version on Falcosidekick's https://hub.docker.com/r/falcosecurity/falcosidekick[Docker Hub].
.. `ELASTICSEARCH_USERNAME` and `ELASTICSEARCH_PASSWORD`: The username and password for an account on your {es} instance. Authentication using these environment variables is not supported on {ecloud} Serverless.
.. `ELASTICSEARCH_MUTUALTLS` and `ELASTICSEARCH_CHECKCERT`: For security reasons, we recommend setting these to `true`.

For example:

```
docker run -d -p 2801:2801 
           -e ELASTICSEARCH_HOSTPORT=https://test-falco.es.us-west2.gcp.elastic-cloud.com 
           -e ELASTICSEARCH_INDEX=logs-falco.alerts-all 
           -e ELASTICSEARCH_SUFFIX=none 
           -e ELASTICSEARCH_APIKEY=XXXXXXXXXXXXX 
           -e ELASTICSEARCH_MUTUALTLS=true 
           -e ELASTICSEARCH_CHECKCERT=true falcosecurity/falcosidekick
```

IMPORTANT: The {es} account used to authenticate Falcosidekick only needs sufficient privileges to create and write to new indices. We recommend following the principle of least privilege when provisioning this account.

After installing and configuring Falcosidekick, restart Falco with `sudo systemctl restart falco`. Falcosidekick should start sending alerts to {es}.


[discrete]
[[ingest-falco-setup-falco-kubernetes]]
== Configure Falco and Falcosidekick for Kubernetes

1. Add the Falco https://github.com/falcosecurity/charts/blob/master/README.md[Helm charts]:
+
```
helm repo add falcosecurity https://falcosecurity.github.io/charts
helm repo update
```
+
2. Next, install Falco and Falcosidekick using the `falcosecurity/falco` Helm chart with https://github.com/falcosecurity/falcosidekick/blob/master/docs/outputs/elasticsearch.md[appropriate values] for each of the `falcosidekick.config.elasticsearch.*` fields:
+
```
helm install falco falcosecurity/falco \
        --set falcosidekick.enabled=true \
        --set tty=true \
        --set driver.kind=modern_ebpf \
        --set collectors.kubernetes.enabled=true \
        --set falcosidekick.config.elasticsearch.hostport="https://<ES host>" \
        --set falcosidekick.config.elasticsearch.username="<elastic>" \
        --set falcosidekick.config.elasticsearch.password="<password>" \
        --set falcosidekick.config.elasticsearch.index="logs-falco.alerts-all" \
        --set falcosidekick.config.elasticsearch.suffix="none"
```

