[[rules-ui-create]]
[role="xpack"]
== Create a detection rule

Rules run periodically and search for source events, matches, sequences, or {ml} job anomaly results
that meet their criteria. When a rule's criteria are met, a detection alert is
created.

[IMPORTANT]
==============
To create or edit {ml} rules, you must have the
https://www.elastic.co/subscriptions[appropriate license] or use a
{ess-trial}[cloud deployment]. Additionally, you must have the
{ref}/built-in-roles.html[`machine_learning_admin`] user role, and the selected
{ml} job must be running for the rule to function correctly.
==============

You can create the following types of rules:

* <<create-custom-rule, *Custom query*>>: Query-based rule, which searches the defined indices and
creates an alert when one or more documents match the rule's query.
* <<create-ml-rule, *Machine learning>>*: {ml-cap} rule, which creates an alert when a {ml} job
discovers an anomaly above the defined threshold (see <<machine-learning>>).
+
For {ml} rules, the associated {ml} job must be running. If the {ml} job is not
running, the rule will:

** Run and create alerts if existing anomaly results with scores above the defined threshold
are discovered.
** Issue an error stating the {ml} job was not running when the rule executed.
* <<create-threshold-rule, *Threshold*>>: Searches the defined indices and creates a detections alert
when the number of times the specified field's value is present and meets the threshold during
a single execution. When multiple values meet the threshold, an alert is
generated for each value.
+
For example, if the threshold `field` is `source.ip` and its `value` is `10`, an
alert is generated for every source IP address that appears in at least 10 of
the rule's search results.
* <<create-eql-rule, *Event correlation*>>: Searches the defined indices and creates an alert when results match an
{ref}/eql.html[Event Query Language (EQL)] query.
* <<create-indicator-rule, *Indicator match*>>: Creates an alert when {es-sec} index field values match field values defined in the specified indicator index patterns. For example, you can create an indicator index for IP addresses and use this index to create an alert whenever an event's `destination.ip` equals a value in the index. Indicator index field mappings should be {ecs-ref}[ECS-compliant]. For information on creating {es} indices and field types, see
{ref}/getting-started-index.html[Index some documents],
{ref}/indices-create-index.html[Create index API], and
{ref}/mapping-types.html[Field data types]. If you have indicators in a standard file format, such as CSV or JSON, you can also use the Machine Learning Data Visualizer to import your indicators into an indicator index. See https://www.elastic.co/guide/en/machine-learning/7.10/ml-gs-visualizer.html and use the Import Data option to import your indicators.

TIP: You can also use value lists as the indicator match index. See <<indicator-value-lists>> at the end of this topic for more information.

When modifying rules or managing detection alerts, you can add exceptions that prevent a rule from generating an alert even when its criteria are met. This is useful for reducing noise, such as preventing alerts from trusted processes and internal IP addresses. <<detections-ui-exceptions>> describes how to add exceptions to a rule.

NOTE: You can add exceptions to custom query, machine learning, event correlation, and indicator match rule types.

If you are creating a custom query, threshold, or event correlation rule, you can preview the rule beforehand to see what kind of results you can expect. See <<preview-rules, Preview your rule>> in this topic for more information.

For both prebuilt and custom rules, you can send notifications when alerts are created. Notifications can be sent via
Email, PagerDuty, Slack, and Webhook, and can be configured when you create or
edit a rule.

Creating a new rule requires the following steps:

. <<create-rule-ui>>
. <<preview-rules>>
. <<rule-ui-basic-params>>
. <<rule-ui-advanced-params>>
. <<rule-schedule>>
. <<rule-notifications>>

[IMPORTANT]
==============
After you activate a rule, you can periodically check the rule is running as expected
in the <<alerts-ui-monitor, Monitoring tab>> on the All rules page. If you see
values in the `Gap` column, you can <<troubleshoot-signals>>.

When a rule fails to run, the {es-sec-app} tries to rerun it at its next
scheduled run time.
==============

[role="screenshot"]
image::images/all-rules.png[]

[float]
[[create-rule-ui]]
=== Select rule type and scope

. Go to *Detect* -> *Rules* -> *Create new rule*. The *Create new rule* page displays.
+
[role="screenshot"]
image::images/create-new-rule.png[]
+
. Select the type of rule you want to create, then follow the steps outlined in that section:

* <<create-ml-rule, Machine learning>>
* <<create-custom-rule, Custom query>>
* <<create-threshold-rule, Threshold>>
* <<create-eql-rule, Event correlation>>
* <<create-indicator-rule, Indicator match>>

[discrete]
[[create-ml-rule]]
==== Create a machine learning rule
. To create a rule based on a {ml} anomaly threshold, select *Machine Learning*,
then select:
.. The required {ml} job(s).
.. The anomaly score threshold above which alerts are created.
. Click **Continue**, then proceed with <<rule-ui-basic-params, configuring basic rule settings>>.

[discrete]
[[create-custom-rule]]
==== Create a custom rule
. To create a rule based on a KQL or Lucene query, select *Custom query*,
then:
.. Define which {es} indices the rule searches for alerts.
.. Use the filter and query fields to create the criteria used for detecting
alerts.
+
NOTE: You can use {kib} saved queries (save icon) and queries from saved Timelines (`Import query from saved Timeline`) as rule conditions.
+
For example, the following rule detects when the `vssadmin delete shadows`
Windows command is executed:

** *Index patterns*: `winlogbeat-*`
+
> Winlogbeat ships Windows event logs to {es-sec}.

** *Custom query*: `event.action:"Process Create (rule: ProcessCreate)" and process.name:"vssadmin.exe" and process.args:("delete" and "shadows")`
+
> Searches the `winlogbeat-*` indices for `vssadmin.exe` executions with
the `delete` and `shadow` arguments, which are used to delete a volume's shadow
copies.
+
[role="screenshot"]
image::images/rule-query-example.png[]
+
TIP: This example is based on the
<<volume-shadow-copy-deletion-via-vssadmin, Volume Shadow Copy Deletion via VssAdmin>> prebuilt rule.
+
. Continue with <<preview-rules, previewing the rule>> (optional) or click **Continue** to <<rule-ui-basic-params, configure basic rule settings>>.

[discrete]
[[create-threshold-rule]]
==== Create a threshold rule
. To create a rule based on a source event field threshold, select *Threshold*, then:
.. Define which {es} indices the rule analyzes for alerts.
.. Use the filter and query fields to create the criteria used for detecting
alerts.
.. Use the `Group by` and `Threshold` fields to determine which source event field is used as a threshold and the threshold's value.
.. Use the `Count` field to limit alerts by cardinality of a certain field.
+
For example, if `Group by` is `source.ip`, `destination.ip` and its `Threshold` is `10`, an alert is generated for every pair of source and destination IP addresses that appear in at least 10 of the rule's search results.
+
You can also leave the `Group by` field undefined. The rule then creates an alert when the number of search results is equal to or greater than the threshold value. If you set `Count` to limit the results by `process.name` >= 2, an alert will only be generated for source/destination IP pairs that appear with at least 2 unique process names across all events.
+
[IMPORTANT]
==============
Signals created by *threshold* rules are synthetic signals that do not resemble the source documents. The signal itself only contains data about the fields that were aggregated over (the `Group by` fields). Additionally, the signal contains "lookup" data for retrieving a *Timeline* of all of the source events that caused the threshold to be exceeded.
If you wish to create an <<rule-notifications, *Action*>> based on a threshold rule, you can obtain values of the fields that were aggregated over by entering the following:
```
{{#context.alerts}}
  {{#signal.threshold_result.terms}}
    {{value}}
  {{/signal.threshold_result.terms}}
{{/context.alerts}}
```
==============
. Continue with <<preview-rules, previewing the rule>> (optional) or click *Continue* to <<rule-ui-basic-params, configure basic rule settings>>.

[discrete]
[[create-eql-rule]]
==== Create an event correlation rule
. To create an event correlation rule using EQL, select *Event Correlation*, then:
.. Define which {es} indices the rule searches for alerts.
.. Add an {ref}/eql-syntax.html[EQL statement] used to detect alerts.
+
For example, the following rule detects when `msxsl.exe` makes an outbound
network connection:
+
** *Index patterns*: `winlogbeat-*`
+
> Winlogbeat ships Windows events to {es-sec}.

** *EQL query*:
+
[source,eql]
----
sequence by process.entity_id
  [process
    where event.type in ("start", "process_started")
    and process.name == "msxsl.exe"]
  [network
    where event.type == "connection"
    and process.name == "msxsl.exe"
    and network.direction == "outgoing"]
----
+
Searches the `winlogbeat-*` indices for sequences of a `msxsl.exe` process start
event followed by an outbound network connection event that was started by the
`msxsl.exe` process.
+
[role="screenshot"]
image::images/eql-rule-query-example.png[]
+
NOTE: For sequence events, the {security-app} generates a single alert when all events listed in the sequence are detected. To see the matched sequence events in more detail, you can view the alert in the Timeline, and, if all events came from the same process, open the alert in Analyze Event view.
+
. Continue with <<preview-rules, previewing the rule>> (optional) or click *Continue* to <<rule-ui-basic-params, configure basic rule settings>>.

[discrete]
[[create-indicator-rule]]
==== Create an indicator match rule

NOTE: {es-sec} provides limited support for indicator match rules. See <<support-indicator-rules>> for more information.

. To create an indicator match rule that searches for events whose specified field value matches the specified indicator field value in the indicator index patterns, select *Indicator Match*, then fill in the following fields:
.. *Index patterns*: The {es-sec} event indices on which the rule runs.
.. *Custom query*: The query and filters used to retrieve the required results from
the {es-sec} event indices. For example, if you want to match documents that only contain a `destination.ip` address field, add `destination.ip : *`.
+
TIP: If you want the rule to check every field in the indices, use this
wildcard expression: `*:*`.
.. *Indicator index patterns*: The indicator index patterns containing field values for which you want to generate alerts.
+
IMPORTANT: Data in indicator indices must be <<ecs-compliant-reqs, ECS compatible>>, and, therefore, must contain a `@timestamp` field.
+
.. *Indicator index query*: The query and filters used to filter the fields from
the indicator index patterns.
.. *Indicator mapping*: Compares the values of the specified event and indicator field
values. When the field values are identical, an alert is generated. To define
which field values are compared from the indices add the following:
** *Field*: The field used for comparing values in the {es-sec} event
indices.
** *Indicator index field*: The field used for comparing values in the indicator
indices.
.. You can add `AND` and `OR` clauses to define when alerts are generated.
+
For example, to create a rule that generates alerts when `host.name` *and*
`destination.ip` field values in the `logs-*` or `packetbeat-*` {es-sec} indices
are identical to the corresponding field values in the `mock-threat-list` indicator
index, enter the rule parameters seen in the following image:
+
[role="screenshot"]
image::images/indicator-rule-example.png[]
+
TIP: Before you create rules, create <<timelines-ui, Timeline templates>> so
they can be selected here. When alerts generated by the rule are investigated
in the Timeline, Timeline query values are replaced with their corresponding alert
field values.
+
. Continue with <<preview-rules, previewing the rule>> (optional) or click *Continue* to <<rule-ui-basic-params, configure basic rule settings>>.

[discrete]
[[preview-rules]]
=== Preview your rule (optional)

You can preview a custom query, threshold, or event correlation rule to get feedback on how noisy the rule will be before submitting it. You can then fine-tune the query, if needed, to reduce the number of alerts that may come in.

To preview a rule:

. Write the rule query.
+
. Select a timeframe of data to preview query results -- *Last hour*, *Last day*, or *Last month* -- from the *Quick query preview* drop-down.
+
. Click *Preview results*. A histogram shows the number of alerts you can expect based on the defined rule parameters and historical events in your indices.

A "noise warning" is displayed if the preview generates more than one alert per hour.

[role="screenshot"]
image::images/preview-rule.png[]

NOTE: The preview excludes the effects of rule exceptions and timestamp overrides.

[float]
[[rule-ui-basic-params]]
=== Configure basic rule settings

. In the **About rule** pane, fill in the following fields:
.. *Name*: The rule's name.
.. *Description*: A description of what the rule does.
.. *Default severity*: Select the severity level of alerts created by the rule:
* *Low*image::images/rules-ui-create-9c2d1.png[]: Alerts that are of interest but generally not considered to be
security incidents. Sometimes, a combination of low severity events can
indicate suspicious activity.
* *Medium*: Alerts that require investigation.
* *High*: Alerts that require an immediate investigation.
* *Critical*: Alerts that indicate it is highly likely a security incident has
occurred.
.. *Severity override* (optional): Select to use source event values to
override the *Default severity* in generated alerts. When selected, a UI
component is displayed where you can map the source event field values to
severity levels. The following example shows how to map severity levels to `host.name`
values:
+
[role="screenshot"]
image::images/severity-mapping-ui.png[]
.. *Default risk score*: A numerical value between 0 and 100 that correlates
with the *Severity* level. General guidelines are:
* `0` - `21` represents low severity.
* `22` - `47` represents medium severity.
* `48` - `73` represents high severity.
* `74` - `100` represents critical severity.
.. *Risk score override* (optional): Select to use a source event value to
override the *Default risk score* in generated alerts. When selected, a UI
component is displayed to select the source field used for the risk
score. For example, if you want to use the source event's risk score in
alerts:
+
[role="screenshot"]
image::images/risk-source-field-ui.png[]
+
.. *Tags* (optional): Words and phrases used to categorize, filter, and search
the rule.

. Continue with *one* of the following:

* <<rule-ui-advanced-params>>
* <<rule-schedule>>

[float]
[[rule-ui-advanced-params]]
=== Configure advanced rule settings (optional)

. Click *Advanced settings* and fill in the following fields where applicable:
.. *Reference URLs* (optional): References to information that is relevant to
the rule. For example, links to background information.
.. *False positive examples* (optional): List of common scenarios that may produce
false-positive alerts.
.. *MITRE ATT&CK^TM^ threats* (optional): Add relevant https://attack.mitre.org/[MITRE] framework tactics, techniques, and subtechniques.
.. *Investigation guide* (optional): Information for analysts investigating
alerts created by the rule.
.. *Author* (optional): The rule's authors.
.. *License* (optional): The rule's license.
.. *Elastic endpoint exceptions* (optional): Adds all Elastic Endpoint Security
rule exceptions to this rule (see <<detections-ui-exceptions>>).
+
NOTE: If you select this option, you can add
<<endpoint-rule-exceptions, Endpoint exceptions>> on the Rule details page.
Additionally, all future exceptions added to the Elastic Endpoint Security rule
also affect this rule.
+
.. *Building block* (optional): Select to create a building-block rule. By
default, alerts generated from a building-block rule are not displayed in the
UI. See <<building-block-rule>> for more information.
.. *Rule name override* (optional): Select a source event field to use as the
rule name in the UI (Alerts table). This is useful for exposing, at a glance,
more information about an alert. For example, if the rule generates alerts from
Suricata, selecting `event.action` lets you see what action (Suricata category)
caused the event directly in the Alerts table.
.. *Timestamp override* (optional): Select a source event timestamp field. When selected, the rule's query uses the selected field, instead of the default `@timestamp` field, to search for alerts. This can help reduce missing alerts due to network or server outages. Specifically, if your ingest pipeline adds a timestamp when events are sent to {es}, this avoids missing alerts due to ingestion delays.
+
TIP: These Filebeat modules have an `event.ingested` timestamp field that can
be used instead of the default `@timestamp` field:
{filebeat-ref}/filebeat-module-microsoft.html[Microsoft] and
{filebeat-ref}/filebeat-module-gsuite.html[GSuite].

. Click *Continue*. The *Schedule rule* pane is displayed.
+
[role="screenshot"]
image::images/schedule-rule.png[]

. Continue with <<rule-schedule, setting the rule's schedule>>.

[float]
[[rule-schedule]]
=== Set the rule's schedule

. Select how often the rule runs.
. Optionally, add `Additional look-back time` to the rule. When defined, the
rule searches indices with the additional time.
+
For example, if you set a rule to run every 5 minutes with an additional
look-back time of 1 minute, the rule runs every 5 minutes but analyzes the
documents added to indices during the last 6 minutes.
+
[IMPORTANT]
==============
It is recommended to set the `Additional look-back time` to at
least 1 minute. This ensures there are no missing alerts when a rule does not
run exactly at its scheduled time.

The {es-sec-app} prevents duplication. Any duplicate alerts that are discovered during the
`Additional look-back time` are *not* created.
==============
. Click *Continue*. The *Rule actions* pane is displayed.
+
[role="screenshot"]
image::images/rule-actions.png[]

. Do *one* of the following:

* Continue with <<rule-notifications, setting up alert notifications>> (optional).
* Create the rule (with or without activation).

[float]
[[rule-notifications]]
=== Set up alert notifications (optional)

Use {kib} Actions to set up notifications sent via other systems when alerts
are generated.

NOTE: To use {kib} Actions for alert notifications, you need the
https://www.elastic.co/subscriptions[appropriate license] and your role needs *All* privileges for the *Action and Connectors* feature. For more information, see <<case-permissions>>.

. Set when to send notifications:

* *On each rule execution*: Sends a notification every time new alerts are
generated.
* *Hourly*: Sends a notification every hour.
* *Daily*: Sends a notification every day.
* *Weekly*: Sends a notification every week.
+
NOTE: Notifications are sent only when new alerts are generated.
+
The available connector types are displayed.
[role="screenshot"]
image::images/available-action-types.png[]

. Select the required connector type, which determines how notifications are sent. For example, if you select the {jira} connector, notifications are sent to your {jira} system.
+
NOTE: Each action type requires a connector. Connectors store the
information required to send the notification from the external system. You can
configure connectors while creating the rule or on the {kib} Rules and Connectors
page (*Stack Management* -> *Rules and Connectors*). For more
information, see {kibana-ref}/action-types.html[Action and connector types].
+
The selected connector type fields are displayed ({jira} example).
[role="screenshot"]
image::images/selected-action-type.png[]
+
. Fill in the fields for the selected connector types. For all connector types, click
the icon above the `Message` field to add
<<rule-action-variables, placeholders>> for rule and alert details to the
notifications.
+
. Create the rule with or without activation.
+
NOTE: When you activate a rule, it is queued, and its schedule is determined by
its initial run time. For example, if you activate a rule that runs every 5
minutes at 14:03 but it does not run until 14:04, it will run again at 14:09.

[float]
[[rule-action-variables]]
==== Alert notification placeholders

You can use http://mustache.github.io/[mustache syntax] to add the following placeholders to <<rule-notifications, rule action>> fields:

* `{{state.signals_count}}`: Number of alerts detected
* `{{{context.results_link}}}`: URL to the alerts in {kib}
* `{{context.rule.anomaly_threshold}}`: Anomaly threshold score above which
alerts are generated ({ml} rules only)
* `{{context.rule.description}}`: Rule description
* `{{context.rule.false_positives}}`: Rule false positives
* `{{context.rule.filters}}`: Rule filters (query rules only)
* `{{context.rule.id}}`: Unique rule ID returned after creating the rule
* `{{context.rule.index}}`: Indices rule runs on (query rules only)
* `{{context.rule.language}}`: Rule query language (query rules only)
* `{{context.rule.machine_learning_job_id}}`: ID of associated {ml} job ({ml}
rules only)
* `{{context.rule.max_signals}}`: Maximum allowed number of alerts per rule
execution
* `{{context.rule.name}}`: Rule name
* `{{context.rule.output_index}}`: Index to which alerts are written
* `{{context.rule.query}}`: Rule query (query rules only)
* `{{context.rule.references}}`: Rule references
* `{{context.rule.risk_score}}`: Default rule risk score
* `{{context.rule.rule_id}}`: Generated or user-defined rule ID that can be
used as an identifier across systems
* `{{context.rule.saved_id}}`: Saved search ID
* `{{context.rule.severity}}`: Default rule severity
* `{{context.rule.threat}}`: Rule threat framework
* `{{context.rule.threshold}}`: Rule threshold values (threshold rules only)
* `{{context.rule.timeline_id}}`: Associated Timeline ID
* `{{context.rule.timeline_title}}`: Associated Timeline name
* `{{context.rule.type}}`: Rule type
* `{{context.rule.version}}`: Rule version

NOTE: The `{{context.rule.severity}}` and `{{context.rule.risk_score}}`
placeholders contain the rule's default values even when the *Severity override*
and *Risk score override* options are used.

[float]
[[placeholder-examples]]
===== Alert placeholder examples

To understand which fields to parse, see the <<rule-api-overview>> to view the JSON representation of rules.

Example using `{{context.rule.filters}}` to output a list of filters:

[source,json]
--------------------------------------------------
{{#context.rule.filters}}
{{^meta.disabled}}{{meta.key}} {{#meta.negate}}NOT {{/meta.negate}}{{meta.type}} {{^exists}}{{meta.value}}{{meta.params.query}}{{/exists}}{{/meta.disabled}}
{{/context.rule.filters}}
--------------------------------------------------

Example using `{{context.alerts}}` as an array, which contains each alert generated since the last time the action was executed:

[source,json]
--------------------------------------------------
{{#context.alerts}}
Detection alert for user: {{user.name}}
{{/context.alerts}}
--------------------------------------------------

Example using the mustache "current element" notation `{{.}}` to output all the rule references in the `signal.rule.references` array:

[source,json]
--------------------------------------------------
{{#signal.rule.references}} {{.}} {{/signal.rule.references}}
--------------------------------------------------

[float]
[[indicator-value-lists]]
==== Use value lists with indicator match rules

While there are numerous ways you can add data into indicator indices, you can use value lists as the indicator match index in an indicator match rule. Take the following scenario, for example:

You uploaded a value list of known ransomware domains, and you want to be notified if any of those domains matches a value contained in a domain field in your security event index pattern.

. Upload a value list of indicators.
. Create an indicator match rule and fill in the following fields:
.. *Index patterns*: The Elastic Security event indices on which the rule runs.
.. *Custom query*: The query and filters used to retrieve the required results from the Elastic Security event indices (e.g., `host.domain :*`).
.. *Indicator index patterns*: Value lists are stored in a hidden index called `.items-<Kibana space>`. Enter the name of the {kib} space in which this rule will run in this field.
.. *Indicator index query*: Enter the value `list_id :`, followed by the name of the value list you want to use as your indicator index (uploaded in Step 1 above).
.. *Indicator mapping*
* *Field*: Enter the field from the Elastic Security event indices to be used for comparing values.
* *Indicator index field*: Enter the type of value list you created (i.e., `keyword`, `text`, or `IP`).
+
TIP: If you don't remember this information, go to *Detect* -> *Rules > Upload value lists*. Locate the appropriate value list and note the field in the corresponding `Type` column. (Examples include keyword, text, and IP.)

[role="screenshot"]
image::images/indicator_value_list.png[]
