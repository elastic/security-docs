[[rules-api-import]]
=== Import rules

Imports rules from an `.ndjson` file. The following configuration items are also included in the `.ndjson` file:

* Actions
* Exception lists

[WARNING]
====
When used with {kibana-ref}/api-keys.html[API key] authentication, the user's key gets assigned to the affected rules. If the user's key gets deleted or the user becomes inactive, the rules will stop running.

If the API key that is used for authorization has different privileges than the key that created or most recently updated the rule, the rule behavior might change.
====

NOTE: To import rules with actions, you need at least `Read` privileges for the `Action and Connectors` feature. To overwrite or add new connectors, you need `All` privileges for the `Actions and Connectors` feature. To import rules without actions,  you don't need `Actions and Connectors` privileges. Refer to <<enable-detections-ui>> for more information.

[IMPORTANT]
=================
Rule actions and connectors are included in the exported file, but sensitive information about the connector (such as authentication credentials) _is not_ included. You must re-add missing connector details after importing detection rules.

You can use {kib}'s {kibana-ref}/managing-saved-objects.html#managing-saved-objects-export-objects[Saved Objects] UI (*Stack Management* -> *Kibana* -> *Saved Objects*) or the Saved Objects APIs (experimental) to {kibana-ref}/saved-objects-api-export.html[export] and {kibana-ref}/saved-objects-api-import.html[import] any necessary connectors before importing detection rules.

Similarly, any value lists used for rule exceptions are not included in rule exports or imports. Use the <<edit-value-lists, Manage value lists>> UI (*Rules* -> *Detection rules (SIEM)* -> *Manage value lists*) to export and import value lists separately.
=================

==== Request URL

`POST <kibana host>:<port>/api/detection_engine/rules/_import`

The request must include:

* The `Content-Type: multipart/form-data` HTTP header.
* A link to the `.ndjson` file containing the rules.

For example, using cURL:

[source,console]
--------------------------------------------------
curl -X POST "<KibanaURL>/api/detection_engine/rules/_import"
-u <username>:<password> -H 'kbn-xsrf: true'
-H 'Content-Type: multipart/form-data'
--form "file=@<link to file>" <1>
--------------------------------------------------
<1> The relative link to the `.ndjson` file containing the rules.

===== URL query parameters

[width="100%",options="header"]
|==============================================
|Name |Type |Description |Required

|`overwrite` |Boolean |Determines whether existing rules with the same
`rule_id` are overwritten. |No, defaults to `false`.
|`overwrite_exceptions` |Boolean |Determines whether existing exception lists
with the same `list_id` are overwritten. Both the exception list container and
its items are overwritten. |No, defaults to `false`.
|`overwrite_action_connectors` |Boolean |Determines whether existing actions with the same
`kibana.alert.rule.actions.id` are overwritten. |No, defaults to `false`.
|==============================================

===== Example request

Imports the rules in the `detection_rules.ndjson` file and overwrites
existing rules with the same `rule_id` values:

[source,console]
--------------------------------------------------
curl -X POST "api/detection_engine/rules/_import?overwrite=true"
-H 'kbn-xsrf: true' -H 'Content-Type: multipart/form-data'
--form "file=@detection_rules.ndjson"
--------------------------------------------------

==== Response code

`200`::
    Indicates a successful call.

===== Example response

[source,json]
--------------------------------------------------
{
    "success": true,
    "success_count": 1,
    "rules_count": 1,
    "errors": [],
    "exceptions_errors": [],
    "exceptions_success": true,
    "exceptions_success_count": 0
}
--------------------------------------------------
