[[prebuilt-rule-8-13-22-prebuilt-rules-8-13-22-summary]]
[role="xpack"]
== Update v8.13.22

This section lists all updates associated with version 8.13.22 of the Fleet integration *Prebuilt Security Detection Rules*.


[width="100%",options="header"]
|==============================================
|Rule |Description |Status |Version

|<<prebuilt-rule-8-13-22-aws-discovery-api-calls-via-cli-from-a-single-resource, AWS Discovery API Calls via CLI from a Single Resource>> | Detects when a single AWS resource is running multiple `Describe` and `List` API calls in a 10-second window. This behavior could indicate an actor attempting to discover the AWS infrastructure using compromised credentials or a compromised instance. Adversaries may use this information to identify potential targets for further exploitation or to gain a better understanding of the target's infrastructure. | new | 1 

|<<prebuilt-rule-8-13-22-aws-ssm-command-document-created-by-rare-user, AWS SSM Command Document Created by Rare User>> | Identifies when an AWS Systems Manager (SSM) command document is created by a user who does not typically perform this action. Adversaries may create SSM command documents to execute commands on managed instances, potentially leading to unauthorized access, command and control, data exfiltration and more. | new | 1 

|<<prebuilt-rule-8-13-22-aws-sns-email-subscription-by-rare-user, AWS SNS Email Subscription by Rare User>> | Identifies when an SNS topic is subscribed to by an email address of a user who does not typically perform this action. Adversaries may subscribe to an SNS topic to collect sensitive information or exfiltrate data via an external email address. | new | 1 

|<<prebuilt-rule-8-13-22-aws-iam-create-user-via-assumed-role-on-ec2-instance, AWS IAM Create User via Assumed Role on EC2 Instance>> | Detects the creation of an AWS Identity and Access Management (IAM) user initiated by an assumed role on an EC2 instance. Assumed roles allow users or services to temporarily adopt different AWS permissions, but the creation of IAM users through these roles—particularly from within EC2 instances—may indicate a compromised instance. Adversaries might exploit such permissions to establish persistence by creating new IAM users under unauthorized conditions. | new | 1 

|<<prebuilt-rule-8-13-22-aws-sts-assumerole-with-new-mfa-device, AWS STS AssumeRole with New MFA Device>> | Identifies when a user has assumed a role using a new MFA device. Users can assume a role to obtain temporary credentials and access AWS resources using the AssumeRole API of AWS Security Token Service (STS). While a new MFA device is not always indicative of malicious behavior it should be verified as adversaries can use this technique for persistence and privilege escalation. | new | 1 

|<<prebuilt-rule-8-13-22-aws-iam-customer-managed-policy-attached-to-role-by-rare-user, AWS IAM Customer-Managed Policy Attached to Role by Rare User>> | Detects when an AWS Identity and Access Management (IAM) customer-managed policy is attached to a role by an unusual or unauthorized user. Customer-managed policies are policies created and controlled within an AWS account, granting specific permissions to roles or users when attached. This rule identifies potential privilege escalation by flagging cases where a customer-managed policy is attached to a role by an unexpected actor, which could signal unauthorized access or misuse. Attackers may attach policies to roles to expand permissions and elevate their privileges within the AWS environment. This is a [New Terms](https://www.elastic.co/guide/en/security/current/rules-ui-create.html#create-new-terms-rule) rule that uses the `aws.cloudtrail.user_identity.arn` and `aws.cloudtrail.flattened.request_parameters.roleName` fields to check if the combination of the actor ARN and target role name has not been seen in the last 14 days. | new | 1 

|<<prebuilt-rule-8-13-22-aws-sts-role-assumption-by-user, AWS STS Role Assumption by User>> | Identifies when a user or role has assumed a role in AWS Security Token Service (STS). Users can assume a role to obtain temporary credentials and access AWS resources. Adversaries can use this technique for credential access and privilege escalation. This is a [New Terms](https://www.elastic.co/guide/en/security/current/rules-ui-create.html#create-new-terms-rule) rule that identifies when a service assumes a role in AWS Security Token Service (STS) to obtain temporary credentials and access AWS resources. While often legitimate, adversaries may use this technique for unauthorized access, privilege escalation, or lateral movement within an AWS environment. | new | 1 

|<<prebuilt-rule-8-13-22-aws-sts-role-chaining, AWS STS Role Chaining>> | Identifies role chaining activity. Role chaining is when you use one assumed role to assume a second role through the AWS CLI or API. While this a recognized functionality in AWS, role chaining can be abused for privilege escalation if the subsequent assumed role provides additional privileges. Role chaining can also be used as a persistence mechanism as each AssumeRole action results in a refreshed session token with a 1 hour maximum duration. This rule looks for role chaining activity happening within a single account, to eliminate false positives produced by common cross-account behavior. | new | 1 

|<<prebuilt-rule-8-13-22-first-occurrence-of-entra-id-auth-via-devicecode-protocol, First Occurrence of Entra ID Auth via DeviceCode Protocol>> | Identifies when a user is observed for the first time in the last 14 days authenticating using the deviceCode protocol. The device code authentication flow can be abused by attackers to phish users and steal access tokens to impersonate the victim. By its very nature, device code should only be used when logging in to devices without keyboards, where it is difficult to enter emails and passwords. | new | 1 

|<<prebuilt-rule-8-13-22-curl-socks-proxy-activity-from-unusual-parent, Curl SOCKS Proxy Activity from Unusual Parent>> | This rule detects the use of the `curl` command-line tool with SOCKS proxy options, launched from an unusual parent process. Attackers may use `curl` to establish a SOCKS proxy connection to bypass network restrictions and exfiltrate data or communicate with C2 servers. | new | 1 

|<<prebuilt-rule-8-13-22-ipv4-ipv6-forwarding-activity, IPv4/IPv6 Forwarding Activity>> | This rule monitors for the execution of commands that enable IPv4 and IPv6 forwarding on Linux systems. Enabling IP forwarding can be used to route network traffic between different network interfaces, potentially allowing attackers to pivot between networks, exfiltrate data, or establish command and control channels. | new | 1 

|<<prebuilt-rule-8-13-22-directory-creation-in-bin-directory, Directory Creation in /bin directory>> | This rule identifies the creation of directories in the /bin directory. The /bin directory contains essential binary files that are required for the system to function properly. The creation of directories in this location could be an attempt to hide malicious files or executables, as these /bin directories usually just contain binaries. | new | 1 

|<<prebuilt-rule-8-13-22-potential-hex-payload-execution, Potential Hex Payload Execution>> | This rule detects potential hex payload execution on Linux systems. Adversaries may use hex encoding to obfuscate payloads and evade detection mechanisms. | new | 1 

|<<prebuilt-rule-8-13-22-hidden-directory-creation-via-unusual-parent, Hidden Directory Creation via Unusual Parent>> | This rule detects the creation of a hidden directory via an unusual parent executable. Hidden directories are directories that are not visible to the user by default. They are often used by attackers to hide malicious files or tools. | new | 1 

|<<prebuilt-rule-8-13-22-unusual-interactive-shell-launched-from-system-user, Unusual Interactive Shell Launched from System User>> | This rule detects interactive shells launched from system users. System users typically do not require interactive shells, and their presence may indicate malicious activity. | new | 1 

|<<prebuilt-rule-8-13-22-private-key-searching-activity, Private Key Searching Activity>> | This rule detects private key searching activity on Linux systems. Searching for private keys can be an indication of an attacker attempting to escalate privileges or exfiltrate sensitive information. | new | 1 

|<<prebuilt-rule-8-13-22-security-file-access-via-common-utilities, Security File Access via Common Utilities>> | This rule detects sensitive security file access via common utilities on Linux systems. Adversaries may attempt to read from sensitive files using common utilities to gather information about the system and its security configuration. | new | 1 

|<<prebuilt-rule-8-13-22-web-server-spawned-via-python, Web Server Spawned via Python>> | This rule identifies when a web server is spawned via Python. Attackers may use Python to spawn a web server to exfiltrate/infiltrate data or to move laterally within a network. | new | 1 

|<<prebuilt-rule-8-13-22-potential-data-splitting-detected, Potential Data Splitting Detected>> | This rule looks for the usage of common data splitting utilities with specific arguments that indicate data splitting for exfiltration on Linux systems. Data splitting is a technique used by adversaries to split data into smaller parts to avoid detection and exfiltrate data. | new | 1 

|<<prebuilt-rule-8-13-22-memory-swap-modification, Memory Swap Modification>> | This rule detects memory swap modification events on Linux systems. Memory swap modification can be used to manipulate the system's memory and potentially impact the system's performance. This behavior is commonly observed in malware that deploys miner software such as XMRig. | new | 1 

|<<prebuilt-rule-8-13-22-aws-ssm-sendcommand-with-run-shell-command-parameters, AWS SSM `SendCommand` with Run Shell Command Parameters>> | Identifies the use of the AWS Systems Manager (SSM) `SendCommand` API with the either `AWS-RunShellScript` or `AWS-RunPowerShellScript` parameters. The `SendCommand` API call allows users to execute commands on EC2 instances using the SSM service. Adversaries may use this technique to execute commands on EC2 instances without the need for SSH or RDP access. This behavior may indicate an adversary attempting to execute commands on an EC2 instance for malicious purposes. This is a [New Terms](https://www.elastic.co/guide/en/security/current/rules-ui-create.html#create-new-terms-rule) rule that only flags when this behavior is observed for the first time on a host in the last 7 days. | update | 3 

|<<prebuilt-rule-8-13-22-aws-cloudtrail-log-deleted, AWS CloudTrail Log Deleted>> | Identifies the deletion of an AWS log trail. An adversary may delete trails in an attempt to evade defenses. | update | 210 

|<<prebuilt-rule-8-13-22-aws-ec2-multi-region-describeinstances-api-calls, AWS EC2 Multi-Region DescribeInstances API Calls>> | Identifies when a single AWS resource is making `DescribeInstances` API calls in more than 10 regions within a 30-second window. This could indicate a potential threat actor attempting to discover the AWS infrastructure across multiple regions using compromised credentials or a compromised instance. Adversaries may use this information to identify potential targets for further exploitation or to gain a better understanding of the target's infrastructure. | update | 3 

|<<prebuilt-rule-8-13-22-aws-sts-getcalleridentity-api-called-for-the-first-time, AWS STS GetCallerIdentity API Called for the First Time>> | An adversary with access to a set of compromised credentials may attempt to verify that the credentials are valid and determine what account they are using. This rule looks for the first time an identity has called the STS `GetCallerIdentity` API operation in the last 15 days, which may be an indicator of compromised credentials. A legitimate user would not need to call this operation as they should know the account they are using. | update | 3 

|<<prebuilt-rule-8-13-22-aws-ssm-sendcommand-execution-by-rare-user, AWS SSM `SendCommand` Execution by Rare User>> | Detects the execution of commands or scripts on EC2 instances using AWS Systems Manager (SSM), such as `RunShellScript`, `RunPowerShellScript` or custom documents. While legitimate users may employ these commands for management tasks, they can also be exploited by attackers with credentials to establish persistence, install malware, or execute reverse shells for further access to compromised instances. This is a [New Terms](https://www.elastic.co/guide/en/security/current/rules-ui-create.html#create-new-terms-rule) rule that looks for the first instance of this behavior by the `aws.cloudtrail.user_identity.arn` field in the last 7 days. | update | 210 

|<<prebuilt-rule-8-13-22-aws-s3-bucket-enumeration-or-brute-force, AWS S3 Bucket Enumeration or Brute Force>> | Identifies a high number of failed S3 operations from a single source and account (or anonymous account) within a short timeframe. This activity can be indicative of attempting to cause an increase in billing to an account for excessive random operations, cause resource exhaustion, or enumerating bucket names for discovery. | update | 4 

|<<prebuilt-rule-8-13-22-aws-iam-deactivation-of-mfa-device, AWS IAM Deactivation of MFA Device>> | Identifies the deactivation of a specified multi-factor authentication (MFA) device and removes it from association with the user name for which it was originally enabled. In AWS Identity and Access Management (IAM), a device must be deactivated before it can be deleted. | update | 210 

|<<prebuilt-rule-8-13-22-aws-ec2-security-group-configuration-change, AWS EC2 Security Group Configuration Change>> | Identifies a change to an AWS Security Group Configuration. A security group is like a virtual firewall, and modifying configurations may allow unauthorized access. Threat actors may abuse this to establish persistence, exfiltrate data, or pivot in an AWS environment. | update | 207 

|<<prebuilt-rule-8-13-22-aws-iam-user-created-access-keys-for-another-user, AWS IAM User Created Access Keys For Another User>> | An adversary with access to a set of compromised credentials may attempt to persist or escalate privileges by creating a new set of credentials for an existing user. This rule looks for use of the IAM `CreateAccessKey` API operation to create new programmatic access keys for another IAM user. | update | 4 

|<<prebuilt-rule-8-13-22-aws-iam-administratoraccess-policy-attached-to-user, AWS IAM AdministratorAccess Policy Attached to User>> | An adversary with access to a set of compromised credentials may attempt to persist or escalate privileges by attaching additional permissions to compromised user accounts. This rule looks for use of the IAM `AttachUserPolicy` API operation to attach the highly permissive `AdministratorAccess` AWS managed policy to an existing IAM user. | update | 4 

|<<prebuilt-rule-8-13-22-aws-sts-role-assumption-by-service, AWS STS Role Assumption by Service>> | Identifies when a service has assumed a role in AWS Security Token Service (STS). Services can assume a role to obtain temporary credentials and access AWS resources. Adversaries can use this technique for credential access and privilege escalation. This is a [New Terms](https://www.elastic.co/guide/en/security/current/rules-ui-create.html#create-new-terms-rule) rule that identifies when a service assumes a role in AWS Security Token Service (STS) to obtain temporary credentials and access AWS resources. While often legitimate, adversaries may use this technique for unauthorized access, privilege escalation, or lateral movement within an AWS environment. | update | 209 

|<<prebuilt-rule-8-13-22-aws-bedrock-guardrails-detected-multiple-violations-by-a-single-user-over-a-session, AWS Bedrock Guardrails Detected Multiple Violations by a Single User Over a Session>> | Identifies multiple violations of AWS Bedrock guardrails by the same user in the same account over a session. Multiple violations implies that a user may be intentionally attempting to cirvumvent security controls, access sensitive information, or possibly exploit a vulnerability in the system. | update | 4 

|<<prebuilt-rule-8-13-22-aws-bedrock-guardrails-detected-multiple-policy-violations-within-a-single-blocked-request, AWS Bedrock Guardrails Detected Multiple Policy Violations Within a Single Blocked Request>> | Identifies multiple violations of AWS Bedrock guardrails within a single request, resulting in a block action, increasing the likelihood of malicious intent. Multiple violations implies that a user may be intentionally attempting to cirvumvent security controls, access sensitive information, or possibly exploit a vulnerability in the system. | update | 3 

|<<prebuilt-rule-8-13-22-unusual-high-confidence-misconduct-blocks-detected, Unusual High Confidence Misconduct Blocks Detected>> | Detects repeated high-confidence 'BLOCKED' actions coupled with specific violation codes such as 'MISCONDUCT', indicating persistent misuse or attempts to probe the model's ethical boundaries. | update | 4 

|<<prebuilt-rule-8-13-22-potential-abuse-of-resources-by-high-token-count-and-large-response-sizes, Potential Abuse of Resources by High Token Count and Large Response Sizes>> | Detects potential resource exhaustion or data breach attempts by monitoring for users who consistently generate high input token counts, submit numerous requests, and receive large responses. This behavior could indicate an attempt to overload the system or extract an unusually large amount of data, possibly revealing sensitive information or causing service disruptions. | update | 3 

|<<prebuilt-rule-8-13-22-aws-bedrock-detected-multiple-attempts-to-use-denied-models-by-a-single-user, AWS Bedrock Detected Multiple Attempts to use Denied Models by a Single User>> | Identifies multiple successive failed attempts to use denied model resources within AWS Bedrock. This could indicated attempts to bypass limitations of other approved models, or to force an impact on the environment by incurring exhorbitant costs. | update | 3 

|<<prebuilt-rule-8-13-22-aws-bedrock-detected-multiple-validation-exception-errors-by-a-single-user, AWS Bedrock Detected Multiple Validation Exception Errors by a Single User>> | Identifies multiple validation exeception errors within AWS Bedrock. Validation errors occur when you run the InvokeModel or InvokeModelWithResponseStream APIs on a foundation model that uses an incorrect inference parameter or corresponding value. These errors also occur when you use an inference parameter for one model with a model that doesn't have the same API parameter. This could indicate attempts to bypass limitations of other approved models, or to force an impact on the environment by incurring exhorbitant costs. | update | 3 

|<<prebuilt-rule-8-13-22-privileged-docker-container-creation, Privileged Docker Container Creation>> | This rule leverages the new_terms rule type to identify the creation of a potentially unsafe docker container from an unusual parent process. Attackers can use the `--privileged` flag to create containers with escalated privileges, which can lead to trivial privilege escalation, docker escaping and persistence. access. | update | 2 

|<<prebuilt-rule-8-13-22-dpkg-package-installed-by-unusual-parent-process, DPKG Package Installed by Unusual Parent Process>> | This rule detects the installation of a Debian package (dpkg) by an unusual parent process. The dpkg command is used to install, remove, and manage Debian packages on a Linux system. Attackers can abuse the dpkg command to install malicious packages on a system. | update | 2 

|<<prebuilt-rule-8-13-22-rpm-package-installed-by-unusual-parent-process, RPM Package Installed by Unusual Parent Process>> | This rule leverages the new_terms rule type to identify the installation of RPM packages by an unusual parent process. RPM is a package management system used in Linux systems such as Red Hat, CentOS and Fedora. Attacks may backdoor RPM packages to gain initial access or install malicious RPM packages to maintain persistence. | update | 2 

|<<prebuilt-rule-8-13-22-process-termination-followed-by-deletion, Process Termination followed by Deletion>> | Identifies a process termination event quickly followed by the deletion of its executable file. Malware tools and other non-native files dropped or created on a system by an adversary may leave traces to indicate to what occurred. Removal of these files can occur during an intrusion, or as part of a post-intrusion process to minimize the adversary's footprint. | update | 110 

|<<prebuilt-rule-8-13-22-mofcomp-activity, Mofcomp Activity>> | Managed Object Format (MOF) files can be compiled locally or remotely through mofcomp.exe. Attackers may leverage MOF files to build their own namespaces and classes into the Windows Management Instrumentation (WMI) repository, or establish persistence using WMI Event Subscription. | update | 4 

|==============================================
