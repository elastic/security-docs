[[prebuilt-rule-8-11-7-prebuilt-rules-8-11-7-summary]]
[role="xpack"]
== Update v8.11.7

This section lists all updates associated with version 8.11.7 of the Fleet integration *Prebuilt Security Detection Rules*.


[width="100%",options="header"]
|==============================================
|Rule |Description |Status |Version

|<<prebuilt-rule-8-11-7-file-system-debugger-launched-inside-a-privileged-container, File System Debugger Launched Inside a Privileged Container>> | This rule detects the use of the built-in Linux DebugFS utility from inside a privileged container. DebugFS is a special file system debugging utility which supports reading and writing directly from a hard drive device. When launched inside a privileged container, a container deployed with all the capabilities of the host machine, an attacker can access sensitive host level files which could be used for further privilege escalation and container escapes to the host machine. | new | 1 

|<<prebuilt-rule-8-11-7-mount-launched-inside-a-privileged-container, Mount Launched Inside a Privileged Container>> | This rule detects the use of the mount utility from inside a privileged container. The mount command is used to make a device or file system accessible to the system, and then to connect its root directory to a specified mount point on the local file system. When launched inside a privileged container--a container deployed with all the capabilities of the host machine-- an attacker can access sensitive host level files which could be used for further privilege escalation and container escapes to the host machine. Any usage of mount inside a running privileged container should be further investigated. | new | 1 

|<<prebuilt-rule-8-11-7-potential-container-escape-via-modified-notify-on-release-file, Potential Container Escape via Modified notify_on_release File>> | This rule detects modification of the cgroup notify_on_release file from inside a container. When the notify_on_release flag is enabled (1) in a cgroup, then whenever the last task in the cgroup exits or attaches to another cgroup, the command specified in the release_agent file is run and invoked from the host. A privileged container with SYS_ADMIN capabilities, enables a threat actor to mount a cgroup directory and modify the notify_on_release flag in order to take advantage of this feature, which could be used for further privilege escalation and container escapes to the host machine. | new | 1 

|<<prebuilt-rule-8-11-7-potential-container-escape-via-modified-release-agent-file, Potential Container Escape via Modified release_agent File>> | This rule detects modification of the CGroup release_agent file from inside a privileged container. The release_agent is a script that is executed at the termination of any process on that CGroup and is invoked from the host. A privileged container with SYS_ADMIN capabilities, enables a threat actor to mount a CGroup directory and modify the release_agent which could be used for further privilege escalation and container escapes to the host machine. | new | 1 

|<<prebuilt-rule-8-11-7-github-app-deleted, GitHub App Deleted>> | Detects the deletion of a GitHub app either from a repo or an organization. | new | 1 

|<<prebuilt-rule-8-11-7-high-number-of-cloned-github-repos-from-pat, High Number of Cloned GitHub Repos From PAT>> | Detects a high number of unique private repo clone events originating from a single personal access token within a short time period. | new | 1 

|<<prebuilt-rule-8-11-7-github-ueba-multiple-alerts-from-a-github-account, GitHub UEBA - Multiple Alerts from a GitHub Account>> | This rule is part of the "GitHub UEBA - Unusual Activity from Account Pack", and leverages alert data to determine when multiple alerts are executed by the same user in a timespan of one hour. Analysts can use this to prioritize triage and response, as these alerts are a higher indicator of compromised user accounts or PATs. | new | 1 

|<<prebuilt-rule-8-11-7-process-capability-enumeration, Process Capability Enumeration>> | Identifies recursive process capability enumeration of the entire filesystem through the getcap command. Malicious users may manipulate identified capabilities to gain root privileges. | new | 1 

|<<prebuilt-rule-8-11-7-kernel-driver-load-by-non-root-user, Kernel Driver Load by non-root User>> | Detects the loading of a Linux kernel module by a non-root user through system calls. Threat actors may leverage Linux kernel modules to load a rootkit on a system providing them with complete control and the ability to hide from security products. As other rules monitor for the addition of Linux kernel modules through system utilities or .ko files, this rule covers the gap that evasive rootkits leverage by monitoring for kernel module additions on the lowest level through auditd_manager. | new | 1 

|<<prebuilt-rule-8-11-7-potential-privilege-escalation-via-linux-dac-permissions, Potential Privilege Escalation via Linux DAC permissions>> | Identifies potential privilege escalation exploitation of DAC (Discretionary access control) file permissions. The rule identifies exploitation of DAC checks on sensitive file paths via suspicious processes whose capabilities include CAP_DAC_OVERRIDE (where a process can bypass all read write and execution checks) or CAP_DAC_READ_SEARCH (where a process can read any file or perform any executable permission on the directories). | new | 1 

|<<prebuilt-rule-8-11-7-potential-chroot-container-escape-via-mount, Potential Chroot Container Escape via Mount>> | Monitors for the execution of a file system mount followed by a chroot execution. Given enough permissions, a user within a container is capable of mounting the root file system of the host, and leveraging chroot to escape its containarized environment. This behavior pattern is very uncommon and should be investigated. | new | 1 

|<<prebuilt-rule-8-11-7-potential-privilege-escalation-via-enlightenment, Potential Privilege Escalation via Enlightenment>> | Identifies an attempt to exploit a local privilege escalation CVE-2022-37706 via a flaw in Linux window manager package Enlightenment. enlightenment_sys in Enlightenment before 0.25.4 allows local users to gain privileges because it is setuid root, and the system library function mishandles pathnames that begin with a /dev/.. substring. | new | 1 

|<<prebuilt-rule-8-11-7-privilege-escalation-via-gdb-cap-sys-ptrace, Privilege Escalation via GDB CAP_SYS_PTRACE>> | Identifies instances where GDB (granted the CAP_SYS_PTRACE capability) is executed, after which the user's access is elevated to UID/GID 0 (root). In Linux, the CAP_SYS_PTRACE capability grants a process the ability to use the ptrace system call, which is typically used for debugging and allows the process to trace and control other processes. Attackers may leverage this capability to hook and inject into a process that is running with root permissions in order to escalate their privileges to root. | new | 1 

|<<prebuilt-rule-8-11-7-root-network-connection-via-gdb-cap-sys-ptrace, Root Network Connection via GDB CAP_SYS_PTRACE>> | Identifies instances where GDB (granted the CAP_SYS_PTRACE capability) is executed, after which an outbound network connection is initiated by UID/GID 0 (root). In Linux, the CAP_SYS_PTRACE capability grants a process the ability to use the ptrace system call, which is typically used for debugging and allows the process to trace and control other processes. Attackers may leverage this capability to hook and inject into a process that is running with root permissions in order to execute shell code and gain a reverse shell with root privileges. | new | 1 

|<<prebuilt-rule-8-11-7-suspicious-network-connection-via-sudo-binary, Suspicious Network Connection via Sudo Binary>> | Detects network connections initiated by the "sudo" binary. This behavior is uncommon and may occur in instances where reverse shell shellcode is injected into a process run with elevated permissions via "sudo". Attackers may attempt to inject shellcode into processes running as root, to escalate privileges. | new | 1 

|<<prebuilt-rule-8-11-7-potential-buffer-overflow-attack-detected, Potential Buffer Overflow Attack Detected>> | Detects potential buffer overflow attacks by querying the "Segfault Detected" pre-built rule signal index, through a threshold rule, with a minimum number of 100 segfault alerts in a short timespan. A large amount of segfaults in a short time interval could indicate application exploitation attempts. | new | 1 

|<<prebuilt-rule-8-11-7-privilege-escalation-via-cap-chown-cap-fowner-capabilities, Privilege Escalation via CAP_CHOWN/CAP_FOWNER Capabilities>> | Identifies instances where a processes (granted CAP_CHOWN and/or CAP_FOWNER capabilities) is executed, after which the ownership of a suspicious file or binary is changed. In Linux, the CAP_CHOWN capability allows a process to change the owner of a file, while CAP_FOWNER permits it to bypass permission checks on operations that require file ownership (like reading, writing, and executing). Attackers may abuse these capabilities to obtain unauthorized access to files. | new | 1 

|<<prebuilt-rule-8-11-7-privilege-escalation-via-cap-setuid-setgid-capabilities, Privilege Escalation via CAP_SETUID/SETGID Capabilities>> | Identifies instances where a process (granted CAP_SETUID and/or CAP_SETGID capabilities) is executed, after which the user's access is elevated to UID/GID 0 (root). In Linux, the CAP_SETUID and CAP_SETGID capabilities allow a process to change its UID and GID, respectively, providing control over user and group identity management. Attackers may leverage a misconfiguration for exploitation in order to escalate their privileges to root. | new | 1 

|<<prebuilt-rule-8-11-7-potential-evasion-via-windows-filtering-platform, Potential Evasion via Windows Filtering Platform>> | Identifies multiple Windows Filtering Platform block events and where the process name is related to an endpoint security software. Adversaries may add malicious WFP rules to prevent Endpoint security from sending telemetry. | new | 1 

|<<prebuilt-rule-8-11-7-timestomping-using-touch-command, Timestomping using Touch Command>> | Timestomping is an anti-forensics technique which is used to modify the timestamps of a file, often to mimic files that are in the same folder. | update | 105 

|<<prebuilt-rule-8-11-7-security-software-discovery-via-grep, Security Software Discovery via Grep>> | Identifies the use of the grep command to discover known third-party macOS and Linux security tools, such as Antivirus or Host Firewall details. | update | 108 

|<<prebuilt-rule-8-11-7-suspicious-java-child-process, Suspicious JAVA Child Process>> | Identifies suspicious child processes of the Java interpreter process. This may indicate an attempt to execute a malicious JAR file or an exploitation attempt via a JAVA specific vulnerability. | update | 207 

|<<prebuilt-rule-8-11-7-sudo-heap-based-buffer-overflow-attempt, Sudo Heap-Based Buffer Overflow Attempt>> | Identifies the attempted use of a heap-based buffer overflow vulnerability for the Sudo binary in Unix-like systems (CVE-2021-3156). Successful exploitation allows an unprivileged user to escalate to the root user. | update | 104 

|<<prebuilt-rule-8-11-7-sudoers-file-modification, Sudoers File Modification>> | A sudoers file specifies the commands that users or groups can run and from which terminals. Adversaries can take advantage of these configurations to execute commands as other users or spawn processes with higher privileges. | update | 204 

|<<prebuilt-rule-8-11-7-threat-intel-ip-address-indicator-match, Threat Intel IP Address Indicator Match>> | This rule is triggered when an IP address indicator from the Threat Intel Filebeat module or integrations has a match against a network event. | update | 5 

|<<prebuilt-rule-8-11-7-threat-intel-hash-indicator-match, Threat Intel Hash Indicator Match>> | This rule is triggered when a hash indicator from the Threat Intel Filebeat module or integrations has a match against an event that contains file hashes, such as antivirus alerts, process creation, library load, and file operation events. | update | 6 

|<<prebuilt-rule-8-11-7-threat-intel-windows-registry-indicator-match, Threat Intel Windows Registry Indicator Match>> | This rule is triggered when a Windows registry indicator from the Threat Intel Filebeat module or integrations has a match against an event that contains registry data. | update | 5 

|<<prebuilt-rule-8-11-7-threat-intel-url-indicator-match, Threat Intel URL Indicator Match>> | This rule is triggered when a URL indicator from the Threat Intel Filebeat module or integrations has a match against an event that contains URL data, like DNS events, network logs, etc. | update | 5 

|<<prebuilt-rule-8-11-7-aws-iam-brute-force-of-assume-role-policy, AWS IAM Brute Force of Assume Role Policy>> | Identifies a high number of failed attempts to assume an AWS Identity and Access Management (IAM) role. IAM roles are used to delegate access to users or services. An adversary may attempt to enumerate IAM roles in order to determine if a role exists before attempting to assume or hijack the discovered role. | update | 209 

|<<prebuilt-rule-8-11-7-aws-management-console-brute-force-of-root-user-identity, AWS Management Console Brute Force of Root User Identity>> | Identifies a high number of failed authentication attempts to the AWS management console for the Root user identity. An adversary may attempt to brute force the password for the Root user identity, as it has complete access to all services and resources for the AWS account. | update | 206 

|<<prebuilt-rule-8-11-7-statistical-model-detected-c2-beaconing-activity, Statistical Model Detected C2 Beaconing Activity>> | A statistical model has identified command-and-control (C2) beaconing activity. Beaconing can help attackers maintain stealthy communication with their C2 servers, receive instructions and payloads, exfiltrate data and maintain persistence in a network. | update | 3 

|<<prebuilt-rule-8-11-7-statistical-model-detected-c2-beaconing-activity-with-high-confidence, Statistical Model Detected C2 Beaconing Activity with High Confidence>> | A statistical model has identified command-and-control (C2) beaconing activity with high confidence. Beaconing can help attackers maintain stealthy communication with their C2 servers, receive instructions and payloads, exfiltrate data and maintain persistence in a network. | update | 3 

|<<prebuilt-rule-8-11-7-github-repository-deleted, GitHub Repository Deleted>> | This rule detects when a GitHub repository is deleted within your organization. Repositories are a critical component used within an organization to manage work, collaborate with others and release products to the public. Any delete action against a repository should be investigated to determine it's validity. Unauthorized deletion of organization repositories could cause irreversible loss of intellectual property and indicate compromise within your organization. | update | 2 

|<<prebuilt-rule-8-11-7-new-github-owner-added, New GitHub Owner Added>> | Detects when a new member is added to a GitHub organization as an owner. This role provides admin level privileges. Any new owner roles should be investigated to determine it's validity. Unauthorized owner roles could indicate compromise within your organization and provide unlimited access to data and settings. | update | 3 

|<<prebuilt-rule-8-11-7-github-owner-role-granted-to-user, GitHub Owner Role Granted To User>> | This rule detects when a member is granted the organization owner role of a GitHub organization. This role provides admin level privileges. Any new owner role should be investigated to determine its validity. Unauthorized owner roles could indicate compromise within your organization and provide unlimited access to data and settings. | update | 3 

|<<prebuilt-rule-8-11-7-attempts-to-brute-force-a-microsoft-365-user-account, Attempts to Brute Force a Microsoft 365 User Account>> | Identifies attempts to brute force a Microsoft 365 user account. An adversary may attempt a brute force attack to obtain unauthorized access to user accounts. | update | 103 

|<<prebuilt-rule-8-11-7-potential-password-spraying-of-microsoft-365-user-accounts, Potential Password Spraying of Microsoft 365 User Accounts>> | Identifies a high number (25) of failed Microsoft 365 user authentication attempts from a single IP address within 30 minutes, which could be indicative of a password spraying attack. An adversary may attempt a password spraying attack to obtain unauthorized access to user accounts. | update | 103 

|<<prebuilt-rule-8-11-7-o365-excessive-single-sign-on-logon-errors, O365 Excessive Single Sign-On Logon Errors>> | Identifies accounts with a high number of single sign-on (SSO) logon errors. Excessive logon errors may indicate an attempt to brute force a password or SSO token. | update | 103 

|<<prebuilt-rule-8-11-7-attempts-to-brute-force-an-okta-user-account, Attempts to Brute Force an Okta User Account>> | Identifies when an Okta user account is locked out 3 times within a 3 hour window. An adversary may attempt a brute force or password spraying attack to obtain unauthorized access to user accounts. The default Okta authentication policy ensures that a user account is locked out after 10 failed authentication attempts. | update | 208 

|<<prebuilt-rule-8-11-7-okta-brute-force-or-password-spraying-attack, Okta Brute Force or Password Spraying Attack>> | Identifies a high number of failed Okta user authentication attempts from a single IP address, which could be indicative of a brute force or password spraying attack. An adversary may attempt a brute force or password spraying attack to obtain unauthorized access to user accounts. | update | 208 

|<<prebuilt-rule-8-11-7-high-number-of-okta-user-password-reset-or-unlock-attempts, High Number of Okta User Password Reset or Unlock Attempts>> | Identifies a high number of Okta user password reset or account unlock attempts. An adversary may attempt to obtain unauthorized access to Okta user accounts using these methods and attempt to blend in with normal activity in their target's environment and evade detection. | update | 208 

|<<prebuilt-rule-8-11-7-network-activity-detected-via-kworker, Network Activity Detected via Kworker>> | This rule monitors for network connections from a kworker process. kworker, or kernel worker, processes are part of the kernel's workqueue mechanism. They are responsible for executing work that has been scheduled to be done in kernel space, which might include tasks like handling interrupts, background activities, and other kernel-related tasks. Attackers may attempt to evade detection by masquerading as a kernel worker process. | update | 2 

|<<prebuilt-rule-8-11-7-suspicious-network-activity-to-the-internet-by-previously-unknown-executable, Suspicious Network Activity to the Internet by Previously Unknown Executable>> | This rule monitors for network connectivity to the internet from a previously unknown executable located in a suspicious directory to a previously unknown destination ip. An alert from this rule can indicate the presence of potentially malicious activity, such as the execution of unauthorized or suspicious processes attempting to establish connections to unknown or suspicious destinations such as a command and control server. Detecting and investigating such behavior can help identify and mitigate potential security threats, protecting the system and its data from potential compromise. | update | 7 

|<<prebuilt-rule-8-11-7-system-binary-copied-and-or-moved-to-suspicious-directory, System Binary Copied and/or Moved to Suspicious Directory>> | This rule monitors for the copying or moving of a system binary to a suspicious directory. Adversaries may copy/move and rename system binaries to evade detection. Copying a system binary to a different location should not occur often, so if it does, the activity should be investigated. | update | 5 

|<<prebuilt-rule-8-11-7-file-made-immutable-by-chattr, File made Immutable by Chattr>> | Detects a file being made immutable using the chattr binary. Making a file immutable means it cannot be deleted or renamed, no link can be created to this file, most of the file's metadata can not be modified, and the file can not be opened in write mode. Threat actors will commonly utilize this to prevent tampering or modification of their malicious files or any system files they have modified for purposes of persistence (e.g .ssh, /etc/passwd, etc.). | update | 110 

|<<prebuilt-rule-8-11-7-file-permission-modification-in-writable-directory, File Permission Modification in Writable Directory>> | Identifies file permission modifications in common writable directories by a non-root user. Adversaries often drop files or payloads into a writable directory and change permissions prior to execution. | update | 208 

|<<prebuilt-rule-8-11-7-creation-of-hidden-files-and-directories-via-commandline, Creation of Hidden Files and Directories via CommandLine>> | Users can mark specific files as hidden simply by putting a "." as the first character in the file or folder name. Adversaries can use this to their advantage to hide files and folders on the system for persistence and defense evasion. This rule looks for hidden files or folders in common writable directories. | update | 108 

|<<prebuilt-rule-8-11-7-enumeration-of-kernel-modules, Enumeration of Kernel Modules>> | Loadable Kernel Modules (or LKMs) are pieces of code that can be loaded and unloaded into the kernel upon demand. They extend the functionality of the kernel without the need to reboot the system. This identifies attempts to enumerate information about a kernel module. | update | 208 

|<<prebuilt-rule-8-11-7-abnormal-process-id-or-lock-file-created, Abnormal Process ID or Lock File Created>> | Identifies the creation of a Process ID (PID), lock or reboot file created in temporary file storage paradigm (tmpfs) directory /var/run. On Linux, the PID files typically hold the process ID to track previous copies running and manage other tasks. Certain Linux malware use the /var/run directory for holding data, executables and other tasks, disguising itself or these files as legitimate PID files. | update | 212 

|<<prebuilt-rule-8-11-7-potential-curl-cve-2023-38545-exploitation, Potential curl CVE-2023-38545 Exploitation>> | Detects potential exploitation of curl CVE-2023-38545 by monitoring for vulnerable command line arguments in conjunction with an unusual command line length. A flaw in curl version <= 8.3 makes curl vulnerable to a heap based buffer overflow during the SOCKS5 proxy handshake. Upgrade to curl version >= 8.4 to patch this vulnerability. This exploit can be executed with and without the use of environment variables. For increased visibility, enable the collection of http_proxy, HTTPS_PROXY and ALL_PROXY environment variables based on the instructions provided in the setup guide of this rule. | update | 4 

|<<prebuilt-rule-8-11-7-network-connection-via-recently-compiled-executable, Network Connection via Recently Compiled Executable>> | This rule monitors a sequence involving a program compilation event followed by its execution and a subsequent network connection event. This behavior can indicate the set up of a reverse tcp connection to a command-and-control server. Attackers may spawn reverse shells to establish persistence onto a target system. | update | 4 

|<<prebuilt-rule-8-11-7-binary-executed-from-shared-memory-directory, Binary Executed from Shared Memory Directory>> | Identifies the execution of a binary by root in Linux shared memory directories: (/dev/shm/, /run/shm/, /var/run/, /var/lock/). This activity is to be considered highly abnormal and should be investigated. Threat actors have placed executables used for persistence on high-uptime servers in these directories as system backdoors. | update | 109 

|<<prebuilt-rule-8-11-7-potential-reverse-shell-via-java, Potential Reverse Shell via Java>> | This detection rule identifies the execution of a Linux shell process from a Java JAR application post an incoming network connection. This behavior may indicate reverse shell activity via a Java application. | update | 7 

|<<prebuilt-rule-8-11-7-potential-reverse-shell-via-suspicious-child-process, Potential Reverse Shell via Suspicious Child Process>> | This detection rule detects the creation of a shell through a suspicious process chain. Any reverse shells spawned by the specified utilities that are initialized from a single process followed by a network connection attempt will be captured through this rule. Attackers may spawn reverse shells to establish persistence onto a target system. | update | 8 

|<<prebuilt-rule-8-11-7-high-number-of-process-terminations, High Number of Process Terminations>> | This rule identifies a high number (10) of process terminations via pkill from the same host within a short time period. | update | 111 

|<<prebuilt-rule-8-11-7-chkconfig-service-add, Chkconfig Service Add>> | Detects the use of the chkconfig binary to manually add a service for management by chkconfig. Threat actors may utilize this technique to maintain persistence on a system. When a new service is added, chkconfig ensures that the service has either a start or a kill entry in every runlevel and when the system is rebooted the service file added will run providing long-term persistence. | update | 110 

|<<prebuilt-rule-8-11-7-modification-of-openssh-binaries, Modification of OpenSSH Binaries>> | Adversaries may modify SSH related binaries for persistence or credential access by patching sensitive functions to enable unauthorized access or by logging SSH credentials for exfiltration. | update | 108 

|<<prebuilt-rule-8-11-7-cron-job-created-or-changed-by-previously-unknown-process, Cron Job Created or Changed by Previously Unknown Process>> | Linux cron jobs are scheduled tasks that can be leveraged by malicious actors for persistence, privilege escalation and command execution. By creating or modifying cron job configurations, attackers can execute malicious commands or scripts at predefined intervals, ensuring their continued presence and enabling unauthorized activities. | update | 8 

|<<prebuilt-rule-8-11-7-dynamic-linker-copy, Dynamic Linker Copy>> | Detects the copying of the Linux dynamic loader binary and subsequent file creation for the purpose of creating a backup copy. This technique was seen recently being utilized by Linux malware prior to patching the dynamic loader in order to inject and preload a malicious shared object file. This activity should never occur and if it does then it should be considered highly suspicious or malicious. | update | 107 

|<<prebuilt-rule-8-11-7-suspicious-file-creation-in-etc-for-persistence, Suspicious File Creation in /etc for Persistence>> | Detects the manual creation of files in specific etc directories, via user root, used by Linux malware to persist and elevate privileges on compromised systems. File creation in these directories should not be entirely common and could indicate a malicious binary or script installing persistence mechanisms for long term access. | update | 112 

|<<prebuilt-rule-8-11-7-potential-persistence-through-init-d-detected, Potential Persistence Through init.d Detected>> | Files that are placed in the /etc/init.d/ directory in Unix can be used to start custom applications, services, scripts or commands during start-up. Init.d has been mostly replaced in favor of Systemd. However, the "systemd-sysv-generator" can convert init.d files to service unit files that run at boot. Adversaries may add or alter files located in the /etc/init.d/ directory to execute malicious code upon boot in order to gain persistence on the system. | update | 8 

|<<prebuilt-rule-8-11-7-kernel-module-load-via-insmod, Kernel Module Load via insmod>> | Detects the use of the insmod binary to load a Linux kernel object file. Threat actors can use this binary, given they have root privileges, to load a rootkit on a system providing them with complete control and the ability to hide from security products. Manually loading a kernel module in this manner should not be at all common and can indicate suspcious or malicious behavior. | update | 108 

|<<prebuilt-rule-8-11-7-persistence-via-kde-autostart-script-or-desktop-file-modification, Persistence via KDE AutoStart Script or Desktop File Modification>> | Identifies the creation or modification of a K Desktop Environment (KDE) AutoStart script or desktop file that will execute upon each user logon. Adversaries may abuse this method for persistence. | update | 109 

|<<prebuilt-rule-8-11-7-suspicious-file-creation-via-kworker, Suspicious File Creation via Kworker>> | This rule monitors for a file creation event originating from a kworker parent process. kworker, or kernel worker, processes are part of the kernel's workqueue mechanism. They are responsible for executing work that has been scheduled to be done in kernel space, which might include tasks like handling interrupts, background activities, and other kernel-related tasks. Attackers may attempt to evade detection by masquerading as a kernel worker process. | update | 2 

|<<prebuilt-rule-8-11-7-potential-persistence-through-motd-file-creation-detected, Potential Persistence Through MOTD File Creation Detected>> | Message of the day (MOTD) is the message that is presented to the user when a user connects to a Linux server via SSH or a serial connection. Linux systems contain several default MOTD files located in the "/etc/update-motd.d/" and "/usr/lib/update-notifier/" directories. These scripts run as the root user every time a user connects over SSH or a serial connection. Adversaries may create malicious MOTD files that grant them persistence onto the target every time a user connects to the system by executing a backdoor script or command. This rule detects the creation of potentially malicious files within the default MOTD file directories. | update | 8 

|<<prebuilt-rule-8-11-7-potential-persistence-through-run-control-detected, Potential Persistence Through Run Control Detected>> | This rule monitors the creation/alteration of the rc.local file by a previously unknown process executable through the use of the new terms rule type. The /etc/rc.local file is used to start custom applications, services, scripts or commands during start-up. The rc.local file has mostly been replaced by Systemd. However, through the "systemd-rc-local-generator", rc.local files can be converted to services that run at boot. Adversaries may alter rc.local to execute malicious code at start-up, and gain persistence onto the system. | update | 109 

|<<prebuilt-rule-8-11-7-setcap-setuid-setgid-capability-set, Setcap setuid/setgid Capability Set>> | This rule monitors for the addition of the cap_setuid+ep or cap_setgid+ep capabilities via setcap. Setuid (Set User ID) and setgid (Set Group ID) are Unix-like OS features that enable processes to run with elevated privileges, based on the file owner or group. Threat actors can exploit these attributes to achieve persistence by creating malicious binaries, allowing them to maintain control over a compromised system with elevated permissions. | update | 4 

|<<prebuilt-rule-8-11-7-shared-object-created-or-changed-by-previously-unknown-process, Shared Object Created or Changed by Previously Unknown Process>> | This rule monitors the creation of shared object files by previously unknown processes. The creation of a shared object file involves compiling code into a dynamically linked library that can be loaded by other programs at runtime. While this process is typically used for legitimate purposes, malicious actors can leverage shared object files to execute unauthorized code, inject malicious functionality into legitimate processes, or bypass security controls. This allows malware to persist on the system, evade detection, and potentially compromise the integrity and confidentiality of the affected system and its data. | update | 6 

|<<prebuilt-rule-8-11-7-new-systemd-timer-created, New Systemd Timer Created>> | Detects the creation of a systemd timer within any of the default systemd timer directories. Systemd timers can be used by an attacker to gain persistence, by scheduling the execution of a command or script. Similarly to cron/at, systemd timers can be set up to execute on boot time, or on a specific point in time, which allows attackers to regain access in case the connection to the infected asset was lost. | update | 8 

|<<prebuilt-rule-8-11-7-new-systemd-service-created-by-previously-unknown-process, New Systemd Service Created by Previously Unknown Process>> | Systemd service files are configuration files in Linux systems used to define and manage system services. Malicious actors can leverage systemd service files to achieve persistence by creating or modifying service files to execute malicious commands or payloads during system startup. This allows them to maintain unauthorized access, execute additional malicious activities, or evade detection. | update | 8 

|<<prebuilt-rule-8-11-7-potential-macos-ssh-brute-force-detected, Potential macOS SSH Brute Force Detected>> | Identifies a high number (20) of macOS SSH KeyGen process executions from the same host. An adversary may attempt a brute force attack to obtain unauthorized access to user accounts. | update | 107 

|<<prebuilt-rule-8-11-7-potential-network-sweep-detected, Potential Network Sweep Detected>> | This rule identifies a potential network sweep.  A network sweep is a method used by attackers to scan a target network, identifying active hosts, open ports, and available services to gather information on vulnerabilities and weaknesses. This reconnaissance helps them plan subsequent attacks and exploit potential entry points for unauthorized access, data theft, or other malicious activities. This rule proposes threshold logic to check for connection attempts from one source host to 10 or more destination hosts on commonly used network services. | update | 5 

|<<prebuilt-rule-8-11-7-potential-network-scan-detected, Potential Network Scan Detected>> | This rule identifies a potential port scan. A port scan is a method utilized by attackers to systematically scan a target system or network for open ports, allowing them to identify available services and potential vulnerabilities. By mapping out the open ports, attackers can gather critical information to plan and execute targeted attacks, gaining unauthorized access, compromising security, and potentially leading to data breaches, unauthorized control, or further exploitation of the targeted system or network. This rule proposes threshold logic to check for connection attempts from one source host to 20 or more destination ports. | update | 5 

|<<prebuilt-rule-8-11-7-potential-syn-based-network-scan-detected, Potential SYN-Based Network Scan Detected>> | This rule identifies a potential SYN-Based port scan. A SYN port scan is a technique employed by attackers to scan a target network for open ports by sending SYN packets to multiple ports and observing the response. Attackers use this method to identify potential entry points or services that may be vulnerable to exploitation, allowing them to launch targeted attacks or gain unauthorized access to the system or network, compromising its security and potentially leading to data breaches or further malicious activities. This rule proposes threshold logic to check for connection attempts from one source host to 10 or more destination ports using 2 or less packets per port. | update | 5 

|<<prebuilt-rule-8-11-7-credential-dumping-detected-elastic-endgame, Credential Dumping - Detected - Elastic Endgame>> | Elastic Endgame detected Credential Dumping. Click the Elastic Endgame icon in the event.module column or the link in the rule.reference column for additional information. | update | 102 

|<<prebuilt-rule-8-11-7-credential-dumping-prevented-elastic-endgame, Credential Dumping - Prevented - Elastic Endgame>> | Elastic Endgame prevented Credential Dumping. Click the Elastic Endgame icon in the event.module column or the link in the rule.reference column for additional information. | update | 102 

|<<prebuilt-rule-8-11-7-adversary-behavior-detected-elastic-endgame, Adversary Behavior - Detected - Elastic Endgame>> | Elastic Endgame detected an Adversary Behavior. Click the Elastic Endgame icon in the event.module column or the link in the rule.reference column for additional information. | update | 103 

|<<prebuilt-rule-8-11-7-malware-detected-elastic-endgame, Malware - Detected - Elastic Endgame>> | Elastic Endgame detected Malware. Click the Elastic Endgame icon in the event.module column or the link in the rule.reference column for additional information. | update | 102 

|<<prebuilt-rule-8-11-7-malware-prevented-elastic-endgame, Malware - Prevented - Elastic Endgame>> | Elastic Endgame prevented Malware. Click the Elastic Endgame icon in the event.module column or the link in the rule.reference column for additional information. | update | 102 

|<<prebuilt-rule-8-11-7-ransomware-detected-elastic-endgame, Ransomware - Detected - Elastic Endgame>> | Elastic Endgame detected ransomware. Click the Elastic Endgame icon in the event.module column or the link in the rule.reference column for additional information. | update | 102 

|<<prebuilt-rule-8-11-7-ransomware-prevented-elastic-endgame, Ransomware - Prevented - Elastic Endgame>> | Elastic Endgame prevented ransomware. Click the Elastic Endgame icon in the event.module column or the link in the rule.reference column for additional information. | update | 102 

|<<prebuilt-rule-8-11-7-exploit-detected-elastic-endgame, Exploit - Detected - Elastic Endgame>> | Elastic Endgame detected an Exploit. Click the Elastic Endgame icon in the event.module column or the link in the rule.reference column for additional information. | update | 102 

|<<prebuilt-rule-8-11-7-exploit-prevented-elastic-endgame, Exploit - Prevented - Elastic Endgame>> | Elastic Endgame prevented an Exploit. Click the Elastic Endgame icon in the event.module column or the link in the rule.reference column for additional information. | update | 102 

|<<prebuilt-rule-8-11-7-credential-manipulation-detected-elastic-endgame, Credential Manipulation - Detected - Elastic Endgame>> | Elastic Endgame detected Credential Manipulation. Click the Elastic Endgame icon in the event.module column or the link in the rule.reference column for additional information. | update | 102 

|<<prebuilt-rule-8-11-7-credential-manipulation-prevented-elastic-endgame, Credential Manipulation - Prevented - Elastic Endgame>> | Elastic Endgame prevented Credential Manipulation. Click the Elastic Endgame icon in the event.module column or the link in the rule.reference column for additional information. | update | 102 

|<<prebuilt-rule-8-11-7-permission-theft-detected-elastic-endgame, Permission Theft - Detected - Elastic Endgame>> | Elastic Endgame detected Permission Theft. Click the Elastic Endgame icon in the event.module column or the link in the rule.reference column for additional information. | update | 102 

|<<prebuilt-rule-8-11-7-permission-theft-prevented-elastic-endgame, Permission Theft - Prevented - Elastic Endgame>> | Elastic Endgame prevented Permission Theft. Click the Elastic Endgame icon in the event.module column or the link in the rule.reference column for additional information. | update | 102 

|<<prebuilt-rule-8-11-7-process-injection-detected-elastic-endgame, Process Injection - Detected - Elastic Endgame>> | Elastic Endgame detected Process Injection. Click the Elastic Endgame icon in the event.module column or the link in the rule.reference column for additional information. | update | 102 

|<<prebuilt-rule-8-11-7-process-injection-prevented-elastic-endgame, Process Injection - Prevented - Elastic Endgame>> | Elastic Endgame prevented Process Injection. Click the Elastic Endgame icon in the event.module column or the link in the rule.reference column for additional information. | update | 102 

|<<prebuilt-rule-8-11-7-potential-file-transfer-via-certreq, Potential File Transfer via Certreq>> | Identifies Certreq making an HTTP Post request. Adversaries could abuse Certreq to download files or upload data to a remote URL. | update | 7 

|<<prebuilt-rule-8-11-7-potential-dns-tunneling-via-nslookup, Potential DNS Tunneling via NsLookup>> | This rule identifies a large number (15) of nslookup.exe executions with an explicit query type from the same host. This may indicate command and control activity utilizing the DNS protocol. | update | 109 

|<<prebuilt-rule-8-11-7-remote-file-download-via-desktopimgdownldr-utility, Remote File Download via Desktopimgdownldr Utility>> | Identifies the desktopimgdownldr utility being used to download a remote file. An adversary may use desktopimgdownldr to download arbitrary files as an alternative to certutil. | update | 110 

|<<prebuilt-rule-8-11-7-remote-file-download-via-mpcmdrun, Remote File Download via MpCmdRun>> | Identifies the Windows Defender configuration utility (MpCmdRun.exe) being used to download a remote file. | update | 110 

|<<prebuilt-rule-8-11-7-ntds-or-sam-database-file-copied, NTDS or SAM Database File Copied>> | Identifies a copy operation of the Active Directory Domain Database (ntds.dit) or Security Account Manager (SAM) files. Those files contain sensitive information including hashed domain and/or local credentials. | update | 110 

|<<prebuilt-rule-8-11-7-credential-acquisition-via-registry-hive-dumping, Credential Acquisition via Registry Hive Dumping>> | Identifies attempts to export a registry hive which may contain credentials using the Windows reg.exe tool. | update | 108 

|<<prebuilt-rule-8-11-7-microsoft-iis-service-account-password-dumped, Microsoft IIS Service Account Password Dumped>> | Identifies the Internet Information Services (IIS) command-line tool, AppCmd, being used to list passwords. An attacker with IIS web server access via a web shell can decrypt and dump the IIS AppPool service account password using AppCmd. | update | 108 

|<<prebuilt-rule-8-11-7-microsoft-iis-connection-strings-decryption, Microsoft IIS Connection Strings Decryption>> | Identifies use of aspnet_regiis to decrypt Microsoft IIS connection strings. An attacker with Microsoft IIS web server access via a webshell or alike can decrypt and dump any hardcoded connection strings, such as the MSSQL service account password using aspnet_regiis command. | update | 108 

|<<prebuilt-rule-8-11-7-wireless-credential-dumping-using-netsh-command, Wireless Credential Dumping using Netsh Command>> | Identifies attempts to dump Wireless saved access keys in clear text using the Windows built-in utility Netsh. | update | 7 

|<<prebuilt-rule-8-11-7-adding-hidden-file-attribute-via-attrib, Adding Hidden File Attribute via Attrib>> | Adversaries can add the 'hidden' attribute to files to hide them from the user in an attempt to evade detection. | update | 110 

|<<prebuilt-rule-8-11-7-clearing-windows-console-history, Clearing Windows Console History>> | Identifies when a user attempts to clear console history. An adversary may clear the command history of a compromised account to conceal the actions undertaken during an intrusion. | update | 109 

|<<prebuilt-rule-8-11-7-clearing-windows-event-logs, Clearing Windows Event Logs>> | Identifies attempts to clear or disable Windows event log stores using Windows wevetutil command. This is often done by attackers in an attempt to evade detection or destroy forensic evidence on a system. | update | 110 

|<<prebuilt-rule-8-11-7-code-signing-policy-modification-through-built-in-tools, Code Signing Policy Modification Through Built-in tools>> | Identifies attempts to disable/modify the code signing policy through system native utilities. Code signing provides authenticity on a program, and grants the user with the ability to check whether the program has been tampered with. By allowing the execution of unsigned or self-signed code, threat actors can craft and execute malicious code. | update | 6 

|<<prebuilt-rule-8-11-7-windows-defender-exclusions-added-via-powershell, Windows Defender Exclusions Added via PowerShell>> | Identifies modifications to the Windows Defender configuration settings using PowerShell to add exclusions at the folder directory or process level. | update | 108 

|<<prebuilt-rule-8-11-7-delete-volume-usn-journal-with-fsutil, Delete Volume USN Journal with Fsutil>> | Identifies use of the fsutil.exe to delete the volume USNJRNL. This technique is used by attackers to eliminate evidence of files created during post-exploitation activities. | update | 108 

|<<prebuilt-rule-8-11-7-disable-windows-firewall-rules-via-netsh, Disable Windows Firewall Rules via Netsh>> | Identifies use of the netsh.exe to disable or weaken the local firewall. Attackers will use this command line tool to disable the firewall during troubleshooting or to enable network mobility. | update | 108 

|<<prebuilt-rule-8-11-7-disable-windows-event-and-security-logs-using-built-in-tools, Disable Windows Event and Security Logs Using Built-in Tools>> | Identifies attempts to disable EventLog via the logman Windows utility, PowerShell, or auditpol. This is often done by attackers in an attempt to evade detection on a system. | update | 110 

|<<prebuilt-rule-8-11-7-remote-desktop-enabled-in-windows-firewall-by-netsh, Remote Desktop Enabled in Windows Firewall by Netsh>> | Identifies use of the network shell utility (netsh.exe) to enable inbound Remote Desktop Protocol (RDP) connections in the Windows Firewall. | update | 108 

|<<prebuilt-rule-8-11-7-control-panel-process-with-unusual-arguments, Control Panel Process with Unusual Arguments>> | Identifies unusual instances of Control Panel with suspicious keywords or paths in the process command line value. Adversaries may abuse control.exe to proxy execution of malicious code. | update | 109 

|<<prebuilt-rule-8-11-7-imageload-via-windows-update-auto-update-client, ImageLoad via Windows Update Auto Update Client>> | Identifies abuse of the Windows Update Auto Update Client (wuauclt.exe) to load an arbitrary DLL. This behavior is used as a defense evasion technique to blend-in malicious activity with legitimate Windows software. | update | 110 

|<<prebuilt-rule-8-11-7-microsoft-build-engine-started-an-unusual-process, Microsoft Build Engine Started an Unusual Process>> | An instance of MSBuild, the Microsoft Build Engine, started a PowerShell script or the Visual C# Command Line Compiler. This technique is sometimes used to deploy a malicious payload using the Build Engine. | update | 209 

|<<prebuilt-rule-8-11-7-iis-http-logging-disabled, IIS HTTP Logging Disabled>> | Identifies when Internet Information Services (IIS) HTTP Logging is disabled on a server. An attacker with IIS server access via a webshell or other mechanism can disable HTTP Logging as an effective anti-forensics measure. | update | 108 

|<<prebuilt-rule-8-11-7-msbuild-making-network-connections, MsBuild Making Network Connections>> | Identifies MsBuild.exe making outbound network connections. This may indicate adversarial activity as MsBuild is often leveraged by adversaries to execute code and evade detection. | update | 107 

|<<prebuilt-rule-8-11-7-suspicious-net-reflection-via-powershell, Suspicious .NET Reflection via PowerShell>> | Detects the use of Reflection.Assembly to load PEs and DLLs in memory in PowerShell scripts. Attackers use this method to load executables and DLLs without writing to the disk, bypassing security solutions. | update | 111 

|<<prebuilt-rule-8-11-7-suspicious-certutil-commands, Suspicious CertUtil Commands>> | Identifies suspicious commands being used with certutil.exe. CertUtil is a native Windows component which is part of Certificate Services. CertUtil is often abused by attackers to live off the land for stealthier command and control or data exfiltration. | update | 107 

|<<prebuilt-rule-8-11-7-suspicious-wmic-xsl-script-execution, Suspicious WMIC XSL Script Execution>> | Identifies WMIC allowlist bypass techniques by alerting on suspicious execution of scripts. When WMIC loads scripting libraries it may be indicative of an allowlist bypass. | update | 107 

|<<prebuilt-rule-8-11-7-file-creation-time-changed, File Creation Time Changed>> | Identifies modification of a file creation time. Adversaries may modify file time attributes to blend malicious content with existing files. Timestomping is a technique that modifies the timestamps of a file often to mimic files that are in trusted directories. | update | 4 

|<<prebuilt-rule-8-11-7-unusual-process-execution-path-alternate-data-stream, Unusual Process Execution Path - Alternate Data Stream>> | Identifies processes running from an Alternate Data Stream. This is uncommon for legitimate processes and sometimes done by adversaries to hide malware. | update | 107 

|<<prebuilt-rule-8-11-7-unusual-child-process-from-a-system-virtual-process, Unusual Child Process from a System Virtual Process>> | Identifies a suspicious child process of the Windows virtual system process, which could indicate code injection. | update | 108 

|<<prebuilt-rule-8-11-7-potential-evasion-via-filter-manager, Potential Evasion via Filter Manager>> | The Filter Manager Control Program (fltMC.exe) binary may be abused by adversaries to unload a filter driver and evade defenses. | update | 108 

|<<prebuilt-rule-8-11-7-signed-proxy-execution-via-ms-work-folders, Signed Proxy Execution via MS Work Folders>> | Identifies the use of Windows Work Folders to execute a potentially masqueraded control.exe file in the current working directory. Misuse of Windows Work Folders could indicate malicious activity. | update | 107 

|<<prebuilt-rule-8-11-7-suspicious-execution-via-windows-subsystem-for-linux, Suspicious Execution via Windows Subsystem for Linux>> | Detects Linux Bash commands from the the Windows Subsystem for Linux. Adversaries may enable and use WSL for Linux to avoid detection. | update | 5 

|<<prebuilt-rule-8-11-7-execution-via-windows-subsystem-for-linux, Execution via Windows Subsystem for Linux>> | Detects attempts to execute a program on the host from the Windows Subsystem for Linux. Adversaries may enable and use WSL for Linux to avoid detection. | update | 5 

|<<prebuilt-rule-8-11-7-windows-subsystem-for-linux-enabled-via-dism-utility, Windows Subsystem for Linux Enabled via Dism Utility>> | Detects attempts to enable the Windows Subsystem for Linux using Microsoft Dism utility. Adversaries may enable and use WSL for Linux to avoid detection. | update | 6 

|<<prebuilt-rule-8-11-7-host-files-system-changes-via-windows-subsystem-for-linux, Host Files System Changes via Windows Subsystem for Linux>> | Detects files creation and modification on the host system from the the Windows Subsystem for Linux. Adversaries may enable and use WSL for Linux to avoid detection. | update | 5 

|<<prebuilt-rule-8-11-7-attempt-to-install-kali-linux-via-wsl, Attempt to Install Kali Linux via WSL>> | Detects attempts to install or use Kali Linux via Windows Subsystem for Linux. Adversaries may enable and use WSL for Linux to avoid detection. | update | 6 

|<<prebuilt-rule-8-11-7-adfind-command-activity, AdFind Command Activity>> | This rule detects the Active Directory query tool, AdFind.exe. AdFind has legitimate purposes, but it is frequently leveraged by threat actors to perform post-exploitation Active Directory reconnaissance. The AdFind tool has been observed in Trickbot, Ryuk, Maze, and FIN6 campaigns. For Winlogbeat, this rule requires Sysmon. | update | 109 

|<<prebuilt-rule-8-11-7-enumeration-of-administrator-accounts, Enumeration of Administrator Accounts>> | Identifies instances of lower privilege accounts enumerating Administrator accounts or groups using built-in Windows tools. | update | 110 

|<<prebuilt-rule-8-11-7-account-discovery-command-via-system-account, Account Discovery Command via SYSTEM Account>> | Identifies when the SYSTEM account uses an account discovery utility. This could be a sign of discovery activity after an adversary has achieved privilege escalation. | update | 109 

|<<prebuilt-rule-8-11-7-enumerating-domain-trusts-via-dsquery-exe, Enumerating Domain Trusts via DSQUERY.EXE>> | Identifies the use of dsquery.exe for domain trust discovery purposes. Adversaries may use this command-line utility to enumerate trust relationships that may be used for Lateral Movement opportunities in Windows multi-domain forest environments. | update | 6 

|<<prebuilt-rule-8-11-7-enumerating-domain-trusts-via-nltest-exe, Enumerating Domain Trusts via NLTEST.EXE>> | Identifies the use of nltest.exe for domain trust discovery purposes. Adversaries may use this command-line utility to enumerate domain trusts and gain insight into trust relationships, as well as the state of Domain Controller (DC) replication in a Microsoft Windows NT Domain. | update | 109 

|<<prebuilt-rule-8-11-7-powershell-suspicious-discovery-related-windows-api-functions, PowerShell Suspicious Discovery Related Windows API Functions>> | This rule detects the use of discovery-related Windows API functions in PowerShell Scripts. Attackers can use these functions to perform various situational awareness related activities, like enumerating users, shares, sessions, domain trusts, groups, etc. | update | 112 

|<<prebuilt-rule-8-11-7-enumeration-of-privileged-local-groups-membership, Enumeration of Privileged Local Groups Membership>> | Identifies instances of an unusual process enumerating built-in Windows privileged local groups membership like Administrators or Remote Desktop users. | update | 210 

|<<prebuilt-rule-8-11-7-whoami-process-activity, Whoami Process Activity>> | Identifies suspicious use of whoami.exe which displays user, group, and privileges information for the user who is currently logged on to the local system. | update | 109 

|<<prebuilt-rule-8-11-7-command-execution-via-solarwinds-process, Command Execution via SolarWinds Process>> | A suspicious SolarWinds child process (Cmd.exe or Powershell.exe) was detected. | update | 109 

|<<prebuilt-rule-8-11-7-suspicious-solarwinds-child-process, Suspicious SolarWinds Child Process>> | A suspicious SolarWinds child process was detected, which may indicate an attempt to execute malicious programs. | update | 108 

|<<prebuilt-rule-8-11-7-command-prompt-network-connection, Command Prompt Network Connection>> | Identifies cmd.exe making a network connection. Adversaries could abuse cmd.exe to download or execute malware from a remote URL. | update | 106 

|<<prebuilt-rule-8-11-7-svchost-spawning-cmd, Svchost spawning Cmd>> | Identifies a suspicious parent child process relationship with cmd.exe descending from svchost.exe | update | 209 

|<<prebuilt-rule-8-11-7-enumeration-command-spawned-via-wmiprvse, Enumeration Command Spawned via WMIPrvSE>> | Identifies native Windows host and network enumeration commands spawned by the Windows Management Instrumentation Provider Service (WMIPrvSE). | update | 109 

|<<prebuilt-rule-8-11-7-execution-from-unusual-directory-command-line, Execution from Unusual Directory - Command Line>> | Identifies process execution from suspicious default Windows directories. This may be abused by adversaries to hide malware in trusted paths. | update | 110 

|<<prebuilt-rule-8-11-7-network-connection-via-compiled-html-file, Network Connection via Compiled HTML File>> | Compiled HTML files (.chm) are commonly distributed as part of the Microsoft HTML Help system. Adversaries may conceal malicious code in a CHM file and deliver it to a victim for execution. CHM content is loaded by the HTML Help executable program (hh.exe). | update | 106 

|<<prebuilt-rule-8-11-7-potential-powershell-hacktool-script-by-function-names, Potential PowerShell HackTool Script by Function Names>> | Detects known PowerShell offensive tooling functions names in PowerShell scripts. Attackers commonly use out-of-the-box offensive tools without modifying the code. This rule aim is to take advantage of that. | update | 9 

|<<prebuilt-rule-8-11-7-suspicious-cmd-execution-via-wmi, Suspicious Cmd Execution via WMI>> | Identifies suspicious command execution (cmd) via Windows Management Instrumentation (WMI) on a remote host. This could be indicative of adversary lateral movement. | update | 109 

|<<prebuilt-rule-8-11-7-suspicious-powershell-engine-imageload, Suspicious PowerShell Engine ImageLoad>> | Identifies the PowerShell engine being invoked by unexpected processes. Rather than executing PowerShell functionality with powershell.exe, some attackers do this to operate more stealthily. | update | 209 

|<<prebuilt-rule-8-11-7-third-party-backup-files-deleted-via-unexpected-process, Third-party Backup Files Deleted via Unexpected Process>> | Identifies the deletion of backup files, saved using third-party software, by a process outside of the backup suite. Adversaries may delete Backup files to ensure that recovery from a ransomware attack is less likely. | update | 110 

|<<prebuilt-rule-8-11-7-deleting-backup-catalogs-with-wbadmin, Deleting Backup Catalogs with Wbadmin>> | Identifies use of the wbadmin.exe to delete the backup catalog. Ransomware and other malware may do this to prevent system recovery. | update | 109 

|<<prebuilt-rule-8-11-7-high-number-of-process-and-or-service-terminations, High Number of Process and/or Service Terminations>> | This rule identifies a high number (10) of process terminations (stop, delete, or suspend) from the same host within a short time period. | update | 107 

|<<prebuilt-rule-8-11-7-volume-shadow-copy-deleted-or-resized-via-vssadmin, Volume Shadow Copy Deleted or Resized via VssAdmin>> | Identifies use of vssadmin.exe for shadow copy deletion or resizing on endpoints. This commonly occurs in tandem with ransomware or other destructive attacks. | update | 109 

|<<prebuilt-rule-8-11-7-volume-shadow-copy-deletion-via-powershell, Volume Shadow Copy Deletion via PowerShell>> | Identifies the use of the Win32_ShadowCopy class and related cmdlets to achieve shadow copy deletion. This commonly occurs in tandem with ransomware or other destructive attacks. | update | 109 

|<<prebuilt-rule-8-11-7-windows-script-executing-powershell, Windows Script Executing PowerShell>> | Identifies a PowerShell process launched by either cscript.exe or wscript.exe. Observing Windows scripting processes executing a PowerShell script, may be indicative of malicious activity. | update | 109 

|<<prebuilt-rule-8-11-7-microsoft-exchange-server-um-spawning-suspicious-processes, Microsoft Exchange Server UM Spawning Suspicious Processes>> | Identifies suspicious processes being spawned by the Microsoft Exchange Server Unified Messaging (UM) service. This activity has been observed exploiting CVE-2021-26857. | update | 107 

|<<prebuilt-rule-8-11-7-microsoft-exchange-worker-spawning-suspicious-processes, Microsoft Exchange Worker Spawning Suspicious Processes>> | Identifies suspicious processes being spawned by the Microsoft Exchange Server worker process (w3wp). This activity may indicate exploitation activity or access to an existing web shell backdoor. | update | 107 

|<<prebuilt-rule-8-11-7-suspicious-ms-office-child-process, Suspicious MS Office Child Process>> | Identifies suspicious child processes of frequently targeted Microsoft Office applications (Word, PowerPoint, Excel). These child processes are often launched during exploitation of Office applications or from documents with malicious macros. | update | 110 

|<<prebuilt-rule-8-11-7-suspicious-ms-outlook-child-process, Suspicious MS Outlook Child Process>> | Identifies suspicious child processes of Microsoft Outlook. These child processes are often associated with spear phishing activity. | update | 109 

|<<prebuilt-rule-8-11-7-potential-pass-the-hash-pth-attempt, Potential Pass-the-Hash (PtH) Attempt>> | Adversaries may pass the hash using stolen password hashes to move laterally within an environment, bypassing normal system access controls. Pass the hash (PtH) is a method of authenticating as a user without having access to the user's cleartext password. | update | 3 

|<<prebuilt-rule-8-11-7-direct-outbound-smb-connection, Direct Outbound SMB Connection>> | Identifies unexpected processes making network connections over port 445. Windows File Sharing is typically implemented over Server Message Block (SMB), which communicates between hosts using port 445. When legitimate, these network connections are established by the kernel. Processes making 445/tcp connections may be port scanners, exploits, or suspicious user-level processes moving laterally. | update | 109 

|<<prebuilt-rule-8-11-7-remote-execution-via-file-shares, Remote Execution via File Shares>> | Identifies the execution of a file that was created by the virtual system process. This may indicate lateral movement via network file shares. | update | 110 

|<<prebuilt-rule-8-11-7-remote-file-copy-to-a-hidden-share, Remote File Copy to a Hidden Share>> | Identifies a remote file copy attempt to a hidden network share. This may indicate lateral movement or data staging activity. | update | 107 

|<<prebuilt-rule-8-11-7-remotely-started-services-via-rpc, Remotely Started Services via RPC>> | Identifies remote execution of Windows services over remote procedure call (RPC). This could be indicative of lateral movement, but will be noisy if commonly done by administrators." | update | 109 

|<<prebuilt-rule-8-11-7-suspicious-rdp-activex-client-loaded, Suspicious RDP ActiveX Client Loaded>> | Identifies suspicious Image Loading of the Remote Desktop Services ActiveX Client (mstscax), this may indicate the presence of RDP lateral movement capability. | update | 107 

|<<prebuilt-rule-8-11-7-registry-persistence-via-appinit-dll, Registry Persistence via AppInit DLL>> | AppInit DLLs are dynamic-link libraries (DLLs) that are loaded into every process that creates a user interface (loads user32.dll) on Microsoft Windows operating systems. The AppInit DLL mechanism is used to load custom code into user-mode processes, allowing for the customization of the user interface and the behavior of Windows-based applications. Attackers who add those DLLs to the registry locations can execute code with elevated privileges, similar to process injection, and provide a solid and constant persistence on the machine. | update | 108 

|<<prebuilt-rule-8-11-7-persistence-via-scheduled-job-creation, Persistence via Scheduled Job Creation>> | A job can be used to schedule programs or scripts to be executed at a specified date and time. Adversaries may abuse task scheduling functionality to facilitate initial or recurring execution of malicious code. | update | 106 

|<<prebuilt-rule-8-11-7-a-scheduled-task-was-created, A scheduled task was created>> | Indicates the creation of a scheduled task using Windows event logs. Adversaries can use these to establish persistence, move laterally, and/or escalate privileges. | update | 8 

|<<prebuilt-rule-8-11-7-unusual-persistence-via-services-registry, Unusual Persistence via Services Registry>> | Identifies processes modifying the services registry key directly, instead of through the expected Windows APIs. This could be an indication of an adversary attempting to stealthily persist through abnormal service creation or modification of an existing service. | update | 106 

|<<prebuilt-rule-8-11-7-component-object-model-hijacking, Component Object Model Hijacking>> | Identifies Component Object Model (COM) hijacking via registry modification. Adversaries may establish persistence by executing malicious content triggered by hijacked references to COM objects. | update | 110 

|<<prebuilt-rule-8-11-7-system-shells-via-services, System Shells via Services>> | Windows services typically run as SYSTEM and can be used as a privilege escalation opportunity. Malware or penetration testers may run a shell as a service to gain SYSTEM permissions. | update | 109 

|<<prebuilt-rule-8-11-7-potential-persistence-via-time-provider-modification, Potential Persistence via Time Provider Modification>> | Identifies modification of the Time Provider. Adversaries may establish persistence by registering and enabling a malicious DLL as a time provider. Windows uses the time provider architecture to obtain accurate time stamps from other network devices or clients in the network. Time providers are implemented in the form of a DLL file which resides in the System32 folder. The service W32Time initiates during the startup of Windows and loads w32time.dll. | update | 107 

|<<prebuilt-rule-8-11-7-potential-application-shimming-via-sdbinst, Potential Application Shimming via Sdbinst>> | The Application Shim was created to allow for backward compatibility of software as the operating system codebase changes over time. This Windows functionality has been abused by attackers to stealthily gain persistence and arbitrary code execution in legitimate Windows processes. | update | 108 

|<<prebuilt-rule-8-11-7-persistence-via-telemetrycontroller-scheduled-task-hijack, Persistence via TelemetryController Scheduled Task Hijack>> | Detects the successful hijack of Microsoft Compatibility Appraiser scheduled task to establish persistence with an integrity level of system. | update | 108 

|<<prebuilt-rule-8-11-7-persistence-via-wmi-event-subscription, Persistence via WMI Event Subscription>> | An adversary can use Windows Management Instrumentation (WMI) to install event filters, providers, consumers, and bindings that execute code when a defined event occurs. Adversaries may use the capabilities of WMI to subscribe to an event and execute arbitrary code when that event occurs, providing persistence on a system. | update | 109 

|<<prebuilt-rule-8-11-7-execution-via-mssql-xp-cmdshell-stored-procedure, Execution via MSSQL xp_cmdshell Stored Procedure>> | Identifies execution via MSSQL xp_cmdshell stored procedure. Malicious users may attempt to elevate their privileges by using xp_cmdshell, which is disabled by default, thus, it's important to review the context of it's use. | update | 109 

|<<prebuilt-rule-8-11-7-web-shell-detection-script-process-child-of-common-web-processes, Web Shell Detection: Script Process Child of Common Web Processes>> | Identifies suspicious commands executed via a web server, which may suggest a vulnerability and remote shell access. | update | 109 

|<<prebuilt-rule-8-11-7-expired-or-revoked-driver-loaded, Expired or Revoked Driver Loaded>> | Identifies an attempt to load a revoked or expired driver. Adversaries may bring outdated drivers with vulnerabilities to gain code execution in kernel mode or abuse revoked certificates to sign their drivers. | update | 4 

|<<prebuilt-rule-8-11-7-privilege-escalation-via-named-pipe-impersonation, Privilege Escalation via Named Pipe Impersonation>> | Identifies a privilege escalation attempt via named pipe impersonation. An adversary may abuse this technique by utilizing a framework such Metasploit's meterpreter getsystem command. | update | 108 

|<<prebuilt-rule-8-11-7-suspicious-printspooler-service-executable-file-creation, Suspicious PrintSpooler Service Executable File Creation>> | Detects attempts to exploit privilege escalation vulnerabilities related to the Print Spooler service. For more information refer to the following CVE's - CVE-2020-1048, CVE-2020-1337 and CVE-2020-1300 and verify that the impacted system is patched. | update | 106 

|<<prebuilt-rule-8-11-7-suspicious-print-spooler-spl-file-created, Suspicious Print Spooler SPL File Created>> | Detects attempts to exploit privilege escalation vulnerabilities related to the Print Spooler service including CVE-2020-1048 and CVE-2020-1337. | update | 109 

|<<prebuilt-rule-8-11-7-sedebugprivilege-enabled-by-a-suspicious-process, SeDebugPrivilege Enabled by a Suspicious Process>> | Identifies the creation of a process running as SYSTEM and impersonating a Windows core binary privileges. Adversaries may create a new process with a different token to escalate privileges and bypass access controls. | update | 6 

|<<prebuilt-rule-8-11-7-uac-bypass-via-diskcleanup-scheduled-task-hijack, UAC Bypass via DiskCleanup Scheduled Task Hijack>> | Identifies User Account Control (UAC) bypass via hijacking DiskCleanup Scheduled Task. Attackers bypass UAC to stealthily execute code with elevated permissions. | update | 107 

|<<prebuilt-rule-8-11-7-bypass-uac-via-event-viewer, Bypass UAC via Event Viewer>> | Identifies User Account Control (UAC) bypass via eventvwr.exe. Attackers bypass UAC to stealthily execute code with elevated permissions. | update | 110 

|<<prebuilt-rule-8-11-7-uac-bypass-attempt-via-windows-directory-masquerading, UAC Bypass Attempt via Windows Directory Masquerading>> | Identifies an attempt to bypass User Account Control (UAC) by masquerading as a Microsoft trusted Windows directory. Attackers may bypass UAC to stealthily execute code with elevated permissions. | update | 110 

|<<prebuilt-rule-8-11-7-unusual-parent-child-relationship, Unusual Parent-Child Relationship>> | Identifies Windows programs run from unexpected parent processes. This could indicate masquerading or other strange activity on a system. | update | 109 

|<<prebuilt-rule-8-11-7-unusual-print-spooler-child-process, Unusual Print Spooler Child Process>> | Detects unusual Print Spooler service (spoolsv.exe) child processes. This may indicate an attempt to exploit privilege escalation vulnerabilities related to the Printing Service on Windows. | update | 106 

|<<prebuilt-rule-8-11-7-unusual-service-host-child-process-childless-service, Unusual Service Host Child Process - Childless Service>> | Identifies unusual child processes of Service Host (svchost.exe) that traditionally do not spawn any child processes. This may indicate a code injection or an equivalent form of exploitation. | update | 108 

|<<prebuilt-rule-8-11-7-privileges-elevation-via-parent-process-pid-spoofing, Privileges Elevation via Parent Process PID Spoofing>> | Identifies parent process spoofing used to create an elevated child process. Adversaries may spoof the parent process identifier (PPID) of a new process to evade process-monitoring defenses or to elevate privileges. | update | 6 

|<<prebuilt-rule-8-11-7-windows-service-installed-via-an-unusual-client, Windows Service Installed via an Unusual Client>> | Identifies the creation of a Windows service by an unusual client process. Services may be created with administrator privileges but are executed under SYSTEM privileges, so an adversary may also use a service to escalate privileges from administrator to SYSTEM. | update | 107 

|==============================================
