[[prebuilt-rule-8-11-12-prebuilt-rules-8-11-12-summary]]
[role="xpack"]
== Update v8.11.12

This section lists all updates associated with version 8.11.12 of the Fleet integration *Prebuilt Security Detection Rules*.


[width="100%",options="header"]
|==============================================
|Rule |Description |Status |Version

|<<prebuilt-rule-8-11-12-potential-execution-via-xzbackdoor, Potential Execution via XZBackdoor>> | It identifies potential malicious shell executions through remote SSH and detects cases where the sshd service suddenly terminates soon after successful execution, suggesting suspicious behavior similar to the XZ backdoor. | new | 1 

|<<prebuilt-rule-8-11-12-suspicious-screenconnect-client-child-process, Suspicious ScreenConnect Client Child Process>> | Identifies suspicious processes being spawned by the ScreenConnect client processes. This activity may indicate execution abusing unauthorized access to the ScreenConnect remote access software. | new | 1 

|<<prebuilt-rule-8-11-12-potential-adidns-poisoning-via-wildcard-record-creation, Potential ADIDNS Poisoning via Wildcard Record Creation>> | Active Directory Integrated DNS (ADIDNS) is one of the core components of AD DS, leveraging AD's access control and replication to maintain domain consistency. It stores DNS zones as AD objects, a feature that, while robust, introduces some security issues, such as wildcard records, mainly because of the default permission (Any authenticated users) to create DNS-named records. Attackers can create wildcard records to redirect traffic that doesn't explicitly match records contained in the zone, becoming the Man-in-the-Middle and being able to abuse DNS similarly to LLMNR/NBNS spoofing. | new | 1 

|<<prebuilt-rule-8-11-12-creation-of-a-dns-named-record, Creation of a DNS-Named Record>> | Active Directory Integrated DNS (ADIDNS) is one of the core components of AD DS, leveraging AD's access control and replication to maintain domain consistency. It stores DNS zones as AD objects, a feature that, while robust, introduces some security issues because of the default permission (Any authenticated users) to create DNS-named records. Attackers can perform Dynamic Spoofing attacks, where they monitor LLMNR/NBT-NS requests and create DNS-named records to target systems that are requested from multiple systems. They can also create specific records to target specific services, such as wpad, for spoofing attacks. | new | 1 

|<<prebuilt-rule-8-11-12-potential-powershell-pass-the-hash-relay-script, Potential PowerShell Pass-the-Hash/Relay Script>> | Detects PowerShell scripts that can execute pass-the-hash (PtH) attacks, intercept and relay NTLM challenges, and carry out other man-in-the-middle (MitM) attacks. | new | 1 

|<<prebuilt-rule-8-11-12-suspicious-access-to-ldap-attributes, Suspicious Access to LDAP Attributes>> | Identify read access to a high number of Active Directory object attributes. The knowledge of objects properties can help adversaries find vulnerabilities, elevate privileges or collect sensitive information. | new | 1 

|<<prebuilt-rule-8-11-12-suspicious-jetbrains-teamcity-child-process, Suspicious JetBrains TeamCity Child Process>> | Identifies suspicious processes being spawned by the JetBrain TeamCity process. This activity could be related to JetBrains remote code execution vulnerabilities. | new | 1 

|<<prebuilt-rule-8-11-12-screenconnect-server-spawning-suspicious-processes, ScreenConnect Server Spawning Suspicious Processes>> | Identifies suspicious processes being spawned by the ScreenConnect server process (ScreenConnect.Service.exe). This activity may indicate exploitation activity or access to an existing web shell backdoor. | new | 1 

|<<prebuilt-rule-8-11-12-unusual-process-spawned-by-a-host, Unusual Process Spawned by a Host>> | A machine learning job has detected a suspicious Windows process. This process has been classified as suspicious in two ways. It was predicted to be suspicious by the ProblemChild supervised ML model, and it was found to be an unusual process, on a host that does not commonly manifest malicious activity. Such a process may be an instance of suspicious or malicious activity, possibly involving LOLbins, that may be resistant to detection using conventional search rules. | update | 4 

|<<prebuilt-rule-8-11-12-unusual-process-spawned-by-a-parent-process, Unusual Process Spawned by a Parent Process>> | A machine learning job has detected a suspicious Windows process. This process has been classified as malicious in two ways. It was predicted to be malicious by the ProblemChild supervised ML model, and it was found to be an unusual child process name, for the parent process, by an unsupervised ML model. Such a process may be an instance of suspicious or malicious activity, possibly involving LOLbins, that may be resistant to detection using conventional search rules. | update | 4 

|<<prebuilt-rule-8-11-12-unusual-process-spawned-by-a-user, Unusual Process Spawned by a User>> | A machine learning job has detected a suspicious Windows process. This process has been classified as malicious in two ways. It was predicted to be malicious by the ProblemChild supervised ML model, and it was found to be suspicious given that its user context is unusual and does not commonly manifest malicious activity,by an unsupervised ML model. Such a process may be an instance of suspicious or malicious activity, possibly involving LOLbins, that may be resistant to detection using conventional search rules. | update | 4 

|<<prebuilt-rule-8-11-12-machine-learning-detected-a-suspicious-windows-event-predicted-to-be-malicious-activity, Machine Learning Detected a Suspicious Windows Event Predicted to be Malicious Activity>> | A supervised machine learning model (ProblemChild) has identified a suspicious Windows process event with high probability of it being malicious activity. Alternatively, the model's blocklist identified the event as being malicious. | update | 4 

|<<prebuilt-rule-8-11-12-machine-learning-detected-a-suspicious-windows-event-with-a-high-malicious-probability-score, Machine Learning Detected a Suspicious Windows Event with a High Malicious Probability Score>> | A supervised machine learning model (ProblemChild) has identified a suspicious Windows process event with high probability of it being malicious activity. Alternatively, the model's blocklist identified the event as being malicious. | update | 4 

|<<prebuilt-rule-8-11-12-suspicious-windows-process-cluster-spawned-by-a-host, Suspicious Windows Process Cluster Spawned by a Host>> | A machine learning job combination has detected a set of one or more suspicious Windows processes with unusually high scores for malicious probability. These process(es) have been classified as malicious in several ways. The process(es) were predicted to be malicious by the ProblemChild supervised ML model. If the anomaly contains a cluster of suspicious processes, each process has the same host name, and the aggregate score of the event cluster was calculated to be unusually high by an unsupervised ML model. Such a cluster often contains suspicious or malicious activity, possibly involving LOLbins, that may be resistant to detection using conventional search rules. | update | 4 

|<<prebuilt-rule-8-11-12-suspicious-windows-process-cluster-spawned-by-a-parent-process, Suspicious Windows Process Cluster Spawned by a Parent Process>> | A machine learning job combination has detected a set of one or more suspicious Windows processes with unusually high scores for malicious probability. These process(es) have been classified as malicious in several ways. The process(es) were predicted to be malicious by the ProblemChild supervised ML model. If the anomaly contains a cluster of suspicious processes, each process has the same parent process name, and the aggregate score of the event cluster was calculated to be unusually high by an unsupervised ML model. Such a cluster often contains suspicious or malicious activity, possibly involving LOLbins, that may be resistant to detection using conventional search rules. | update | 4 

|<<prebuilt-rule-8-11-12-suspicious-windows-process-cluster-spawned-by-a-user, Suspicious Windows Process Cluster Spawned by a User>> | A machine learning job combination has detected a set of one or more suspicious Windows processes with unusually high scores for malicious probability. These process(es) have been classified as malicious in several ways. The process(es) were predicted to be malicious by the ProblemChild supervised ML model. If the anomaly contains a cluster of suspicious processes, each process has the same user name, and the aggregate score of the event cluster was calculated to be unusually high by an unsupervised ML model. Such a cluster often contains suspicious or malicious activity, possibly involving LOLbins, that may be resistant to detection using conventional search rules. | update | 4 

|<<prebuilt-rule-8-11-12-suspicious-inter-process-communication-via-outlook, Suspicious Inter-Process Communication via Outlook>> | Detects Inter-Process Communication with Outlook via Component Object Model from an unusual process. Adversaries may target user email to collect sensitive information or send email on their behalf via API. | update | 6 

|<<prebuilt-rule-8-11-12-exporting-exchange-mailbox-via-powershell, Exporting Exchange Mailbox via PowerShell>> | Identifies the use of the Exchange PowerShell cmdlet, New-MailBoxExportRequest, to export the contents of a primary mailbox or archive to a .pst file. Adversaries may target user email to collect sensitive information. | update | 111 

|<<prebuilt-rule-8-11-12-encrypting-files-with-winrar-or-7z, Encrypting Files with WinRar or 7z>> | Identifies use of WinRar or 7z to create an encrypted files. Adversaries will often compress and encrypt data in preparation for exfiltration. | update | 111 

|<<prebuilt-rule-8-11-12-potential-file-transfer-via-certreq, Potential File Transfer via Certreq>> | Identifies Certreq making an HTTP Post request. Adversaries could abuse Certreq to download files or upload data to a remote URL. | update | 8 

|<<prebuilt-rule-8-11-12-connection-to-commonly-abused-web-services, Connection to Commonly Abused Web Services>> | Adversaries may implement command and control (C2) communications that use common web services to hide their activity. This attack technique is typically targeted at an organization and uses web services common to the victim network, which allows the adversary to blend into legitimate traffic activity. These popular services are typically targeted since they have most likely been used before compromise, which helps malicious traffic blend in. | update | 111 

|<<prebuilt-rule-8-11-12-potential-dns-tunneling-via-nslookup, Potential DNS Tunneling via NsLookup>> | This rule identifies a large number (15) of nslookup.exe executions with an explicit query type from the same host. This may indicate command and control activity utilizing the DNS protocol. | update | 110 

|<<prebuilt-rule-8-11-12-connection-to-commonly-abused-free-ssl-certificate-providers, Connection to Commonly Abused Free SSL Certificate Providers>> | Identifies unusual processes connecting to domains using known free SSL certificates. Adversaries may employ a known encryption algorithm to conceal command and control traffic. | update | 107 

|<<prebuilt-rule-8-11-12-ingress-transfer-via-windows-bits, Ingress Transfer via Windows BITS>> | Identifies downloads of executable and archive files via the Windows Background Intelligent Transfer Service (BITS). Adversaries could leverage Windows BITS transfer jobs to download remote payloads. | update | 7 

|<<prebuilt-rule-8-11-12-first-time-seen-commonly-abused-remote-access-tool-execution, First Time Seen Commonly Abused Remote Access Tool Execution>> | Adversaries may install legitimate remote access tools (RAT) to compromised endpoints for further command-and-control (C2). Adversaries can rely on installed RATs for persistence, execution of native commands and more. This rule detects when a process is started whose name or code signature resembles commonly abused RATs. This is a New Terms rule type indicating the host has not seen this RAT process started before within the last 30 days. | update | 5 

|<<prebuilt-rule-8-11-12-port-forwarding-rule-addition, Port Forwarding Rule Addition>> | Identifies the creation of a new port forwarding rule. An adversary may abuse this technique to bypass network segmentation restrictions. | update | 110 

|<<prebuilt-rule-8-11-12-potential-remote-desktop-tunneling-detected, Potential Remote Desktop Tunneling Detected>> | Identifies potential use of an SSH utility to establish RDP over a reverse SSH Tunnel. This can be used by attackers to enable routing of network packets that would otherwise not reach their intended destination. | update | 110 

|<<prebuilt-rule-8-11-12-remote-file-download-via-desktopimgdownldr-utility, Remote File Download via Desktopimgdownldr Utility>> | Identifies the desktopimgdownldr utility being used to download a remote file. An adversary may use desktopimgdownldr to download arbitrary files as an alternative to certutil. | update | 112 

|<<prebuilt-rule-8-11-12-remote-file-download-via-mpcmdrun, Remote File Download via MpCmdRun>> | Identifies the Windows Defender configuration utility (MpCmdRun.exe) being used to download a remote file. | update | 112 

|<<prebuilt-rule-8-11-12-sunburst-command-and-control-activity, SUNBURST Command and Control Activity>> | The malware known as SUNBURST targets the SolarWind's Orion business software for command and control. This rule detects post-exploitation command and control activity of the SUNBURST backdoor. | update | 108 

|<<prebuilt-rule-8-11-12-remote-file-copy-via-teamviewer, Remote File Copy via TeamViewer>> | Identifies an executable or script file remotely downloaded via a TeamViewer transfer session. | update | 111 

|<<prebuilt-rule-8-11-12-potential-credential-access-via-windows-utilities, Potential Credential Access via Windows Utilities>> | Identifies the execution of known Windows utilities often abused to dump LSASS memory or the Active Directory database (NTDS.dit) in preparation for credential access. | update | 112 

|<<prebuilt-rule-8-11-12-ntds-or-sam-database-file-copied, NTDS or SAM Database File Copied>> | Identifies a copy operation of the Active Directory Domain Database (ntds.dit) or Security Account Manager (SAM) files. Those files contain sensitive information including hashed domain and/or local credentials. | update | 112 

|<<prebuilt-rule-8-11-12-creation-or-modification-of-domain-backup-dpapi-private-key, Creation or Modification of Domain Backup DPAPI private key>> | Identifies the creation or modification of Domain Backup private keys. Adversaries may extract the Data Protection API (DPAPI) domain backup key from a Domain Controller (DC) to be able to decrypt any domain user master key file. | update | 108 

|<<prebuilt-rule-8-11-12-credential-acquisition-via-registry-hive-dumping, Credential Acquisition via Registry Hive Dumping>> | Identifies attempts to export a registry hive which may contain credentials using the Windows reg.exe tool. | update | 110 

|<<prebuilt-rule-8-11-12-full-user-mode-dumps-enabled-system-wide, Full User-Mode Dumps Enabled System-Wide>> | Identifies the enable of the full user-mode dumps feature system-wide. This feature allows Windows Error Reporting (WER) to collect data after an application crashes. This setting is a requirement for the LSASS Shtinkering attack, which fakes the communication of a crash on LSASS, generating a dump of the process memory, which gives the attacker access to the credentials present on the system without having to bring malware to the system. This setting is not enabled by default, and applications must create their registry subkeys to hold settings that enable them to collect dumps. | update | 7 

|<<prebuilt-rule-8-11-12-microsoft-iis-service-account-password-dumped, Microsoft IIS Service Account Password Dumped>> | Identifies the Internet Information Services (IIS) command-line tool, AppCmd, being used to list passwords. An attacker with IIS web server access via a web shell can decrypt and dump the IIS AppPool service account password using AppCmd. | update | 110 

|<<prebuilt-rule-8-11-12-microsoft-iis-connection-strings-decryption, Microsoft IIS Connection Strings Decryption>> | Identifies use of aspnet_regiis to decrypt Microsoft IIS connection strings. An attacker with Microsoft IIS web server access via a webshell or alike can decrypt and dump any hardcoded connection strings, such as the MSSQL service account password using aspnet_regiis command. | update | 110 

|<<prebuilt-rule-8-11-12-kerberos-traffic-from-unusual-process, Kerberos Traffic from Unusual Process>> | Identifies network connections to the standard Kerberos port from an unusual process. On Windows, the only process that normally performs Kerberos traffic from a domain joined host is lsass.exe. | update | 110 

|<<prebuilt-rule-8-11-12-kirbi-file-creation, Kirbi File Creation>> | Identifies the creation of .kirbi files. The creation of this kind of file is an indicator of an attacker running Kerberos ticket dump utilities, such as Mimikatz, and precedes attacks such as Pass-The-Ticket (PTT), which allows the attacker to impersonate users using Kerberos tickets. | update | 5 

|<<prebuilt-rule-8-11-12-suspicious-module-loaded-by-lsass, Suspicious Module Loaded by LSASS>> | Identifies LSASS loading an unsigned or untrusted DLL. Windows Security Support Provider (SSP) DLLs are loaded into LSSAS process at system start. Once loaded into the LSA, SSP DLLs have access to encrypted and plaintext passwords that are stored in Windows, such as any logged-on user's Domain password or smart card PINs. | update | 8 

|<<prebuilt-rule-8-11-12-lsass-memory-dump-creation, LSASS Memory Dump Creation>> | Identifies the creation of a Local Security Authority Subsystem Service (lsass.exe) default memory dump. This may indicate a credential access attempt via trusted system utilities such as Task Manager (taskmgr.exe) and SQL Dumper (sqldumper.exe) or known pentesting tools such as Dumpert and AndrewSpecial. | update | 109 

|<<prebuilt-rule-8-11-12-lsass-process-access-via-windows-api, LSASS Process Access via Windows API>> | Identifies access attempts to the LSASS handle, which may indicate an attempt to dump credentials from LSASS memory. | update | 7 

|<<prebuilt-rule-8-11-12-mimikatz-memssp-log-file-detected, Mimikatz Memssp Log File Detected>> | Identifies the password log file from the default Mimikatz memssp module. | update | 109 

|<<prebuilt-rule-8-11-12-modification-of-wdigest-security-provider, Modification of WDigest Security Provider>> | Identifies attempts to modify the WDigest security provider in the registry to force the user's password to be stored in clear text in memory. This behavior can be indicative of an adversary attempting to weaken the security configuration of an endpoint. Once the UseLogonCredential value is modified, the adversary may attempt to dump clear text passwords from memory. | update | 109 

|<<prebuilt-rule-8-11-12-windows-registry-file-creation-in-smb-share, Windows Registry File Creation in SMB Share>> | Identifies the creation or modification of a medium-size registry hive file on a Server Message Block (SMB) share, which may indicate an exfiltration attempt of a previously dumped Security Account Manager (SAM) registry hive for credential extraction on an attacker-controlled system. | update | 108 

|<<prebuilt-rule-8-11-12-network-logon-provider-registry-modification, Network Logon Provider Registry Modification>> | Identifies the modification of the network logon provider registry. Adversaries may register a rogue network logon provider module for persistence and/or credential access via intercepting the authentication credentials in clear text during user logon. | update | 109 

|<<prebuilt-rule-8-11-12-potential-local-ntlm-relay-via-http, Potential Local NTLM Relay via HTTP>> | Identifies attempt to coerce a local NTLM authentication via HTTP using the Windows Printer Spooler service as a target. An adversary may use this primitive in combination with other techniques to elevate privileges on a compromised system. | update | 109 

|<<prebuilt-rule-8-11-12-potential-remote-credential-access-via-registry, Potential Remote Credential Access via Registry>> | Identifies remote access to the registry to potentially dump credential data from the Security Account Manager (SAM) registry hive in preparation for credential access and privileges elevation. | update | 111 

|<<prebuilt-rule-8-11-12-searching-for-saved-credentials-via-vaultcmd, Searching for Saved Credentials via VaultCmd>> | Windows Credential Manager allows you to create, view, or delete saved credentials for signing into websites, connected applications, and networks. An adversary may abuse this to list or dump credentials stored in the Credential Manager for saved usernames and passwords. This may also be performed in preparation of lateral movement. | update | 109 

|<<prebuilt-rule-8-11-12-symbolic-link-to-shadow-copy-created, Symbolic Link to Shadow Copy Created>> | Identifies the creation of symbolic links to a shadow copy. Symbolic links can be used to access files in the shadow copy, including sensitive files such as ntds.dit, System Boot Key and browser offline credentials. | update | 111 

|<<prebuilt-rule-8-11-12-veeam-backup-library-loaded-by-unusual-process, Veeam Backup Library Loaded by Unusual Process>> | Identifies potential credential decrypt operations by PowerShell or unsigned processes using the Veeam.Backup.Common.dll library. Attackers can use Veeam Credentials to target backups as part of destructive operations such as Ransomware attacks. | update | 2 

|<<prebuilt-rule-8-11-12-wireless-credential-dumping-using-netsh-command, Wireless Credential Dumping using Netsh Command>> | Identifies attempts to dump Wireless saved access keys in clear text using the Windows built-in utility Netsh. | update | 8 

|<<prebuilt-rule-8-11-12-adding-hidden-file-attribute-via-attrib, Adding Hidden File Attribute via Attrib>> | Adversaries can add the 'hidden' attribute to files to hide them from the user in an attempt to evade detection. | update | 111 

|<<prebuilt-rule-8-11-12-suspicious-antimalware-scan-interface-dll, Suspicious Antimalware Scan Interface DLL>> | Identifies the creation of the Antimalware Scan Interface (AMSI) DLL in an unusual location. This may indicate an attempt to bypass AMSI by loading a rogue AMSI module instead of the legit one. | update | 9 

|<<prebuilt-rule-8-11-12-modification-of-amsienable-registry-key, Modification of AmsiEnable Registry Key>> | Identifies modifications of the AmsiEnable registry key to 0, which disables the Antimalware Scan Interface (AMSI). An adversary can modify this key to disable AMSI protections. | update | 110 

|<<prebuilt-rule-8-11-12-clearing-windows-console-history, Clearing Windows Console History>> | Identifies when a user attempts to clear console history. An adversary may clear the command history of a compromised account to conceal the actions undertaken during an intrusion. | update | 111 

|<<prebuilt-rule-8-11-12-clearing-windows-event-logs, Clearing Windows Event Logs>> | Identifies attempts to clear or disable Windows event log stores using Windows wevetutil command. This is often done by attackers in an attempt to evade detection or destroy forensic evidence on a system. | update | 112 

|<<prebuilt-rule-8-11-12-code-signing-policy-modification-through-built-in-tools, Code Signing Policy Modification Through Built-in tools>> | Identifies attempts to disable/modify the code signing policy through system native utilities. Code signing provides authenticity on a program, and grants the user with the ability to check whether the program has been tampered with. By allowing the execution of unsigned or self-signed code, threat actors can craft and execute malicious code. | update | 7 

|<<prebuilt-rule-8-11-12-code-signing-policy-modification-through-registry, Code Signing Policy Modification Through Registry>> | Identifies attempts to disable the code signing policy through the registry. Code signing provides authenticity on a program, and grants the user with the ability to check whether the program has been tampered with. By allowing the execution of unsigned or self-signed code, threat actors can craft and execute malicious code. | update | 9 

|<<prebuilt-rule-8-11-12-creation-or-modification-of-root-certificate, Creation or Modification of Root Certificate>> | Identifies the creation or modification of a local trusted root certificate in Windows. The install of a malicious root certificate would allow an attacker the ability to masquerade malicious files as valid signed components from any entity (for example, Microsoft). It could also allow an attacker to decrypt SSL traffic. | update | 110 

|<<prebuilt-rule-8-11-12-windows-defender-disabled-via-registry-modification, Windows Defender Disabled via Registry Modification>> | Identifies modifications to the Windows Defender registry settings to disable the service or set the service to be started manually. | update | 111 

|<<prebuilt-rule-8-11-12-windows-defender-exclusions-added-via-powershell, Windows Defender Exclusions Added via PowerShell>> | Identifies modifications to the Windows Defender configuration settings using PowerShell to add exclusions at the folder directory or process level. | update | 110 

|<<prebuilt-rule-8-11-12-delete-volume-usn-journal-with-fsutil, Delete Volume USN Journal with Fsutil>> | Identifies use of the fsutil.exe to delete the volume USNJRNL. This technique is used by attackers to eliminate evidence of files created during post-exploitation activities. | update | 109 

|<<prebuilt-rule-8-11-12-powershell-script-block-logging-disabled, PowerShell Script Block Logging Disabled>> | Identifies attempts to disable PowerShell Script Block Logging via registry modification. Attackers may disable this logging to conceal their activities in the host and evade detection. | update | 109 

|<<prebuilt-rule-8-11-12-disable-windows-firewall-rules-via-netsh, Disable Windows Firewall Rules via Netsh>> | Identifies use of the netsh.exe to disable or weaken the local firewall. Attackers will use this command line tool to disable the firewall during troubleshooting or to enable network mobility. | update | 110 

|<<prebuilt-rule-8-11-12-disabling-windows-defender-security-settings-via-powershell, Disabling Windows Defender Security Settings via PowerShell>> | Identifies use of the Set-MpPreference PowerShell command to disable or weaken certain Windows Defender settings. | update | 110 

|<<prebuilt-rule-8-11-12-disable-windows-event-and-security-logs-using-built-in-tools, Disable Windows Event and Security Logs Using Built-in Tools>> | Identifies attempts to disable EventLog via the logman Windows utility, PowerShell, or auditpol. This is often done by attackers in an attempt to evade detection on a system. | update | 112 

|<<prebuilt-rule-8-11-12-dns-over-https-enabled-via-registry, DNS-over-HTTPS Enabled via Registry>> | Identifies when a user enables DNS-over-HTTPS. This can be used to hide internet activity or the process of exfiltrating data. With this enabled, an organization will lose visibility into data such as query type, response, and originating IP, which are used to determine bad actors. | update | 109 

|<<prebuilt-rule-8-11-12-suspicious-net-code-compilation, Suspicious .NET Code Compilation>> | Identifies executions of .NET compilers with suspicious parent processes, which can indicate an attacker's attempt to compile code after delivery in order to bypass security mechanisms. | update | 110 

|<<prebuilt-rule-8-11-12-remote-desktop-enabled-in-windows-firewall-by-netsh, Remote Desktop Enabled in Windows Firewall by Netsh>> | Identifies use of the network shell utility (netsh.exe) to enable inbound Remote Desktop Protocol (RDP) connections in the Windows Firewall. | update | 110 

|<<prebuilt-rule-8-11-12-enable-host-network-discovery-via-netsh, Enable Host Network Discovery via Netsh>> | Identifies use of the netsh.exe program to enable host discovery via the network. Attackers can use this command-line tool to weaken the host firewall settings. | update | 109 

|<<prebuilt-rule-8-11-12-control-panel-process-with-unusual-arguments, Control Panel Process with Unusual Arguments>> | Identifies unusual instances of Control Panel with suspicious keywords or paths in the process command line value. Adversaries may abuse control.exe to proxy execution of malicious code. | update | 111 

|<<prebuilt-rule-8-11-12-imageload-via-windows-update-auto-update-client, ImageLoad via Windows Update Auto Update Client>> | Identifies abuse of the Windows Update Auto Update Client (wuauclt.exe) to load an arbitrary DLL. This behavior is used as a defense evasion technique to blend-in malicious activity with legitimate Windows software. | update | 112 

|<<prebuilt-rule-8-11-12-microsoft-build-engine-started-by-an-office-application, Microsoft Build Engine Started by an Office Application>> | An instance of MSBuild, the Microsoft Build Engine, was started by Excel or Word. This is unusual behavior for the Build Engine and could have been caused by an Excel or Word document executing a malicious script payload. | update | 110 

|<<prebuilt-rule-8-11-12-microsoft-build-engine-started-by-a-script-process, Microsoft Build Engine Started by a Script Process>> | An instance of MSBuild, the Microsoft Build Engine, was started by a script or the Windows command interpreter. This behavior is unusual and is sometimes used by malicious payloads. | update | 209 

|<<prebuilt-rule-8-11-12-microsoft-build-engine-started-by-a-system-process, Microsoft Build Engine Started by a System Process>> | An instance of MSBuild, the Microsoft Build Engine, was started by Explorer or the WMI (Windows Management Instrumentation) subsystem. This behavior is unusual and is sometimes used by malicious payloads. | update | 110 

|<<prebuilt-rule-8-11-12-microsoft-build-engine-using-an-alternate-name, Microsoft Build Engine Using an Alternate Name>> | An instance of MSBuild, the Microsoft Build Engine, was started after being renamed. This is uncommon behavior and may indicate an attempt to run unnoticed or undetected. | update | 112 

|<<prebuilt-rule-8-11-12-microsoft-build-engine-started-an-unusual-process, Microsoft Build Engine Started an Unusual Process>> | An instance of MSBuild, the Microsoft Build Engine, started a PowerShell script or the Visual C# Command Line Compiler. This technique is sometimes used to deploy a malicious payload using the Build Engine. | update | 211 

|<<prebuilt-rule-8-11-12-potential-dll-side-loading-via-trusted-microsoft-programs, Potential DLL Side-Loading via Trusted Microsoft Programs>> | Identifies an instance of a Windows trusted program that is known to be vulnerable to DLL Search Order Hijacking starting after being renamed or from a non-standard path. This is uncommon behavior and may indicate an attempt to evade defenses via side loading a malicious DLL within the memory space of one of those processes. | update | 110 

|<<prebuilt-rule-8-11-12-potential-dll-side-loading-via-microsoft-antimalware-service-executable, Potential DLL Side-Loading via Microsoft Antimalware Service Executable>> | Identifies a Windows trusted program that is known to be vulnerable to DLL Search Order Hijacking starting after being renamed or from a non-standard path. This is uncommon behavior and may indicate an attempt to evade defenses via side-loading a malicious DLL within the memory space of one of those processes. | update | 110 

|<<prebuilt-rule-8-11-12-executable-file-creation-with-multiple-extensions, Executable File Creation with Multiple Extensions>> | Masquerading can allow an adversary to evade defenses and better blend in with the environment. One way it occurs is when the name or location of a file is manipulated as a means of tricking a user into executing what they think is a benign file type but is actually executable code. | update | 108 

|<<prebuilt-rule-8-11-12-process-execution-from-an-unusual-directory, Process Execution from an Unusual Directory>> | Identifies process execution from suspicious default Windows directories. This is sometimes done by adversaries to hide malware in trusted paths. | update | 110 

|<<prebuilt-rule-8-11-12-encoded-executable-stored-in-the-registry, Encoded Executable Stored in the Registry>> | Identifies registry write modifications to hide an encoded portable executable. This could be indicative of adversary defense evasion by avoiding the storing of malicious content directly on disk. | update | 107 

|<<prebuilt-rule-8-11-12-iis-http-logging-disabled, IIS HTTP Logging Disabled>> | Identifies when Internet Information Services (IIS) HTTP Logging is disabled on a server. An attacker with IIS server access via a webshell or other mechanism can disable HTTP Logging as an effective anti-forensics measure. | update | 110 

|<<prebuilt-rule-8-11-12-suspicious-endpoint-security-parent-process, Suspicious Endpoint Security Parent Process>> | A suspicious Endpoint Security parent process was detected. This may indicate a process hollowing or other form of code injection. | update | 111 

|<<prebuilt-rule-8-11-12-potential-masquerading-as-business-app-installer, Potential Masquerading as Business App Installer>> | Identifies executables with names resembling legitimate business applications but lacking signatures from the original developer. Attackers may trick users into downloading malicious executables that masquerade as legitimate applications via malicious ads, forum posts, and tutorials, effectively gaining initial access. | update | 4 

|<<prebuilt-rule-8-11-12-potential-masquerading-as-communication-apps, Potential Masquerading as Communication Apps>> | Identifies suspicious instances of communications apps, both unsigned and renamed ones, that can indicate an attempt to conceal malicious activity, bypass security features such as allowlists, or trick users into executing malware. | update | 5 

|<<prebuilt-rule-8-11-12-renamed-autoit-scripts-interpreter, Renamed AutoIt Scripts Interpreter>> | Identifies a suspicious AutoIt process execution. Malware written as an AutoIt script tends to rename the AutoIt executable to avoid detection. | update | 110 

|<<prebuilt-rule-8-11-12-suspicious-werfault-child-process, Suspicious WerFault Child Process>> | A suspicious WerFault child process was detected, which may indicate an attempt to run via the SilentProcessExit registry key manipulation. Verify process details such as command line, network connections and file writes. | update | 112 

|<<prebuilt-rule-8-11-12-program-files-directory-masquerading, Program Files Directory Masquerading>> | Identifies execution from a directory masquerading as the Windows Program Files directories. These paths are trusted and usually host trusted third party programs. An adversary may leverage masquerading, along with low privileges to bypass detections allowlisting those folders. | update | 109 

|<<prebuilt-rule-8-11-12-microsoft-windows-defender-tampering, Microsoft Windows Defender Tampering>> | Identifies when one or more features on Microsoft Defender are disabled. Adversaries may disable or tamper with Microsoft Defender features to evade detection and conceal malicious behavior. | update | 110 

|<<prebuilt-rule-8-11-12-parent-process-pid-spoofing, Parent Process PID Spoofing>> | Identifies parent process spoofing used to thwart detection. Adversaries may spoof the parent process identifier (PPID) of a new process to evade process-monitoring defenses or to elevate privileges. | update | 106 

|<<prebuilt-rule-8-11-12-local-account-tokenfilter-policy-disabled, Local Account TokenFilter Policy Disabled>> | Identifies registry modification to the LocalAccountTokenFilterPolicy policy. If this value exists (which doesn't by default) and is set to 1, then remote connections from all local members of Administrators are granted full high-integrity tokens during negotiation. | update | 8 

|<<prebuilt-rule-8-11-12-windows-firewall-disabled-via-powershell, Windows Firewall Disabled via PowerShell>> | Identifies when the Windows Firewall is disabled using PowerShell cmdlets, which can help attackers evade network constraints, like internet and network lateral communication restrictions. | update | 110 

|<<prebuilt-rule-8-11-12-suspicious-microsoft-diagnostics-wizard-execution, Suspicious Microsoft Diagnostics Wizard Execution>> | Identifies potential abuse of the Microsoft Diagnostics Troubleshooting Wizard (MSDT) to proxy malicious command or binary execution via malicious process arguments. | update | 109 

|<<prebuilt-rule-8-11-12-unusual-child-processes-of-rundll32, Unusual Child Processes of RunDLL32>> | Identifies child processes of unusual instances of RunDLL32 where the command line parameters were suspicious. Misuse of RunDLL32 could indicate malicious activity. | update | 108 

|<<prebuilt-rule-8-11-12-scheduled-tasks-at-command-enabled, Scheduled Tasks AT Command Enabled>> | Identifies attempts to enable the Windows scheduled tasks AT command via the registry. Attackers may use this method to move laterally or persist locally. The AT command has been deprecated since Windows 8 and Windows Server 2012, but still exists for backwards compatibility. | update | 109 

|<<prebuilt-rule-8-11-12-potential-secure-file-deletion-via-sdelete-utility, Potential Secure File Deletion via SDelete Utility>> | Detects file name patterns generated by the use of Sysinternals SDelete utility to securely delete a file via multiple file overwrite and rename operations. | update | 109 

|<<prebuilt-rule-8-11-12-sip-provider-modification, SIP Provider Modification>> | Identifies modifications to the registered Subject Interface Package (SIP) providers. SIP providers are used by the Windows cryptographic system to validate file signatures on the system. This may be an attempt to bypass signature validation checks or inject code into critical processes. | update | 107 

|<<prebuilt-rule-8-11-12-solarwinds-process-disabling-services-via-registry, SolarWinds Process Disabling Services via Registry>> | Identifies a SolarWinds binary modifying the start type of a service to be disabled. An adversary may abuse this technique to manipulate relevant security services. | update | 109 

|<<prebuilt-rule-8-11-12-suspicious-certutil-commands, Suspicious CertUtil Commands>> | Identifies suspicious commands being used with certutil.exe. CertUtil is a native Windows component which is part of Certificate Services. CertUtil is often abused by attackers to live off the land for stealthier command and control or data exfiltration. | update | 108 

|<<prebuilt-rule-8-11-12-suspicious-execution-from-a-mounted-device, Suspicious Execution from a Mounted Device>> | Identifies when a script interpreter or signed binary is launched via a non-standard working directory. An attacker may use this technique to evade defenses. | update | 108 

|<<prebuilt-rule-8-11-12-renamed-utility-executed-with-short-program-name, Renamed Utility Executed with Short Program Name>> | Identifies the execution of a process with a single character process name, differing from the original file name. This is often done by adversaries while staging, executing temporary utilities, or trying to bypass security detections based on the process name. | update | 109 

|<<prebuilt-rule-8-11-12-suspicious-zoom-child-process, Suspicious Zoom Child Process>> | A suspicious Zoom child process was detected, which may indicate an attempt to run unnoticed. Verify process details such as command line, network connections, file writes and associated file signature details as well. | update | 110 

|<<prebuilt-rule-8-11-12-unusual-executable-file-creation-by-a-system-critical-process, Unusual Executable File Creation by a System Critical Process>> | Identifies an unexpected executable file being created or modified by a Windows system critical process, which may indicate activity related to remote code execution or other forms of exploitation. | update | 111 

|<<prebuilt-rule-8-11-12-unsigned-dll-side-loading-from-a-suspicious-folder, Unsigned DLL Side-Loading from a Suspicious Folder>> | Identifies a Windows trusted program running from locations often abused by adversaries to masquerade as a trusted program and loading a recently dropped DLL. This behavior may indicate an attempt to evade defenses via side-loading a malicious DLL within the memory space of a signed processes. | update | 8 

|<<prebuilt-rule-8-11-12-untrusted-driver-loaded, Untrusted Driver Loaded>> | Identifies attempt to load an untrusted driver. Adversaries may modify code signing policies to enable execution of unsigned or self-signed code. | update | 7 

|<<prebuilt-rule-8-11-12-unusual-file-creation-alternate-data-stream, Unusual File Creation - Alternate Data Stream>> | Identifies suspicious creation of Alternate Data Streams on highly targeted files. This is uncommon for legitimate files and sometimes done by adversaries to hide malware. | update | 114 

|<<prebuilt-rule-8-11-12-unusual-process-execution-path-alternate-data-stream, Unusual Process Execution Path - Alternate Data Stream>> | Identifies processes running from an Alternate Data Stream. This is uncommon for legitimate processes and sometimes done by adversaries to hide malware. | update | 109 

|<<prebuilt-rule-8-11-12-unusual-child-process-from-a-system-virtual-process, Unusual Child Process from a System Virtual Process>> | Identifies a suspicious child process of the Windows virtual system process, which could indicate code injection. | update | 110 

|<<prebuilt-rule-8-11-12-potential-evasion-via-filter-manager, Potential Evasion via Filter Manager>> | The Filter Manager Control Program (fltMC.exe) binary may be abused by adversaries to unload a filter driver and evade defenses. | update | 110 

|<<prebuilt-rule-8-11-12-potential-evasion-via-windows-filtering-platform, Potential Evasion via Windows Filtering Platform>> | Identifies multiple Windows Filtering Platform block events and where the process name is related to an endpoint security software. Adversaries may add malicious WFP rules to prevent Endpoint security from sending telemetry. | update | 3 

|<<prebuilt-rule-8-11-12-suspicious-execution-via-windows-subsystem-for-linux, Suspicious Execution via Windows Subsystem for Linux>> | Detects Linux Bash commands from the the Windows Subsystem for Linux. Adversaries may enable and use WSL for Linux to avoid detection. | update | 6 

|<<prebuilt-rule-8-11-12-execution-via-windows-subsystem-for-linux, Execution via Windows Subsystem for Linux>> | Detects attempts to execute a program on the host from the Windows Subsystem for Linux. Adversaries may enable and use WSL for Linux to avoid detection. | update | 6 

|<<prebuilt-rule-8-11-12-windows-subsystem-for-linux-enabled-via-dism-utility, Windows Subsystem for Linux Enabled via Dism Utility>> | Detects attempts to enable the Windows Subsystem for Linux using Microsoft Dism utility. Adversaries may enable and use WSL for Linux to avoid detection. | update | 7 

|<<prebuilt-rule-8-11-12-attempt-to-install-kali-linux-via-wsl, Attempt to Install Kali Linux via WSL>> | Detects attempts to install or use Kali Linux via Windows Subsystem for Linux. Adversaries may enable and use WSL for Linux to avoid detection. | update | 7 

|<<prebuilt-rule-8-11-12-windows-subsystem-for-linux-distribution-installed, Windows Subsystem for Linux Distribution Installed>> | Detects changes to the registry that indicates the install of a new Windows Subsystem for Linux distribution by name. Adversaries may enable and use WSL for Linux to avoid detection. | update | 7 

|<<prebuilt-rule-8-11-12-adfind-command-activity, AdFind Command Activity>> | This rule detects the Active Directory query tool, AdFind.exe. AdFind has legitimate purposes, but it is frequently leveraged by threat actors to perform post-exploitation Active Directory reconnaissance. The AdFind tool has been observed in Trickbot, Ryuk, Maze, and FIN6 campaigns. For Winlogbeat, this rule requires Sysmon. | update | 111 

|<<prebuilt-rule-8-11-12-enumeration-of-administrator-accounts, Enumeration of Administrator Accounts>> | Identifies instances of lower privilege accounts enumerating Administrator accounts or groups using built-in Windows tools. | update | 112 

|<<prebuilt-rule-8-11-12-account-discovery-command-via-system-account, Account Discovery Command via SYSTEM Account>> | Identifies when the SYSTEM account uses an account discovery utility. This could be a sign of discovery activity after an adversary has achieved privilege escalation. | update | 111 

|<<prebuilt-rule-8-11-12-enumerating-domain-trusts-via-dsquery-exe, Enumerating Domain Trusts via DSQUERY.EXE>> | Identifies the use of dsquery.exe for domain trust discovery purposes. Adversaries may use this command-line utility to enumerate trust relationships that may be used for Lateral Movement opportunities in Windows multi-domain forest environments. | update | 7 

|<<prebuilt-rule-8-11-12-enumerating-domain-trusts-via-nltest-exe, Enumerating Domain Trusts via NLTEST.EXE>> | Identifies the use of nltest.exe for domain trust discovery purposes. Adversaries may use this command-line utility to enumerate domain trusts and gain insight into trust relationships, as well as the state of Domain Controller (DC) replication in a Microsoft Windows NT Domain. | update | 110 

|<<prebuilt-rule-8-11-12-group-policy-discovery-via-microsoft-gpresult-utility, Group Policy Discovery via Microsoft GPResult Utility>> | Detects the usage of gpresult.exe to query group policy objects. Attackers may query group policy objects during the reconnaissance phase after compromising a system to gain a better understanding of the active directory environment and possible methods to escalate privileges or move laterally. | update | 8 

|<<prebuilt-rule-8-11-12-peripheral-device-discovery, Peripheral Device Discovery>> | Identifies use of the Windows file system utility (fsutil.exe) to gather information about attached peripheral devices and components connected to a computer system. | update | 109 

|<<prebuilt-rule-8-11-12-whoami-process-activity, Whoami Process Activity>> | Identifies suspicious use of whoami.exe which displays user, group, and privileges information for the user who is currently logged on to the local system. | update | 111 

|<<prebuilt-rule-8-11-12-command-execution-via-solarwinds-process, Command Execution via SolarWinds Process>> | A suspicious SolarWinds child process (Cmd.exe or Powershell.exe) was detected. | update | 111 

|<<prebuilt-rule-8-11-12-suspicious-solarwinds-child-process, Suspicious SolarWinds Child Process>> | A suspicious SolarWinds child process was detected, which may indicate an attempt to execute malicious programs. | update | 110 

|<<prebuilt-rule-8-11-12-execution-of-com-object-via-xwizard, Execution of COM object via Xwizard>> | Windows Component Object Model (COM) is an inter-process communication (IPC) component of the native Windows application programming interface (API) that enables interaction between software objects or executable code. Xwizard can be used to run a COM object created in registry to evade defensive counter measures. | update | 109 

|<<prebuilt-rule-8-11-12-svchost-spawning-cmd, Svchost spawning Cmd>> | Identifies a suspicious parent child process relationship with cmd.exe descending from svchost.exe | update | 211 

|<<prebuilt-rule-8-11-12-unusual-parent-process-for-cmd-exe, Unusual Parent Process for cmd.exe>> | Identifies a suspicious parent child process relationship with cmd.exe descending from an unusual process. | update | 110 

|<<prebuilt-rule-8-11-12-command-shell-activity-started-via-rundll32, Command Shell Activity Started via RunDLL32>> | Identifies command shell activity started via RunDLL32, which is commonly abused by attackers to host malicious code. | update | 110 

|<<prebuilt-rule-8-11-12-enumeration-command-spawned-via-wmiprvse, Enumeration Command Spawned via WMIPrvSE>> | Identifies native Windows host and network enumeration commands spawned by the Windows Management Instrumentation Provider Service (WMIPrvSE). | update | 111 

|<<prebuilt-rule-8-11-12-execution-from-unusual-directory-command-line, Execution from Unusual Directory - Command Line>> | Identifies process execution from suspicious default Windows directories. This may be abused by adversaries to hide malware in trusted paths. | update | 112 

|<<prebuilt-rule-8-11-12-potential-powershell-hacktool-script-by-function-names, Potential PowerShell HackTool Script by Function Names>> | Detects known PowerShell offensive tooling functions names in PowerShell scripts. Attackers commonly use out-of-the-box offensive tools without modifying the code. This rule aim is to take advantage of that. | update | 11 

|<<prebuilt-rule-8-11-12-outbound-scheduled-task-activity-via-powershell, Outbound Scheduled Task Activity via PowerShell>> | Identifies the PowerShell process loading the Task Scheduler COM DLL followed by an outbound RPC network connection within a short time period. This may indicate lateral movement or remote discovery via scheduled tasks. | update | 107 

|<<prebuilt-rule-8-11-12-execution-via-local-sxs-shared-module, Execution via local SxS Shared Module>> | Identifies the creation, change, or deletion of a DLL module within a Windows SxS local folder. Adversaries may abuse shared modules to execute malicious payloads by instructing the Windows module loader to load DLLs from arbitrary local paths. | update | 108 

|<<prebuilt-rule-8-11-12-suspicious-cmd-execution-via-wmi, Suspicious Cmd Execution via WMI>> | Identifies suspicious command execution (cmd) via Windows Management Instrumentation (WMI) on a remote host. This could be indicative of adversary lateral movement. | update | 111 

|<<prebuilt-rule-8-11-12-suspicious-wmi-image-load-from-ms-office, Suspicious WMI Image Load from MS Office>> | Identifies a suspicious image load (wmiutils.dll) from Microsoft Office processes. This behavior may indicate adversarial activity where child processes are spawned via Windows Management Instrumentation (WMI). This technique can be used to execute code and evade traditional parent/child processes spawned from Microsoft Office products. | update | 108 

|<<prebuilt-rule-8-11-12-suspicious-pdf-reader-child-process, Suspicious PDF Reader Child Process>> | Identifies suspicious child processes of PDF reader applications. These child processes are often launched via exploitation of PDF applications or social engineering. | update | 110 

|<<prebuilt-rule-8-11-12-suspicious-powershell-engine-imageload, Suspicious PowerShell Engine ImageLoad>> | Identifies the PowerShell engine being invoked by unexpected processes. Rather than executing PowerShell functionality with powershell.exe, some attackers do this to operate more stealthily. | update | 210 

|<<prebuilt-rule-8-11-12-suspicious-process-execution-via-renamed-psexec-executable, Suspicious Process Execution via Renamed PsExec Executable>> | Identifies suspicious psexec activity which is executing from the psexec service that has been renamed, possibly to evade detection. | update | 111 

|<<prebuilt-rule-8-11-12-process-activity-via-compiled-html-file, Process Activity via Compiled HTML File>> | Compiled HTML files (.chm) are commonly distributed as part of the Microsoft HTML Help system. Adversaries may conceal malicious code in a CHM file and deliver it to a victim for execution. CHM content is loaded by the HTML Help executable program (hh.exe). | update | 110 

|<<prebuilt-rule-8-11-12-conhost-spawned-by-suspicious-parent-process, Conhost Spawned By Suspicious Parent Process>> | Detects when the Console Window Host (conhost.exe) process is spawned by a suspicious parent process, which could be indicative of code injection. | update | 110 

|<<prebuilt-rule-8-11-12-rare-smb-connection-to-the-internet, Rare SMB Connection to the Internet>> | This rule detects rare internet network connections via the SMB protocol. SMB is commonly used to leak NTLM credentials via rogue UNC path injection. | update | 3 

|<<prebuilt-rule-8-11-12-third-party-backup-files-deleted-via-unexpected-process, Third-party Backup Files Deleted via Unexpected Process>> | Identifies the deletion of backup files, saved using third-party software, by a process outside of the backup suite. Adversaries may delete Backup files to ensure that recovery from a ransomware attack is less likely. | update | 112 

|<<prebuilt-rule-8-11-12-deleting-backup-catalogs-with-wbadmin, Deleting Backup Catalogs with Wbadmin>> | Identifies use of the wbadmin.exe to delete the backup catalog. Ransomware and other malware may do this to prevent system recovery. | update | 111 

|<<prebuilt-rule-8-11-12-modification-of-boot-configuration, Modification of Boot Configuration>> | Identifies use of bcdedit.exe to delete boot configuration data. This tactic is sometimes used as by malware or an attacker as a destructive technique. | update | 109 

|<<prebuilt-rule-8-11-12-high-number-of-process-and-or-service-terminations, High Number of Process and/or Service Terminations>> | This rule identifies a high number (10) of process terminations (stop, delete, or suspend) from the same host within a short time period. | update | 109 

|<<prebuilt-rule-8-11-12-volume-shadow-copy-deleted-or-resized-via-vssadmin, Volume Shadow Copy Deleted or Resized via VssAdmin>> | Identifies use of vssadmin.exe for shadow copy deletion or resizing on endpoints. This commonly occurs in tandem with ransomware or other destructive attacks. | update | 111 

|<<prebuilt-rule-8-11-12-volume-shadow-copy-deletion-via-powershell, Volume Shadow Copy Deletion via PowerShell>> | Identifies the use of the Win32_ShadowCopy class and related cmdlets to achieve shadow copy deletion. This commonly occurs in tandem with ransomware or other destructive attacks. | update | 111 

|<<prebuilt-rule-8-11-12-volume-shadow-copy-deletion-via-wmic, Volume Shadow Copy Deletion via WMIC>> | Identifies use of wmic.exe for shadow copy deletion on endpoints. This commonly occurs in tandem with ransomware or other destructive attacks. | update | 110 

|<<prebuilt-rule-8-11-12-suspicious-execution-from-inet-cache, Suspicious Execution from INET Cache>> | Identifies the execution of a process with arguments pointing to the INetCache Folder. Adversaries may deliver malicious content via WININET during initial access. | update | 2 

|<<prebuilt-rule-8-11-12-suspicious-execution-via-microsoft-office-add-ins, Suspicious Execution via Microsoft Office Add-Ins>> | Identifies execution of common Microsoft Office applications to launch an Office Add-In from a suspicious path or with an unusual parent process. This may indicate an attempt to get initial access via a malicious phishing MS Office Add-In. | update | 5 

|<<prebuilt-rule-8-11-12-first-time-seen-removable-device, First Time Seen Removable Device>> | Identifies newly seen removable devices by device friendly name using registry modification events. While this activity is not inherently malicious, analysts can use those events to aid monitoring for data exfiltration over those devices. | update | 4 

|<<prebuilt-rule-8-11-12-windows-script-executing-powershell, Windows Script Executing PowerShell>> | Identifies a PowerShell process launched by either cscript.exe or wscript.exe. Observing Windows scripting processes executing a PowerShell script, may be indicative of malicious activity. | update | 111 

|<<prebuilt-rule-8-11-12-microsoft-exchange-server-um-writing-suspicious-files, Microsoft Exchange Server UM Writing Suspicious Files>> | Identifies suspicious files being written by the Microsoft Exchange Server Unified Messaging (UM) service. This activity has been observed exploiting CVE-2021-26858. | update | 108 

|<<prebuilt-rule-8-11-12-microsoft-exchange-server-um-spawning-suspicious-processes, Microsoft Exchange Server UM Spawning Suspicious Processes>> | Identifies suspicious processes being spawned by the Microsoft Exchange Server Unified Messaging (UM) service. This activity has been observed exploiting CVE-2021-26857. | update | 109 

|<<prebuilt-rule-8-11-12-microsoft-exchange-worker-spawning-suspicious-processes, Microsoft Exchange Worker Spawning Suspicious Processes>> | Identifies suspicious processes being spawned by the Microsoft Exchange Server worker process (w3wp). This activity may indicate exploitation activity or access to an existing web shell backdoor. | update | 109 

|<<prebuilt-rule-8-11-12-suspicious-ms-office-child-process, Suspicious MS Office Child Process>> | Identifies suspicious child processes of frequently targeted Microsoft Office applications (Word, PowerPoint, Excel). These child processes are often launched during exploitation of Office applications or from documents with malicious macros. | update | 112 

|<<prebuilt-rule-8-11-12-suspicious-ms-outlook-child-process, Suspicious MS Outlook Child Process>> | Identifies suspicious child processes of Microsoft Outlook. These child processes are often associated with spear phishing activity. | update | 111 

|<<prebuilt-rule-8-11-12-suspicious-explorer-child-process, Suspicious Explorer Child Process>> | Identifies a suspicious Windows explorer child process. Explorer.exe can be abused to launch malicious scripts or executables from a trusted parent process. | update | 109 

|<<prebuilt-rule-8-11-12-nullsessionpipe-registry-modification, NullSessionPipe Registry Modification>> | Identifies NullSessionPipe registry modifications that specify which pipes can be accessed anonymously. This could be indicative of adversary lateral movement preparation by making the added pipe available to everyone. | update | 108 

|<<prebuilt-rule-8-11-12-execution-via-tsclient-mountpoint, Execution via TSClient Mountpoint>> | Identifies execution from the Remote Desktop Protocol (RDP) shared mountpoint tsclient on the target host. This may indicate a lateral movement attempt. | update | 109 

|<<prebuilt-rule-8-11-12-mounting-hidden-or-webdav-remote-shares, Mounting Hidden or WebDav Remote Shares>> | Identifies the use of net.exe to mount a WebDav or hidden remote share. This may indicate lateral movement or preparation for data exfiltration. | update | 109 

|<<prebuilt-rule-8-11-12-rdp-enabled-via-registry, RDP Enabled via Registry>> | Identifies registry write modifications to enable Remote Desktop Protocol (RDP) access. This could be indicative of adversary lateral movement preparation. | update | 111 

|<<prebuilt-rule-8-11-12-remote-file-copy-to-a-hidden-share, Remote File Copy to a Hidden Share>> | Identifies a remote file copy attempt to a hidden network share. This may indicate lateral movement or data staging activity. | update | 109 

|<<prebuilt-rule-8-11-12-remotely-started-services-via-rpc, Remotely Started Services via RPC>> | Identifies remote execution of Windows services over remote procedure call (RPC). This could be indicative of lateral movement, but will be noisy if commonly done by administrators. | update | 111 

|<<prebuilt-rule-8-11-12-suspicious-rdp-activex-client-loaded, Suspicious RDP ActiveX Client Loaded>> | Identifies suspicious Image Loading of the Remote Desktop Services ActiveX Client (mstscax), this may indicate the presence of RDP lateral movement capability. | update | 109 

|<<prebuilt-rule-8-11-12-unusual-child-process-of-dns-exe, Unusual Child Process of dns.exe>> | Identifies an unexpected process spawning from dns.exe, the process responsible for Windows DNS server services, which may indicate activity related to remote code execution or other forms of exploitation. | update | 110 

|<<prebuilt-rule-8-11-12-unusual-file-modification-by-dns-exe, Unusual File Modification by dns.exe>> | Identifies an unexpected file being modified by dns.exe, the process responsible for Windows DNS Server services, which may indicate activity related to remote code execution or other forms of exploitation. | update | 110 

|<<prebuilt-rule-8-11-12-lateral-movement-via-startup-folder, Lateral Movement via Startup Folder>> | Identifies suspicious file creations in the startup folder of a remote system. An adversary could abuse this to move laterally by dropping a malicious script or executable that will be executed after a reboot or user logon. | update | 108 

|<<prebuilt-rule-8-11-12-adobe-hijack-persistence, Adobe Hijack Persistence>> | Detects writing executable files that will be automatically launched by Adobe on launch. | update | 111 

|<<prebuilt-rule-8-11-12-installation-of-custom-shim-databases, Installation of Custom Shim Databases>> | Identifies the installation of custom Application Compatibility Shim databases. This Windows functionality has been abused by attackers to stealthily gain persistence and arbitrary code execution in legitimate Windows processes. | update | 108 

|<<prebuilt-rule-8-11-12-registry-persistence-via-appcert-dll, Registry Persistence via AppCert DLL>> | Detects attempts to maintain persistence by creating registry keys using AppCert DLLs. AppCert DLLs are loaded by every process using the common API functions to create processes. | update | 108 

|<<prebuilt-rule-8-11-12-registry-persistence-via-appinit-dll, Registry Persistence via AppInit DLL>> | AppInit DLLs are dynamic-link libraries (DLLs) that are loaded into every process that creates a user interface (loads user32.dll) on Microsoft Windows operating systems. The AppInit DLL mechanism is used to load custom code into user-mode processes, allowing for the customization of the user interface and the behavior of Windows-based applications. Attackers who add those DLLs to the registry locations can execute code with elevated privileges, similar to process injection, and provide a solid and constant persistence on the machine. | update | 110 

|<<prebuilt-rule-8-11-12-creation-of-a-hidden-local-user-account, Creation of a Hidden Local User Account>> | Identifies the creation of a hidden local user account by appending the dollar sign to the account name. This is sometimes done by attackers to increase access to a system and avoid appearing in the results of accounts listing using the net users command. | update | 110 

|<<prebuilt-rule-8-11-12-image-file-execution-options-injection, Image File Execution Options Injection>> | The Debugger and SilentProcessExit registry keys can allow an adversary to intercept the execution of files, causing a different process to be executed. This functionality can be abused by an adversary to establish persistence. | update | 107 

|<<prebuilt-rule-8-11-12-suspicious-startup-shell-folder-modification, Suspicious Startup Shell Folder Modification>> | Identifies suspicious startup shell folder modifications to change the default Startup directory in order to bypass detections monitoring file creation in the Windows Startup folder. | update | 110 

|<<prebuilt-rule-8-11-12-persistence-via-scheduled-job-creation, Persistence via Scheduled Job Creation>> | A job can be used to schedule programs or scripts to be executed at a specified date and time. Adversaries may abuse task scheduling functionality to facilitate initial or recurring execution of malicious code. | update | 108 

|<<prebuilt-rule-8-11-12-local-scheduled-task-creation, Local Scheduled Task Creation>> | Indicates the creation of a scheduled task. Adversaries can use these to establish persistence, move laterally, and/or escalate privileges. | update | 107 

|<<prebuilt-rule-8-11-12-persistence-via-microsoft-office-addins, Persistence via Microsoft Office AddIns>> | Detects attempts to establish persistence on an endpoint by abusing Microsoft Office add-ins. | update | 108 

|<<prebuilt-rule-8-11-12-persistence-via-microsoft-outlook-vba, Persistence via Microsoft Outlook VBA>> | Detects attempts to establish persistence on an endpoint by installing a rogue Microsoft Outlook VBA Template. | update | 107 

|<<prebuilt-rule-8-11-12-new-activesyncalloweddeviceid-added-via-powershell, New ActiveSyncAllowedDeviceID Added via PowerShell>> | Identifies the use of the Exchange PowerShell cmdlet, Set-CASMailbox, to add a new ActiveSync allowed device. Adversaries may target user email to collect sensitive information. | update | 109 

|<<prebuilt-rule-8-11-12-persistence-via-powershell-profile, Persistence via PowerShell profile>> | Identifies the creation or modification of a PowerShell profile. PowerShell profile is a script that is executed when PowerShell starts to customize the user environment, which can be abused by attackers to persist in a environment where PowerShell is common. | update | 9 

|<<prebuilt-rule-8-11-12-potential-modification-of-accessibility-binaries, Potential Modification of Accessibility Binaries>> | Windows contains accessibility features that may be launched with a key combination before a user has logged in. An adversary can modify the way these programs are launched to get a command prompt or backdoor without logging in to the system. | update | 111 

|<<prebuilt-rule-8-11-12-uncommon-registry-persistence-change, Uncommon Registry Persistence Change>> | Detects changes to registry persistence keys that are not commonly used or modified by legitimate programs. This could be an indication of an adversary's attempt to persist in a stealthy manner. | update | 107 

|<<prebuilt-rule-8-11-12-startup-or-run-key-registry-modification, Startup or Run Key Registry Modification>> | Identifies run key or startup key registry modifications. In order to survive reboots and other system interrupts, attackers will modify run keys within the registry or leverage startup folder items as a form of persistence. | update | 111 

|<<prebuilt-rule-8-11-12-execution-of-persistent-suspicious-program, Execution of Persistent Suspicious Program>> | Identifies execution of suspicious persistent programs (scripts, rundll32, etc.) by looking at process lineage and command line usage. | update | 107 

|<<prebuilt-rule-8-11-12-unsigned-dll-loaded-by-svchost, Unsigned DLL Loaded by Svchost>> | Identifies an unsigned library created in the last 5 minutes and subsequently loaded by a shared windows service (svchost). Adversaries may use this technique to maintain persistence or run with System privileges. | update | 6 

|<<prebuilt-rule-8-11-12-unusual-persistence-via-services-registry, Unusual Persistence via Services Registry>> | Identifies processes modifying the services registry key directly, instead of through the expected Windows APIs. This could be an indication of an adversary attempting to stealthily persist through abnormal service creation or modification of an existing service. | update | 108 

|<<prebuilt-rule-8-11-12-startup-persistence-by-a-suspicious-process, Startup Persistence by a Suspicious Process>> | Identifies files written to or modified in the startup folder by commonly abused processes. Adversaries may use this technique to maintain persistence. | update | 110 

|<<prebuilt-rule-8-11-12-persistent-scripts-in-the-startup-directory, Persistent Scripts in the Startup Directory>> | Identifies script engines creating files in the Startup folder, or the creation of script files in the Startup folder. Adversaries may abuse this technique to maintain persistence in an environment. | update | 111 

|<<prebuilt-rule-8-11-12-component-object-model-hijacking, Component Object Model Hijacking>> | Identifies Component Object Model (COM) hijacking via registry modification. Adversaries may establish persistence by executing malicious content triggered by hijacked references to COM objects. | update | 112 

|<<prebuilt-rule-8-11-12-suspicious-image-load-taskschd-dll-from-ms-office, Suspicious Image Load (taskschd.dll) from MS Office>> | Identifies a suspicious image load (taskschd.dll) from Microsoft Office processes. This behavior may indicate adversarial activity where a scheduled task is configured via Windows Component Object Model (COM). This technique can be used to configure persistence and evade monitoring by avoiding the usage of the traditional Windows binary (schtasks.exe) used to manage scheduled tasks. | update | 109 

|<<prebuilt-rule-8-11-12-suspicious-execution-via-scheduled-task, Suspicious Execution via Scheduled Task>> | Identifies execution of a suspicious program via scheduled tasks by looking at process lineage and command line usage. | update | 108 

|<<prebuilt-rule-8-11-12-suspicious-imagepath-service-creation, Suspicious ImagePath Service Creation>> | Identifies the creation of a suspicious ImagePath value. This could be an indication of an adversary attempting to stealthily persist or escalate privileges through abnormal service creation. | update | 107 

|<<prebuilt-rule-8-11-12-system-shells-via-services, System Shells via Services>> | Windows services typically run as SYSTEM and can be used as a privilege escalation opportunity. Malware or penetration testers may run a shell as a service to gain SYSTEM permissions. | update | 110 

|<<prebuilt-rule-8-11-12-potential-persistence-via-time-provider-modification, Potential Persistence via Time Provider Modification>> | Identifies modification of the Time Provider. Adversaries may establish persistence by registering and enabling a malicious DLL as a time provider. Windows uses the time provider architecture to obtain accurate time stamps from other network devices or clients in the network. Time providers are implemented in the form of a DLL file which resides in the System32 folder. The service W32Time initiates during the startup of Windows and loads w32time.dll. | update | 109 

|<<prebuilt-rule-8-11-12-user-account-creation, User Account Creation>> | Identifies attempts to create new users. This is sometimes done by attackers to increase access or establish persistence on a system or domain. | update | 109 

|<<prebuilt-rule-8-11-12-potential-application-shimming-via-sdbinst, Potential Application Shimming via Sdbinst>> | The Application Shim was created to allow for backward compatibility of software as the operating system codebase changes over time. This Windows functionality has been abused by attackers to stealthily gain persistence and arbitrary code execution in legitimate Windows processes. | update | 110 

|<<prebuilt-rule-8-11-12-persistence-via-bits-job-notify-cmdline, Persistence via BITS Job Notify Cmdline>> | An adversary can use the Background Intelligent Transfer Service (BITS) SetNotifyCmdLine method to execute a program that runs after a job finishes transferring data or after a job enters a specified state in order to persist on a system. | update | 107 

|<<prebuilt-rule-8-11-12-persistence-via-hidden-run-key-detected, Persistence via Hidden Run Key Detected>> | Identifies a persistence mechanism that utilizes the NtSetValueKey native API to create a hidden (null terminated) registry key. An adversary may use this method to hide from system utilities such as the Registry Editor (regedit). | update | 108 

|<<prebuilt-rule-8-11-12-installation-of-security-support-provider, Installation of Security Support Provider>> | Identifies registry modifications related to the Windows Security Support Provider (SSP) configuration. Adversaries may abuse this to establish persistence in an environment. | update | 108 

|<<prebuilt-rule-8-11-12-persistence-via-telemetrycontroller-scheduled-task-hijack, Persistence via TelemetryController Scheduled Task Hijack>> | Detects the successful hijack of Microsoft Compatibility Appraiser scheduled task to establish persistence with an integrity level of system. | update | 110 

|<<prebuilt-rule-8-11-12-persistence-via-update-orchestrator-service-hijack, Persistence via Update Orchestrator Service Hijack>> | Identifies potential hijacking of the Microsoft Update Orchestrator Service to establish persistence with an integrity level of SYSTEM. | update | 111 

|<<prebuilt-rule-8-11-12-persistence-via-wmi-event-subscription, Persistence via WMI Event Subscription>> | An adversary can use Windows Management Instrumentation (WMI) to install event filters, providers, consumers, and bindings that execute code when a defined event occurs. Adversaries may use the capabilities of WMI to subscribe to an event and execute arbitrary code when that event occurs, providing persistence on a system. | update | 111 

|<<prebuilt-rule-8-11-12-persistence-via-wmi-standard-registry-provider, Persistence via WMI Standard Registry Provider>> | Identifies use of the Windows Management Instrumentation StdRegProv (registry provider) to modify commonly abused registry locations for persistence. | update | 108 

|<<prebuilt-rule-8-11-12-execution-via-mssql-xp-cmdshell-stored-procedure, Execution via MSSQL xp_cmdshell Stored Procedure>> | Identifies execution via MSSQL xp_cmdshell stored procedure. Malicious users may attempt to elevate their privileges by using xp_cmdshell, which is disabled by default, thus, it's important to review the context of it's use. | update | 111 

|<<prebuilt-rule-8-11-12-web-shell-detection-script-process-child-of-common-web-processes, Web Shell Detection: Script Process Child of Common Web Processes>> | Identifies suspicious commands executed via a web server, which may suggest a vulnerability and remote shell access. | update | 111 

|<<prebuilt-rule-8-11-12-process-created-with-a-duplicated-token, Process Created with a Duplicated Token>> | Identifies the creation of a process impersonating the token of another user logon session. Adversaries may create a new process with a different token to escalate privileges and bypass access controls. | update | 3 

|<<prebuilt-rule-8-11-12-disabling-user-account-control-via-registry-modification, Disabling User Account Control via Registry Modification>> | User Account Control (UAC) can help mitigate the impact of malware on Windows hosts. With UAC, apps and tasks always run in the security context of a non-administrator account, unless an administrator specifically authorizes administrator-level access to the system. This rule identifies registry value changes to bypass User Access Control (UAC) protection. | update | 110 

|<<prebuilt-rule-8-11-12-first-time-seen-driver-loaded, First Time Seen Driver Loaded>> | Identifies the load of a driver with an original file name and signature values that were observed for the first time during the last 30 days. This rule type can help baseline drivers installation within your environment. | update | 7 

|<<prebuilt-rule-8-11-12-expired-or-revoked-driver-loaded, Expired or Revoked Driver Loaded>> | Identifies an attempt to load a revoked or expired driver. Adversaries may bring outdated drivers with vulnerabilities to gain code execution in kernel mode or abuse revoked certificates to sign their drivers. | update | 5 

|<<prebuilt-rule-8-11-12-creation-or-modification-of-a-new-gpo-scheduled-task-or-service, Creation or Modification of a new GPO Scheduled Task or Service>> | Detects the creation or modification of a new Group Policy based scheduled task or service. These methods are used for legitimate system administration, but can also be abused by an attacker with domain admin permissions to execute a malicious payload remotely on all or a subset of the domain joined machines. | update | 109 

|<<prebuilt-rule-8-11-12-potential-privilege-escalation-via-installerfiletakeover, Potential Privilege Escalation via InstallerFileTakeOver>> | Identifies a potential exploitation of InstallerTakeOver (CVE-2021-41379) default PoC execution. Successful exploitation allows an unprivileged user to escalate privileges to SYSTEM. | update | 111 

|<<prebuilt-rule-8-11-12-potential-lsa-authentication-package-abuse, Potential LSA Authentication Package Abuse>> | Adversaries can use the autostart mechanism provided by the Local Security Authority (LSA) authentication packages for privilege escalation or persistence by placing a reference to a binary in the Windows registry. The binary will then be executed by SYSTEM when the authentication packages are loaded. | update | 105 

|<<prebuilt-rule-8-11-12-privilege-escalation-via-named-pipe-impersonation, Privilege Escalation via Named Pipe Impersonation>> | Identifies a privilege escalation attempt via named pipe impersonation. An adversary may abuse this technique by utilizing a framework such Metasploit's meterpreter getsystem command. | update | 110 

|<<prebuilt-rule-8-11-12-suspicious-dll-loaded-for-persistence-or-privilege-escalation, Suspicious DLL Loaded for Persistence or Privilege Escalation>> | Identifies the loading of a non Microsoft signed DLL that is missing on a default Windows install (phantom DLL) or one that can be loaded from a different location by a native Windows process. This may be abused to persist or elevate privileges via privileged file write vulnerabilities. | update | 111 

|<<prebuilt-rule-8-11-12-potential-port-monitor-or-print-processor-registration-abuse, Potential Port Monitor or Print Processor Registration Abuse>> | Identifies port monitor and print processor registry modifications. Adversaries may abuse port monitor and print processors to run malicious DLLs during system boot that will be executed as SYSTEM for privilege escalation and/or persistence, if permissions allow writing a fully-qualified pathname for that DLL. | update | 106 

|<<prebuilt-rule-8-11-12-suspicious-print-spooler-point-and-print-dll, Suspicious Print Spooler Point and Print DLL>> | Detects attempts to exploit a privilege escalation vulnerability (CVE-2020-1030) related to the print spooler service. Exploitation involves chaining multiple primitives to load an arbitrary DLL into the print spooler process running as SYSTEM. | update | 106 

|<<prebuilt-rule-8-11-12-suspicious-printspooler-service-executable-file-creation, Suspicious PrintSpooler Service Executable File Creation>> | Detects attempts to exploit privilege escalation vulnerabilities related to the Print Spooler service. For more information refer to the following CVE's - CVE-2020-1048, CVE-2020-1337 and CVE-2020-1300 and verify that the impacted system is patched. | update | 108 

|<<prebuilt-rule-8-11-12-suspicious-print-spooler-file-deletion, Suspicious Print Spooler File Deletion>> | Detects deletion of print driver files by an unusual process. This may indicate a clean up attempt post successful privilege escalation via Print Spooler service related vulnerabilities. | update | 107 

|<<prebuilt-rule-8-11-12-suspicious-print-spooler-spl-file-created, Suspicious Print Spooler SPL File Created>> | Detects attempts to exploit privilege escalation vulnerabilities related to the Print Spooler service including CVE-2020-1048 and CVE-2020-1337. | update | 111 

|<<prebuilt-rule-8-11-12-privilege-escalation-via-windir-environment-variable, Privilege Escalation via Windir Environment Variable>> | Identifies a privilege escalation attempt via a rogue Windows directory (Windir) environment variable. This is a known primitive that is often combined with other vulnerabilities to elevate privileges. | update | 106 

|<<prebuilt-rule-8-11-12-service-control-spawned-via-script-interpreter, Service Control Spawned via Script Interpreter>> | Identifies Service Control (sc.exe) spawning from script interpreter processes to create, modify, or start services. This can potentially indicate an attempt to elevate privileges or maintain persistence. | update | 108 

|<<prebuilt-rule-8-11-12-uac-bypass-attempt-with-ieditionupgrademanager-elevated-com-interface, UAC Bypass Attempt with IEditionUpgradeManager Elevated COM Interface>> | Identifies attempts to bypass User Account Control (UAC) by abusing an elevated COM Interface to launch a rogue Windows ClipUp program. Attackers may attempt to bypass UAC to stealthily execute code with elevated permissions. | update | 109 

|<<prebuilt-rule-8-11-12-uac-bypass-attempt-via-elevated-com-internet-explorer-add-on-installer, UAC Bypass Attempt via Elevated COM Internet Explorer Add-On Installer>> | Identifies User Account Control (UAC) bypass attempts by abusing an elevated COM Interface to launch a malicious program. Attackers may attempt to bypass UAC to stealthily execute code with elevated permissions. | update | 109 

|<<prebuilt-rule-8-11-12-uac-bypass-via-icmluautil-elevated-com-interface, UAC Bypass via ICMLuaUtil Elevated COM Interface>> | Identifies User Account Control (UAC) bypass attempts via the ICMLuaUtil Elevated COM interface. Attackers may attempt to bypass UAC to stealthily execute code with elevated permissions. | update | 109 

|<<prebuilt-rule-8-11-12-uac-bypass-via-diskcleanup-scheduled-task-hijack, UAC Bypass via DiskCleanup Scheduled Task Hijack>> | Identifies User Account Control (UAC) bypass via hijacking DiskCleanup Scheduled Task. Attackers bypass UAC to stealthily execute code with elevated permissions. | update | 109 

|<<prebuilt-rule-8-11-12-uac-bypass-attempt-via-privileged-ifileoperation-com-interface, UAC Bypass Attempt via Privileged IFileOperation COM Interface>> | Identifies attempts to bypass User Account Control (UAC) via DLL side-loading. Attackers may attempt to bypass UAC to stealthily execute code with elevated permissions. | update | 109 

|<<prebuilt-rule-8-11-12-bypass-uac-via-event-viewer, Bypass UAC via Event Viewer>> | Identifies User Account Control (UAC) bypass via eventvwr.exe. Attackers bypass UAC to stealthily execute code with elevated permissions. | update | 112 

|<<prebuilt-rule-8-11-12-uac-bypass-attempt-via-windows-directory-masquerading, UAC Bypass Attempt via Windows Directory Masquerading>> | Identifies an attempt to bypass User Account Control (UAC) by masquerading as a Microsoft trusted Windows directory. Attackers may bypass UAC to stealthily execute code with elevated permissions. | update | 112 

|<<prebuilt-rule-8-11-12-uac-bypass-via-windows-firewall-snap-in-hijack, UAC Bypass via Windows Firewall Snap-In Hijack>> | Identifies attempts to bypass User Account Control (UAC) by hijacking the Microsoft Management Console (MMC) Windows Firewall snap-in. Attackers bypass UAC to stealthily execute code with elevated permissions. | update | 111 

|<<prebuilt-rule-8-11-12-unusual-parent-child-relationship, Unusual Parent-Child Relationship>> | Identifies Windows programs run from unexpected parent processes. This could indicate masquerading or other strange activity on a system. | update | 111 

|<<prebuilt-rule-8-11-12-unusual-print-spooler-child-process, Unusual Print Spooler Child Process>> | Detects unusual Print Spooler service (spoolsv.exe) child processes. This may indicate an attempt to exploit privilege escalation vulnerabilities related to the Printing Service on Windows. | update | 108 

|<<prebuilt-rule-8-11-12-unusual-service-host-child-process-childless-service, Unusual Service Host Child Process - Childless Service>> | Identifies unusual child processes of Service Host (svchost.exe) that traditionally do not spawn any child processes. This may indicate a code injection or an equivalent form of exploitation. | update | 110 

|<<prebuilt-rule-8-11-12-privileges-elevation-via-parent-process-pid-spoofing, Privileges Elevation via Parent Process PID Spoofing>> | Identifies parent process spoofing used to create an elevated child process. Adversaries may spoof the parent process identifier (PPID) of a new process to evade process-monitoring defenses or to elevate privileges. | update | 7 

|<<prebuilt-rule-8-11-12-process-created-with-an-elevated-token, Process Created with an Elevated Token>> | Identifies the creation of a process running as SYSTEM and impersonating a Windows core binary privileges. Adversaries may create a new process with a different token to escalate privileges and bypass access controls. | update | 6 

|==============================================
