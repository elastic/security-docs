[[prebuilt-rule-8-14-22-prebuilt-rules-8-14-22-summary]]
[role="xpack"]
== Update v8.14.22

This section lists all updates associated with version 8.14.22 of the Fleet integration *Prebuilt Security Detection Rules*.


[width="100%",options="header"]
|==============================================
|Rule |Description |Status |Version

|<<prebuilt-rule-8-14-22-endpoint-security-elastic-defend, Endpoint Security (Elastic Defend)>> | Generates a detection alert each time an Elastic Defend alert is received. Enabling this rule allows you to immediately begin investigating your Endpoint alerts. | update | 106 

|<<prebuilt-rule-8-14-22-network-activity-detected-via-cat, Network Activity Detected via cat>> | This rule monitors for the execution of the cat command, followed by a connection attempt by the same process. Cat is capable of transfering data via tcp/udp channels by redirecting its read output to a /dev/tcp or /dev/udp channel. This activity is highly suspicious, and should be investigated. Attackers may leverage this capability to transfer tools or files to another host in the network or exfiltrate data while attempting to evade detection in the process. | update | 8 

|<<prebuilt-rule-8-14-22-network-connection-by-cups-or-foomatic-rip-child, Network Connection by Cups or Foomatic-rip Child>> | This detection rule addresses multiple vulnerabilities in the CUPS printing system, including CVE-2024-47176, CVE-2024-47076, CVE-2024-47175, and CVE-2024-47177. Specifically, this rule detects network connections initiated by a child processes of foomatic-rip. These flaws impact components like cups-browsed, libcupsfilters, libppd, and foomatic-rip, allowing remote unauthenticated attackers to manipulate IPP URLs or inject malicious data through crafted UDP packets or network spoofing. This can result in arbitrary command execution when a print job is initiated. | update | 3 

|<<prebuilt-rule-8-14-22-curl-socks-proxy-activity-from-unusual-parent, Curl SOCKS Proxy Activity from Unusual Parent>> | This rule detects the use of the `curl` command-line tool with SOCKS proxy options, launched from an unusual parent process. Attackers may use `curl` to establish a SOCKS proxy connection to bypass network restrictions and exfiltrate data or communicate with C2 servers. | update | 3 

|<<prebuilt-rule-8-14-22-ipv4-ipv6-forwarding-activity, IPv4/IPv6 Forwarding Activity>> | This rule monitors for the execution of commands that enable IPv4 and IPv6 forwarding on Linux systems. Enabling IP forwarding can be used to route network traffic between different network interfaces, potentially allowing attackers to pivot between networks, exfiltrate data, or establish command and control channels. | update | 103 

|<<prebuilt-rule-8-14-22-potential-protocol-tunneling-via-chisel-client, Potential Protocol Tunneling via Chisel Client>> | This rule monitors for common command line flags leveraged by the Chisel client utility followed by a connection attempt. Chisel is a command-line utility used for creating and managing TCP and UDP tunnels, enabling port forwarding and secure communication between machines. Attackers can abuse the Chisel utility to establish covert communication channels, bypass network restrictions, and carry out malicious activities by creating tunnels that allow unauthorized access to internal systems. | update | 8 

|<<prebuilt-rule-8-14-22-potential-protocol-tunneling-via-chisel-server, Potential Protocol Tunneling via Chisel Server>> | This rule monitors for common command line flags leveraged by the Chisel server utility followed by a received connection within a timespan of 1 minute. Chisel is a command-line utility used for creating and managing TCP and UDP tunnels, enabling port forwarding and secure communication between machines. Attackers can abuse the Chisel utility to establish covert communication channels, bypass network restrictions, and carry out malicious activities by creating tunnels that allow unauthorized access to internal systems. | update | 8 

|<<prebuilt-rule-8-14-22-proxychains-activity, ProxyChains Activity>> | This rule monitors for the execution of the ProxyChains utility. ProxyChains is a command-line tool that enables the routing of network connections through intermediary proxies, enhancing anonymity and enabling access to restricted resources. Attackers can exploit the ProxyChains utility to hide their true source IP address, evade detection, and perform malicious activities through a chain of proxy servers, potentially masking their identity and intentions. | update | 106 

|<<prebuilt-rule-8-14-22-linux-ssh-x11-forwarding, Linux SSH X11 Forwarding>> | This rule monitors for X11 forwarding via SSH. X11 forwarding is a feature that allows users to run graphical applications on a remote server and display the application's graphical user interface on their local machine. Attackers can abuse X11 forwarding for tunneling their GUI-based tools, pivot through compromised systems, and create covert communication channels, enabling lateral movement and facilitating remote control of systems within a network. | update | 106 

|<<prebuilt-rule-8-14-22-suspicious-utility-launched-via-proxychains, Suspicious Utility Launched via ProxyChains>> | This rule monitors for the execution of suspicious linux tools through ProxyChains. ProxyChains is a command-line tool that enables the routing of network connections through intermediary proxies, enhancing anonymity and enabling access to restricted resources. Attackers can exploit the ProxyChains utility to hide their true source IP address, evade detection, and perform malicious activities through a chain of proxy servers, potentially masking their identity and intentions. | update | 109 

|<<prebuilt-rule-8-14-22-potential-linux-tunneling-and-or-port-forwarding, Potential Linux Tunneling and/or Port Forwarding>> | This rule monitors for a set of Linux utilities that can be used for tunneling and port forwarding. Attackers can leverage tunneling and port forwarding techniques to bypass network defenses, establish hidden communication channels, and gain unauthorized access to internal resources, facilitating data exfiltration, lateral movement, and remote control. | update | 109 

|<<prebuilt-rule-8-14-22-potential-protocol-tunneling-via-earthworm, Potential Protocol Tunneling via EarthWorm>> | Identifies the execution of the EarthWorm tunneler. Adversaries may tunnel network communications to and from a victim system within a separate protocol to avoid detection and network filtering, or to enable access to otherwise unreachable systems. | update | 212 

|<<prebuilt-rule-8-14-22-potential-linux-credential-dumping-via-unshadow, Potential Linux Credential Dumping via Unshadow>> | Identifies the execution of the unshadow utility which is part of John the Ripper, a password-cracking tool on the host machine. Malicious actors can use the utility to retrieve the combined contents of the '/etc/shadow' and '/etc/password' files. Using the combined file generated from the utility, the malicious threat actors can use them as input for password-cracking utilities or prepare themselves for future operations by gathering credential information of the victim. | update | 110 

|<<prebuilt-rule-8-14-22-linux-init-pid-1-secret-dump-via-gdb, Linux init (PID 1) Secret Dump via GDB>> | This rule monitors for the potential memory dump of the init process (PID 1) through gdb. Attackers may leverage memory dumping techniques to attempt secret extraction from privileged processes. Tools that display this behavior include "truffleproc" and "bash-memory-dump". This behavior should not happen by default, and should be investigated thoroughly. | update | 108 

|<<prebuilt-rule-8-14-22-linux-process-hooking-via-gdb, Linux Process Hooking via GDB>> | This rule monitors for potential memory dumping through gdb. Attackers may leverage memory dumping techniques to attempt secret extraction from privileged processes. Tools that display this behavior include "truffleproc" and "bash-memory-dump". This behavior should not happen by default, and should be investigated thoroughly. | update | 105 

|<<prebuilt-rule-8-14-22-potential-linux-local-account-brute-force-detected, Potential Linux Local Account Brute Force Detected>> | Identifies multiple consecutive login attempts executed by one process targeting a local linux user account within a short time interval. Adversaries might brute force login attempts across different users with a default wordlist or a set of customly crafted passwords in an attempt to gain access to these accounts. | update | 9 

|<<prebuilt-rule-8-14-22-potential-linux-credential-dumping-via-proc-filesystem, Potential Linux Credential Dumping via Proc Filesystem>> | Identifies the execution of the mimipenguin exploit script which is linux adaptation of Windows tool mimikatz. Mimipenguin exploit script is used to dump clear text passwords from a currently logged-in user. The tool exploits a known vulnerability CVE-2018-20781. Malicious actors can exploit the cleartext credentials in memory by dumping the process and extracting lines that have a high probability of containing cleartext passwords. | update | 109 

|<<prebuilt-rule-8-14-22-unusual-instance-metadata-service-imds-api-request, Unusual Instance Metadata Service (IMDS) API Request>> | This rule identifies potentially malicious processes attempting to access the cloud service provider's instance metadata service (IMDS) API endpoint, which can be used to retrieve sensitive instance-specific information such as instance ID, public IP address, and even temporary security credentials if role's are assumed by that instance. The rule monitors for various tools and scripts like curl, wget, python, and perl that might be used to interact with the metadata API. | update | 4 

|<<prebuilt-rule-8-14-22-access-control-list-modification-via-setfacl, Access Control List Modification via setfacl>> | This rule detects Linux Access Control List (ACL) modification via the setfacl command. | update | 104 

|<<prebuilt-rule-8-14-22-attempt-to-disable-iptables-or-firewall, Attempt to Disable IPTables or Firewall>> | Adversaries may attempt to disable the iptables or firewall service in an attempt to affect how a host is allowed to receive or send network traffic. | update | 111 

|<<prebuilt-rule-8-14-22-attempt-to-disable-syslog-service, Attempt to Disable Syslog Service>> | Adversaries may attempt to disable the syslog service in an attempt to an attempt to disrupt event logging and evade detection by security controls. | update | 212 

|<<prebuilt-rule-8-14-22-base16-or-base32-encoding-decoding-activity, Base16 or Base32 Encoding/Decoding Activity>> | Adversaries may encode/decode data in an attempt to evade detection by host- or network-based security controls. | update | 212 

|<<prebuilt-rule-8-14-22-file-made-immutable-by-chattr, File made Immutable by Chattr>> | Detects a file being made immutable using the chattr binary. Making a file immutable means it cannot be deleted or renamed, no link can be created to this file, most of the file's metadata can not be modified, and the file can not be opened in write mode. Threat actors will commonly utilize this to prevent tampering or modification of their malicious files or any system files they have modified for purposes of persistence (e.g .ssh, /etc/passwd, etc.). | update | 214 

|<<prebuilt-rule-8-14-22-attempt-to-clear-kernel-ring-buffer, Attempt to Clear Kernel Ring Buffer>> | Monitors for the deletion of the kernel ring buffer events through dmesg. Attackers may clear kernel ring buffer events to evade detection after installing a Linux kernel module (LKM). | update | 107 

|<<prebuilt-rule-8-14-22-hidden-files-and-directories-via-hidden-flag, Hidden Files and Directories via Hidden Flag>> | Identify activity related where adversaries can add the 'hidden' flag to files to hide them from the user in an attempt to evade detection. | update | 105 

|<<prebuilt-rule-8-14-22-directory-creation-in-bin-directory, Directory Creation in /bin directory>> | This rule identifies the creation of directories in the /bin directory. The /bin directory contains essential binary files that are required for the system to function properly. The creation of directories in this location could be an attempt to hide malicious files or executables, as these /bin directories usually just contain binaries. | update | 103 

|<<prebuilt-rule-8-14-22-potential-disabling-of-apparmor, Potential Disabling of AppArmor>> | This rule monitors for potential attempts to disable AppArmor. AppArmor is a Linux security module that enforces fine-grained access control policies to restrict the actions and resources that specific applications and processes can access. Adversaries may disable security tools to avoid possible detection of their tools and activities. | update | 109 

|<<prebuilt-rule-8-14-22-potential-disabling-of-selinux, Potential Disabling of SELinux>> | Identifies potential attempts to disable Security-Enhanced Linux (SELinux), which is a Linux kernel security feature to support access control policies. Adversaries may disable security tools to avoid possible detection of their tools and activities. | update | 212 

|<<prebuilt-rule-8-14-22-dynamic-linker-creation-or-modification, Dynamic Linker Creation or Modification>> | Detects the creation or modification of files related to the dynamic linker on Linux systems. The dynamic linker is a shared library that is used by the Linux kernel to load and execute programs. Attackers may attempt to hijack the execution flow of a program by modifying the dynamic linker configuration files. | update | 4 

|<<prebuilt-rule-8-14-22-esxi-timestomping-using-touch-command, ESXI Timestomping using Touch Command>> | Identifies instances where the 'touch' command is executed on a Linux system with the "-r" flag, which is used to modify the timestamp of a file based on another file's timestamp. The rule targets specific VM-related paths, such as "/etc/vmware/", "/usr/lib/vmware/", or "/vmfs/*". These paths are associated with VMware virtualization software, and their presence in the touch command arguments may indicate that a threat actor is attempting to tamper with timestamps of VM-related files and configurations on the system. | update | 110 

|<<prebuilt-rule-8-14-22-file-deletion-via-shred, File Deletion via Shred>> | Malware or other files dropped or created on a system by an adversary may leave traces behind as to what was done within a network and how. Adversaries may remove these files over the course of an intrusion to keep their footprint low or remove them at the end as part of the post-intrusion cleanup process. | update | 211 

|<<prebuilt-rule-8-14-22-hidden-directory-creation-via-unusual-parent, Hidden Directory Creation via Unusual Parent>> | This rule detects the creation of a hidden directory via an unusual parent executable. Hidden directories are directories that are not visible to the user by default. They are often used by attackers to hide malicious files or tools. | update | 103 

|<<prebuilt-rule-8-14-22-creation-of-hidden-files-and-directories-via-commandline, Creation of Hidden Files and Directories via CommandLine>> | Users can mark specific files as hidden simply by putting a "." as the first character in the file or folder name. Adversaries can use this to their advantage to hide files and folders on the system for persistence and defense evasion. This rule looks for hidden files or folders in common writable directories. | update | 113 

|<<prebuilt-rule-8-14-22-creation-of-hidden-shared-object-file, Creation of Hidden Shared Object File>> | Identifies the creation of a hidden shared object (.so) file. Users can mark specific files as hidden simply by putting a "." as the first character in the file or folder name. Adversaries can use this to their advantage to hide files and folders on the system for persistence and defense evasion. | update | 212 

|<<prebuilt-rule-8-14-22-kernel-module-removal, Kernel Module Removal>> | Kernel modules are pieces of code that can be loaded and unloaded into the kernel upon demand. They extend the functionality of the kernel without the need to reboot the system. This rule identifies attempts to remove a kernel module. | update | 212 

|<<prebuilt-rule-8-14-22-executable-masquerading-as-kernel-process, Executable Masquerading as Kernel Process>> | Monitors for kernel processes with associated process executable fields that are not empty. Unix kernel processes such as kthreadd and kworker typically do not have process.executable fields associated to them. Attackers may attempt to hide their malicious programs by masquerading as legitimate kernel processes. | update | 105 

|<<prebuilt-rule-8-14-22-system-log-file-deletion, System Log File Deletion>> | Identifies the deletion of sensitive Linux system logs. This may indicate an attempt to evade detection or destroy forensic evidence on a system. | update | 214 

|<<prebuilt-rule-8-14-22-potential-hidden-process-via-mount-hidepid, Potential Hidden Process via Mount Hidepid>> | Identifies the execution of mount process with hidepid parameter, which can make processes invisible to other users from the system. Adversaries using Linux kernel version 3.2+ (or RHEL/CentOS v6.5+ above) can hide the process from other users. When hidepid=2 option is executed to mount the /proc filesystem, only the root user can see all processes and the logged-in user can only see their own process. This provides a defense evasion mechanism for the adversaries to hide their process executions from all other commands such as ps, top, pgrep and more. With the Linux kernel hardening hidepid option all the user has to do is remount the /proc filesystem with the option, which can now be monitored and detected. | update | 111 

|<<prebuilt-rule-8-14-22-potential-defense-evasion-via-proot, Potential Defense Evasion via PRoot>> | Identifies the execution of the PRoot utility, an open-source tool for user-space implementation of chroot, mount --bind, and binfmt_misc. Adversaries can leverage an open-source tool PRoot to expand the scope of their operations to multiple Linux distributions and simplify their necessary efforts. In a normal threat scenario, the scope of an attack is limited by the varying configurations of each Linux distribution. With PRoot, it provides an attacker with a consistent operational environment across different Linux distributions, such as Ubuntu, Fedora, and Alpine. PRoot also provides emulation capabilities that allow for malware built on other architectures, such as ARM, to be run.The post-exploitation technique called bring your own filesystem (BYOF), can be used by the threat actors to execute malicious payload or elevate privileges or perform network scans or orchestrate another attack on the environment. Although PRoot was originally not developed with malicious intent it can be easily tuned to work for one. | update | 109 

|<<prebuilt-rule-8-14-22-suspicious-renaming-of-esxi-files, Suspicious Renaming of ESXI Files>> | Identifies instances where VMware-related files, such as those with extensions like ".vmdk", ".vmx", ".vmxf", ".vmsd", ".vmsn", ".vswp", ".vmss", ".nvram", and ".vmem", are renamed on a Linux system. The rule monitors for the "rename" event action associated with these file types, which could indicate malicious activity. | update | 8 

|<<prebuilt-rule-8-14-22-suspicious-renaming-of-esxi-index-html-file, Suspicious Renaming of ESXI index.html File>> | Identifies instances where the "index.html" file within the "/usr/lib/vmware/*" directory is renamed on a Linux system. The rule monitors for the "rename" event action associated with this specific file and path, which could indicate malicious activity. | update | 8 

|<<prebuilt-rule-8-14-22-potentially-suspicious-process-started-via-tmux-or-screen, Potentially Suspicious Process Started via tmux or screen>> | This rule monitors for the execution of suspicious commands via screen and tmux. When launching a command and detaching directly, the commands will be executed in the background via its parent process. Attackers may leverage screen or tmux to execute commands while attempting to evade detection. | update | 107 

|<<prebuilt-rule-8-14-22-suspicious-dynamic-linker-discovery-via-od, Suspicious Dynamic Linker Discovery via od>> | Monitors for dynamic linker discovery via the od utility. od (octal dump) is a command-line utility in Unix operating systems used for displaying data in various formats, including octal, hexadecimal, decimal, and ASCII, primarily used for examining and debugging binary files or data streams. Attackers can leverage od to analyze the dynamic linker by identifying injection points and craft exploits based on the observed behaviors and structures within these files. | update | 104 

|<<prebuilt-rule-8-14-22-esxi-discovery-via-find, ESXI Discovery via Find>> | Identifies instances where the 'find' command is started on a Linux system with arguments targeting specific VM-related paths, such as "/etc/vmware/", "/usr/lib/vmware/", or "/vmfs/*". These paths are associated with VMware virtualization software, and their presence in the find command arguments may indicate that a threat actor is attempting to search for, analyze, or manipulate VM-related files and configurations on the system. | update | 109 

|<<prebuilt-rule-8-14-22-esxi-discovery-via-grep, ESXI Discovery via Grep>> | Identifies instances where a process named 'grep', 'egrep', or 'pgrep' is started on a Linux system with arguments related to virtual machine (VM) files, such as "vmdk", "vmx", "vmxf", "vmsd", "vmsn", "vswp", "vmss", "nvram", or "vmem". These file extensions are associated with VM-related file formats, and their presence in grep command arguments may indicate that a threat actor is attempting to search for, analyze, or manipulate VM files on the system. | update | 109 

|<<prebuilt-rule-8-14-22-kernel-seeking-activity, Kernel Seeking Activity>> | This rule detects kernel seeking activity through several built-in Linux utilities. Attackers may use these utilities to search the Linux kernel for available symbols, functions, and other information that can be used to exploit the kernel. | update | 3 

|<<prebuilt-rule-8-14-22-kernel-unpacking-activity, Kernel Unpacking Activity>> | This rule detects kernel unpacking activity through several built-in Linux utilities. Attackers may use these utilities to unpack kernel images and modules to search for vulnerabilities or to modify the kernel. | update | 3 

|<<prebuilt-rule-8-14-22-hping-process-activity, Hping Process Activity>> | Hping ran on a Linux host. Hping is a FOSS command-line packet analyzer and has the ability to construct network packets for a wide variety of network security testing applications, including scanning and firewall auditing. | update | 210 

|<<prebuilt-rule-8-14-22-nping-process-activity, Nping Process Activity>> | Nping ran on a Linux host. Nping is part of the Nmap tool suite and has the ability to construct raw packets for a wide variety of security testing applications, including denial of service testing. | update | 210 

|<<prebuilt-rule-8-14-22-pluggable-authentication-module-pam-version-discovery, Pluggable Authentication Module (PAM) Version Discovery>> | This rule detects PAM version discovery activity on Linux systems. PAM version discovery can be an indication of an attacker attempting to backdoor the authentication process through malicious PAM modules. | update | 103 

|<<prebuilt-rule-8-14-22-polkit-version-discovery, Polkit Version Discovery>> | This rule detects Polkit version discovery activity on Linux systems. Polkit version discovery can be an indication of an attacker attempting to exploit misconfigurations or vulnerabilities in the Polkit service. | update | 3 

|<<prebuilt-rule-8-14-22-private-key-searching-activity, Private Key Searching Activity>> | This rule detects private key searching activity on Linux systems. Searching for private keys can be an indication of an attacker attempting to escalate privileges or exfiltrate sensitive information. | update | 103 

|<<prebuilt-rule-8-14-22-suspicious-proc-maps-discovery, Suspicious /proc/maps Discovery>> | Monitors for /proc/*/maps file reads. The /proc/*/maps file in Linux provides a memory map for a specific process, detailing the memory segments, permissions, and what files are mapped to these segments. Attackers may read a process's memory map to identify memory addresses for code injection or process hijacking. | update | 4 

|<<prebuilt-rule-8-14-22-process-capability-enumeration, Process Capability Enumeration>> | Identifies recursive process capability enumeration of the entire filesystem through the getcap command. Malicious users may manipulate identified capabilities to gain root privileges. | update | 5 

|<<prebuilt-rule-8-14-22-security-file-access-via-common-utilities, Security File Access via Common Utilities>> | This rule detects sensitive security file access via common utilities on Linux systems. Adversaries may attempt to read from sensitive files using common utilities to gather information about the system and its security configuration. | update | 103 

|<<prebuilt-rule-8-14-22-sudo-command-enumeration-detected, Sudo Command Enumeration Detected>> | This rule monitors for the usage of the sudo -l command, which is used to list the allowed and forbidden commands for the invoking user. Attackers may execute this command to enumerate commands allowed to be executed with sudo permissions, potentially allowing to escalate privileges to root. | update | 108 

|<<prebuilt-rule-8-14-22-suid-sguid-enumeration-detected, SUID/SGUID Enumeration Detected>> | This rule monitors for the usage of the "find" command in conjunction with SUID and SGUID permission arguments. SUID (Set User ID) and SGID (Set Group ID) are special permissions in Linux that allow a program to execute with the privileges of the file owner or group, respectively, rather than the privileges of the user running the program. In case an attacker is able to enumerate and find a binary that is misconfigured, they might be able to leverage this misconfiguration to escalate privileges by exploiting vulnerabilities or built-in features in the privileged program. | update | 8 

|<<prebuilt-rule-8-14-22-suspicious-memory-grep-activity, Suspicious Memory grep Activity>> | Monitors for grep activity related to memory mapping. The /proc/*/maps file in Linux provides a memory map for a specific process, detailing the memory segments, permissions, and what files are mapped to these segments. Attackers may read a process's memory map to identify memory addresses for code injection or process hijacking. | update | 105 

|<<prebuilt-rule-8-14-22-suspicious-which-enumeration, Suspicious which Enumeration>> | This rule monitors for the usage of the which command with an unusual amount of process arguments. Attackers may leverage the which command to enumerate the system for useful installed utilities that may be used after compromising a system to escalate privileges or move latteraly across the network. | update | 109 

|<<prebuilt-rule-8-14-22-unusual-user-privilege-enumeration-via-id, Unusual User Privilege Enumeration via id>> | This rule monitors for a sequence of 20 "id" command executions within 1 second by the same parent process. This behavior is unusual, and may be indicative of the execution of an enumeration script such as LinPEAS or LinEnum. These scripts leverage the "id" command to enumerate the privileges of all users present on the system. | update | 6 

|<<prebuilt-rule-8-14-22-yum-dnf-plugin-status-discovery, Yum/DNF Plugin Status Discovery>> | This rule detects the execution of the `grep` command with the `plugins` argument on Linux systems. This command is used to search for YUM/DNF configurations and/or plugins with an enabled state. This behavior may indicate an attacker is attempting to establish persistence in a YUM or DNF plugin. | update | 104 

|<<prebuilt-rule-8-14-22-file-creation-by-cups-or-foomatic-rip-child, File Creation by Cups or Foomatic-rip Child>> | This detection rule addresses multiple vulnerabilities in the CUPS printing system, including CVE-2024-47176, CVE-2024-47076, CVE-2024-47175, and CVE-2024-47177. Specifically, this rule detects suspicious file creation events executed by child processes of foomatic-rip. These flaws impact components like cups-browsed, libcupsfilters, libppd, and foomatic-rip, allowing remote unauthenticated attackers to manipulate IPP URLs or inject malicious data through crafted UDP packets or network spoofing. This can result in arbitrary command execution when a print job is initiated. | update | 103 

|<<prebuilt-rule-8-14-22-printer-user-lp-shell-execution, Printer User (lp) Shell Execution>> | This detection rule addresses multiple vulnerabilities in the CUPS printing system, including CVE-2024-47176, CVE-2024-47076, CVE-2024-47175, and CVE-2024-47177. Specifically, this rule detects shell executions from the foomatic-rip parent process through the default printer user (lp). These flaws impact components like cups-browsed, libcupsfilters, libppd, and foomatic-rip, allowing remote unauthenticated attackers to manipulate IPP URLs or inject malicious data through crafted UDP packets or network spoofing. This can result in arbitrary command execution when a print job is initiated. | update | 5 

|<<prebuilt-rule-8-14-22-cupsd-or-foomatic-rip-shell-execution, Cupsd or Foomatic-rip Shell Execution>> | This detection rule addresses multiple vulnerabilities in the CUPS printing system, including CVE-2024-47176, CVE-2024-47076, CVE-2024-47175, and CVE-2024-47177. Specifically, this rule detects shell executions from the foomatic-rip parent process. These flaws impact components like cups-browsed, libcupsfilters, libppd, and foomatic-rip, allowing remote unauthenticated attackers to manipulate IPP URLs or inject malicious data through crafted UDP packets or network spoofing. This can result in arbitrary command execution when a print job is initiated. | update | 104 

|<<prebuilt-rule-8-14-22-suspicious-execution-from-foomatic-rip-or-cupsd-parent, Suspicious Execution from Foomatic-rip or Cupsd Parent>> | This detection rule addresses multiple vulnerabilities in the CUPS printing system, including CVE-2024-47176, CVE-2024-47076, CVE-2024-47175, and CVE-2024-47177. Specifically, this rule detects suspicious process command lines executed by child processes of foomatic-rip and cupsd. These flaws impact components like cups-browsed, libcupsfilters, libppd, and foomatic-rip, allowing remote unauthenticated attackers to manipulate IPP URLs or inject malicious data through crafted UDP packets or network spoofing. This can result in arbitrary command execution when a print job is initiated. | update | 104 

|<<prebuilt-rule-8-14-22-potential-curl-cve-2023-38545-exploitation, Potential curl CVE-2023-38545 Exploitation>> | Detects potential exploitation of curl CVE-2023-38545 by monitoring for vulnerable command line arguments in conjunction with an unusual command line length. A flaw in curl version <= 8.3 makes curl vulnerable to a heap based buffer overflow during the SOCKS5 proxy handshake. Upgrade to curl version >= 8.4 to patch this vulnerability. This exploit can be executed with and without the use of environment variables. For increased visibility, enable the collection of http_proxy, HTTPS_PROXY and ALL_PROXY environment variables based on the instructions provided in the setup guide of this rule. | update | 8 

|<<prebuilt-rule-8-14-22-egress-connection-from-entrypoint-in-container, Egress Connection from Entrypoint in Container>> | This rule identifies a sequence of events where a process named `entrypoint.sh` is started in a container, followed by a network connection attempt. This sequence indicates a potential egress connection from an entrypoint in a container. An entrypoint is a command or script specified in the Dockerfile and executed when the container starts. Attackers can use this technique to establish a foothold in the environment, escape from a container to the host, or establish persistence. | update | 3 

|<<prebuilt-rule-8-14-22-file-creation-execution-and-self-deletion-in-suspicious-directory, File Creation, Execution and Self-Deletion in Suspicious Directory>> | This rule monitors for the creation of a file, followed by its execution and self-deletion in a short timespan within a directory often used for malicious purposes by threat actors. This behavior is often used by malware to execute malicious code and delete itself to hide its tracks. | update | 7 

|<<prebuilt-rule-8-14-22-file-transfer-or-listener-established-via-netcat, File Transfer or Listener Established via Netcat>> | A netcat process is engaging in network activity on a Linux host. Netcat is often used as a persistence mechanism by exporting a reverse shell or by serving a shell on a listening port. Netcat is also sometimes used for data exfiltration. | update | 212 

|<<prebuilt-rule-8-14-22-potential-upgrade-of-non-interactive-shell, Potential Upgrade of Non-interactive Shell>> | Identifies when a non-interactive terminal (tty) is being upgraded to a fully interactive shell. Attackers may upgrade a simple reverse shell to a fully interactive tty after obtaining initial access to a host, in order to obtain a more stable connection. | update | 105 

|<<prebuilt-rule-8-14-22-netcat-listener-established-via-rlwrap, Netcat Listener Established via rlwrap>> | Monitors for the execution of a netcat listener via rlwrap. rlwrap is a 'readline wrapper', a small utility that uses the GNU Readline library to allow the editing of keyboard input for any command. This utility can be used in conjunction with netcat to gain a more stable reverse shell. | update | 105 

|<<prebuilt-rule-8-14-22-network-connection-from-binary-with-rwx-memory-region, Network Connection from Binary with RWX Memory Region>> | Monitors for the execution of a unix binary with read, write and execute memory region permissions, followed by a network connection. The mprotect() system call is used to change the access protections on a region of memory that has already been allocated. This syscall allows a process to modify the permissions of pages in its virtual address space, enabling or disabling permissions such as read, write, and execute for those pages. RWX permissions on memory is in many cases overly permissive, and should (especially in conjunction with an outbound network connection) be analyzed thoroughly. | update | 5 

|<<prebuilt-rule-8-14-22-network-connection-via-recently-compiled-executable, Network Connection via Recently Compiled Executable>> | This rule monitors a sequence involving a program compilation event followed by its execution and a subsequent network connection event. This behavior can indicate the set up of a reverse tcp connection to a command-and-control server. Attackers may spawn reverse shells to establish persistence onto a target system. | update | 8 

|<<prebuilt-rule-8-14-22-potential-linux-hack-tool-launched, Potential Linux Hack Tool Launched>> | Monitors for the execution of different processes that might be used by attackers for malicious intent. An alert from this rule should be investigated further, as hack tools are commonly used by blue teamers and system administrators as well. | update | 106 

|<<prebuilt-rule-8-14-22-process-started-from-process-id-pid-file, Process Started from Process ID (PID) File>> | Identifies a new process starting from a process ID (PID), lock or reboot file within the temporary file storage paradigm (tmpfs) directory /var/run directory. On Linux, the PID files typically hold the process ID to track previous copies running and manage other tasks. Certain Linux malware use the /var/run directory for holding data, executables and other tasks, disguising itself or these files as legitimate PID files. | update | 112 

|<<prebuilt-rule-8-14-22-binary-executed-from-shared-memory-directory, Binary Executed from Shared Memory Directory>> | Identifies the execution of a binary by root in Linux shared memory directories: (/dev/shm/, /run/shm/, /var/run/, /var/lock/). This activity is to be considered highly abnormal and should be investigated. Threat actors have placed executables used for persistence on high-uptime servers in these directories as system backdoors. | update | 112 

|<<prebuilt-rule-8-14-22-interactive-terminal-spawned-via-python, Interactive Terminal Spawned via Python>> | Identifies when a terminal (tty) is spawned via Python. Attackers may upgrade a simple reverse shell to a fully interactive tty after obtaining initial access to a host. | update | 212 

|<<prebuilt-rule-8-14-22-web-server-spawned-via-python, Web Server Spawned via Python>> | This rule identifies when a web server is spawned via Python. Attackers may use Python to spawn a web server to exfiltrate/infiltrate data or to move laterally within a network. | update | 103 

|<<prebuilt-rule-8-14-22-potential-code-execution-via-postgresql, Potential Code Execution via Postgresql>> | This rule monitors for suspicious activities that may indicate an attacker attempting to execute arbitrary code within a PostgreSQL environment. Attackers can execute code via PostgreSQL as a result of gaining unauthorized access to a public facing PostgreSQL database or exploiting vulnerabilities, such as remote command execution and SQL injection attacks, which can result in unauthorized access and malicious actions, and facilitate post-exploitation activities for unauthorized access and malicious actions. | update | 9 

|<<prebuilt-rule-8-14-22-linux-restricted-shell-breakout-via-linux-binary-s, Linux Restricted Shell Breakout via Linux Binary(s)>> | Identifies the abuse of a Linux binary to break out of a restricted shell or environment by spawning an interactive system shell. The activity of spawning a shell from a binary is not common behavior for a user or system administrator, and may indicate an attempt to evade detection, increase capabilities or enhance the stability of an adversary. | update | 115 

|<<prebuilt-rule-8-14-22-openssl-client-or-server-activity, Openssl Client or Server Activity>> | This rule identifies when the openssl client or server is used to establish a connection. Attackers may use openssl to establish a secure connection to a remote server or to create a secure server to receive connections. This activity may be used to exfiltrate data or establish a command and control channel. | update | 104 

|<<prebuilt-rule-8-14-22-potential-reverse-shell-via-background-process, Potential Reverse Shell via Background Process>> | Monitors for the execution of background processes with process arguments capable of opening a socket in the /dev/tcp channel. This may indicate the creation of a backdoor reverse connection, and should be investigated further. | update | 106 

|<<prebuilt-rule-8-14-22-potential-reverse-shell-via-child, Potential Reverse Shell via Child>> | This detection rule identifies suspicious network traffic patterns associated with TCP reverse shell activity. This activity consists of a network event that is followed by the creation of a shell process with suspicious command line arguments. An attacker may establish a Linux TCP reverse shell to gain remote access to a target system. | update | 5 

|<<prebuilt-rule-8-14-22-potential-reverse-shell-via-java, Potential Reverse Shell via Java>> | This detection rule identifies the execution of a Linux shell process from a Java JAR application post an incoming network connection. This behavior may indicate reverse shell activity via a Java application. | update | 10 

|<<prebuilt-rule-8-14-22-potential-reverse-shell-via-suspicious-child-process, Potential Reverse Shell via Suspicious Child Process>> | This detection rule detects the creation of a shell through a suspicious process chain. Any reverse shells spawned by the specified utilities that are initialized from a single process followed by a network connection attempt will be captured through this rule. Attackers may spawn reverse shells to establish persistence onto a target system. | update | 11 

|<<prebuilt-rule-8-14-22-potential-reverse-shell-via-suspicious-binary, Potential Reverse Shell via Suspicious Binary>> | This detection rule detects the creation of a shell through a chain consisting of the execution of a suspicious binary (located in a commonly abused location or executed manually) followed by a network event and ending with a shell being spawned. Stageless reverse tcp shells display this behaviour. Attackers may spawn reverse shells to establish persistence onto a target system. | update | 9 

|<<prebuilt-rule-8-14-22-potential-reverse-shell, Potential Reverse Shell>> | This detection rule identifies suspicious network traffic patterns associated with TCP reverse shell activity. This activity consists of a parent-child relationship where a network event is followed by the creation of a shell process. An attacker may establish a Linux TCP reverse shell to gain remote access to a target system. | update | 11 

|<<prebuilt-rule-8-14-22-suspicious-content-extracted-or-decompressed-via-funzip, Suspicious Content Extracted or Decompressed via Funzip>> | Identifies when suspicious content is extracted from a file and subsequently decompressed using the funzip utility. Malware may execute the tail utility using the "-c" option to read a sequence of bytes from the end of a file. The output from tail can be piped to funzip in order to decompress malicious code before it is executed. This behavior is consistent with malware families such as Bundlore. | update | 107 

|<<prebuilt-rule-8-14-22-suspicious-mining-process-creation-event, Suspicious Mining Process Creation Event>> | Identifies service creation events of common mining services, possibly indicating the infection of a system with a cryptominer. | update | 108 

|<<prebuilt-rule-8-14-22-system-binary-path-file-permission-modification, System Binary Path File Permission Modification>> | This rule identifies file permission modification events on files located in common system binary paths. Adversaries may attempt to hide their payloads in the default Linux system directories, and modify the file permissions of these payloads prior to execution. | update | 3 

|<<prebuilt-rule-8-14-22-bpf-filter-applied-using-tc, BPF filter applied using TC>> | Detects when the tc (transmission control) binary is utilized to set a BPF (Berkeley Packet Filter) on a network interface. Tc is used to configure Traffic Control in the Linux kernel. It can shape, schedule, police and drop traffic. A threat actor can utilize tc to set a bpf filter on an interface for the purpose of manipulating the incoming traffic. This technique is not at all common and should indicate abnormal, suspicious or malicious activity. | update | 210 

|<<prebuilt-rule-8-14-22-unix-socket-connection, Unix Socket Connection>> | This rule monitors for inter-process communication via Unix sockets. Adversaries may attempt to communicate with local Unix sockets to enumerate application details, find vulnerabilities/configuration mistakes and potentially escalate privileges or set up malicious communication channels via Unix sockets for inter-process communication to attempt to evade detection. | update | 105 

|<<prebuilt-rule-8-14-22-potential-data-splitting-detected, Potential Data Splitting Detected>> | This rule looks for the usage of common data splitting utilities with specific arguments that indicate data splitting for exfiltration on Linux systems. Data splitting is a technique used by adversaries to split data into smaller parts to avoid detection and exfiltrate data. | update | 103 

|<<prebuilt-rule-8-14-22-suspicious-data-encryption-via-openssl-utility, Suspicious Data Encryption via OpenSSL Utility>> | Identifies when the openssl command-line utility is used to encrypt multiple files on a host within a short time window. Adversaries may encrypt data on a single or multiple systems in order to disrupt the availability of their target's data and may attempt to hold the organization's data to ransom for the purposes of extortion. | update | 8 

|<<prebuilt-rule-8-14-22-suspicious-termination-of-esxi-process, Suspicious Termination of ESXI Process>> | Identifies instances where VMware processes, such as "vmware-vmx" or "vmx," are terminated on a Linux system by a "kill" command. The rule monitors for the "end" event type, which signifies the termination of a process. The presence of a "kill" command as the parent process for terminating VMware processes may indicate that a threat actor is attempting to interfere with the virtualized environment on the targeted system. | update | 8 

|<<prebuilt-rule-8-14-22-memory-swap-modification, Memory Swap Modification>> | This rule detects memory swap modification events on Linux systems. Memory swap modification can be used to manipulate the system's memory and potentially impact the system's performance. This behavior is commonly observed in malware that deploys miner software such as XMRig. | update | 103 

|<<prebuilt-rule-8-14-22-potential-linux-ransomware-note-creation-detected, Potential Linux Ransomware Note Creation Detected>> | This rule identifies a sequence of a mass file encryption event in conjunction with the creation of a .txt file with a file name containing ransomware keywords executed by the same process in a 1 second timespan. Ransomware is a type of malware that encrypts a victim's files or systems and demands payment (usually in cryptocurrency) in exchange for the decryption key. One important indicator of a ransomware attack is the mass encryption of the file system, after which a new file extension is added to the file. | update | 12 

|<<prebuilt-rule-8-14-22-potential-ssh-it-ssh-worm-downloaded, Potential SSH-IT SSH Worm Downloaded>> | Identifies processes that are capable of downloading files with command line arguments containing URLs to SSH-IT's autonomous SSH worm. This worm intercepts outgoing SSH connections every time a user uses ssh. | update | 105 

|<<prebuilt-rule-8-14-22-connection-to-external-network-via-telnet, Connection to External Network via Telnet>> | Telnet provides a command line interface for communication with a remote device or server. This rule identifies Telnet network connections to publicly routable IP addresses. | update | 209 

|<<prebuilt-rule-8-14-22-connection-to-internal-network-via-telnet, Connection to Internal Network via Telnet>> | Telnet provides a command line interface for communication with a remote device or server. This rule identifies Telnet network connections to non-publicly routable IP addresses. | update | 209 

|<<prebuilt-rule-8-14-22-suspicious-apt-package-manager-execution, Suspicious APT Package Manager Execution>> | Detects suspicious process events executed by the APT package manager, potentially indicating persistence through an APT backdoor. In Linux, APT (Advanced Package Tool) is a command-line utility used for handling packages on Debian-based systems, providing functions for installing, updating, upgrading, and removing software along with managing package repositories. Attackers can backdoor APT to gain persistence by injecting malicious code into scripts that APT runs, thereby ensuring continued unauthorized access or control each time APT is used for package management. | update | 106 

|<<prebuilt-rule-8-14-22-suspicious-apt-package-manager-network-connection, Suspicious APT Package Manager Network Connection>> | Detects suspicious network events executed by the APT package manager, potentially indicating persistence through an APT backdoor. In Linux, APT (Advanced Package Tool) is a command-line utility used for handling packages on Debian-based systems, providing functions for installing, updating, upgrading, and removing software along with managing package repositories. Attackers can backdoor APT to gain persistence by injecting malicious code into scripts that APT runs, thereby ensuring continued unauthorized access or control each time APT is used for package management. | update | 6 

|<<prebuilt-rule-8-14-22-chkconfig-service-add, Chkconfig Service Add>> | Detects the use of the chkconfig binary to manually add a service for management by chkconfig. Threat actors may utilize this technique to maintain persistence on a system. When a new service is added, chkconfig ensures that the service has either a start or a kill entry in every runlevel and when the system is rebooted the service file added will run providing long-term persistence. | update | 215 

|<<prebuilt-rule-8-14-22-unusual-dpkg-execution, Unusual DPKG Execution>> | This rule detects the execution of the DPKG command by processes not associated with the DPKG package manager. The DPKG command is used to install, remove, and manage Debian packages on a Linux system. Attackers can abuse the DPKG command to install malicious packages on a system. | update | 4 

|<<prebuilt-rule-8-14-22-dynamic-linker-copy, Dynamic Linker Copy>> | Detects the copying of the Linux dynamic loader binary and subsequent file creation for the purpose of creating a backup copy. This technique was seen recently being utilized by Linux malware prior to patching the dynamic loader in order to inject and preload a malicious shared object file. This activity should never occur and if it does then it should be considered highly suspicious or malicious. | update | 211 

|<<prebuilt-rule-8-14-22-deprecated-suspicious-file-creation-in-etc-for-persistence, Deprecated - Suspicious File Creation in /etc for Persistence>> | Detects the manual creation of files in specific etc directories, via user root, used by Linux malware to persist and elevate privileges on compromised systems. File creation in these directories should not be entirely common and could indicate a malicious binary or script installing persistence mechanisms for long term access. | update | 118 

|<<prebuilt-rule-8-14-22-system-v-init-script-created, System V Init Script Created>> | Files that are placed in the /etc/init.d/ directory in Unix can be used to start custom applications, services, scripts or commands during start-up. Init.d has been mostly replaced in favor of Systemd. However, the "systemd-sysv-generator" can convert init.d files to service unit files that run at boot. Adversaries may add or alter files located in the /etc/init.d/ directory to execute malicious code upon boot in order to gain persistence on the system. | update | 115 

|<<prebuilt-rule-8-14-22-kernel-module-load-via-insmod, Kernel Module Load via insmod>> | Detects the use of the insmod binary to load a Linux kernel object file. Threat actors can use this binary, given they have root privileges, to load a rootkit on a system providing them with complete control and the ability to hide from security products. Manually loading a kernel module in this manner should not be at all common and can indicate suspcious or malicious behavior. | update | 212 

|<<prebuilt-rule-8-14-22-persistence-via-kde-autostart-script-or-desktop-file-modification, Persistence via KDE AutoStart Script or Desktop File Modification>> | Identifies the creation or modification of a K Desktop Environment (KDE) AutoStart script or desktop file that will execute upon each user logon. Adversaries may abuse this method for persistence. | update | 216 

|<<prebuilt-rule-8-14-22-suspicious-file-creation-via-kworker, Suspicious File Creation via Kworker>> | This rule monitors for a file creation event originating from a kworker parent process. kworker, or kernel worker, processes are part of the kernel's workqueue mechanism. They are responsible for executing work that has been scheduled to be done in kernel space, which might include tasks like handling interrupts, background activities, and other kernel-related tasks. Attackers may attempt to evade detection by masquerading as a kernel worker process. | update | 107 

|<<prebuilt-rule-8-14-22-potential-linux-backdoor-user-account-creation, Potential Linux Backdoor User Account Creation>> | Identifies the attempt to create a new backdoor user by setting the user's UID to 0. Attackers may alter a user's UID to 0 to establish persistence on a system. | update | 110 

|<<prebuilt-rule-8-14-22-potential-remote-code-execution-via-web-server, Potential Remote Code Execution via Web Server>> | Identifies suspicious commands executed via a web server, which may suggest a vulnerability and remote shell access. Attackers may exploit a vulnerability in a web application to execute commands via a web server, or place a backdoor file that can be abused to gain code execution as a mechanism for persistence. | update | 109 

|<<prebuilt-rule-8-14-22-linux-user-added-to-privileged-group, Linux User Added to Privileged Group>> | Identifies attempts to add a user to a privileged group. Attackers may add users to a privileged group in order to establish persistence on a system. | update | 110 

|<<prebuilt-rule-8-14-22-manual-dracut-execution, Manual Dracut Execution>> | This rule detects manual execution of the `dracut` command on Linux systems. Dracut is a tool used to generate an initramfs image that is used to boot the system. Attackers may use `dracut` to create a custom initramfs image that includes malicious code or backdoors, allowing them to maintain persistence on the system. | update | 3 

|<<prebuilt-rule-8-14-22-rc-local-rc-common-file-creation, rc.local/rc.common File Creation>> | This rule monitors the creation/alteration of the rc.local/rc.common file. The /etc/rc.local file is used to start custom applications, services, scripts or commands during start-up. The rc.local file has mostly been replaced by Systemd. However, through the "systemd-rc-local-generator", rc.local files can be converted to services that run at boot. Adversaries may alter rc.local/rc.common to execute malicious code at start-up, and gain persistence onto the system. | update | 116 

|<<prebuilt-rule-8-14-22-setcap-setuid-setgid-capability-set, Setcap setuid/setgid Capability Set>> | This rule monitors for the addition of the cap_setuid+ep or cap_setgid+ep capabilities via setcap. Setuid (Set User ID) and setgid (Set Group ID) are Unix-like OS features that enable processes to run with elevated privileges, based on the file owner or group. Threat actors can exploit these attributes to achieve persistence by creating malicious binaries, allowing them to maintain control over a compromised system with elevated permissions. | update | 108 

|<<prebuilt-rule-8-14-22-network-connection-initiated-by-sshd-child-process, Network Connection Initiated by SSHD Child Process>> | This rule identifies an egress internet connection initiated by an SSH Daemon child process. This behavior is indicative of the alteration of a shell configuration file or other mechanism that launches a process when a new SSH login occurs. Attackers can also backdoor the SSH daemon to allow for persistence, call out to a C2 or to steal credentials. | update | 5 

|<<prebuilt-rule-8-14-22-potential-suspicious-file-edit, Potential Suspicious File Edit>> | This rule monitors for the potential edit of a suspicious file. In Linux, when editing a file through an editor, a temporary .swp file is created. By monitoring for the creation of this .swp file, we can detect potential file edits of suspicious files. The execution of this rule is not a clear sign of the file being edited, as just opening the file through an editor will trigger this event. Attackers may alter any of the files added in this rule to establish persistence, escalate privileges or perform reconnaisance on the system. | update | 107 

|<<prebuilt-rule-8-14-22-potential-execution-via-xzbackdoor, Potential Execution via XZBackdoor>> | It identifies potential malicious shell executions through remote SSH and detects cases where the sshd service suddenly terminates soon after successful execution, suggesting suspicious behavior similar to the XZ backdoor. | update | 6 

|<<prebuilt-rule-8-14-22-suspicious-network-connection-via-systemd, Suspicious Network Connection via systemd>> | Detects suspicious network events executed by systemd, potentially indicating persistence through a systemd backdoor. Systemd is a system and service manager for Linux operating systems, used to initialize and manage system processes. Attackers can backdoor systemd for persistence by creating or modifying systemd unit files to execute malicious scripts or commands, or by replacing legitimate systemd binaries with compromised ones, ensuring that their malicious code is automatically executed at system startup or during certain system events. | update | 5 

|<<prebuilt-rule-8-14-22-network-connections-initiated-through-xdg-autostart-entry, Network Connections Initiated Through XDG Autostart Entry>> | Detects network connections initiated through Cross-Desktop Group (XDG) autostart entries for GNOME and XFCE-based Linux distributions. XDG Autostart entries can be used to execute arbitrary commands or scripts when a user logs in. This rule helps to identify potential malicious activity where an attacker may have modified XDG autostart scripts to establish persistence on the system. | update | 5 

|<<prebuilt-rule-8-14-22-potential-unauthorized-access-via-wildcard-injection-detected, Potential Unauthorized Access via Wildcard Injection Detected>> | This rule monitors for the execution of the "chown" and "chmod" commands with command line flags that could indicate a wildcard injection attack. Linux wildcard injection is a type of security vulnerability where attackers manipulate commands or input containing wildcards (e.g., *, ?, []) to execute unintended operations or access sensitive data by tricking the system into interpreting the wildcard characters in unexpected ways. | update | 107 

|<<prebuilt-rule-8-14-22-potential-privilege-escalation-via-container-misconfiguration, Potential Privilege Escalation via Container Misconfiguration>> | This rule monitors for the execution of processes that interact with Linux containers through an interactive shell without root permissions. Utilities such as runc and ctr are universal command-line utilities leveraged to interact with containers via root permissions. On systems where the access to these utilities are misconfigured, attackers might be able to create and run a container that mounts the root folder or spawn a privileged container vulnerable to a container escape attack, which might allow them to escalate privileges and gain further access onto the host file system. | update | 7 

|<<prebuilt-rule-8-14-22-potential-chroot-container-escape-via-mount, Potential Chroot Container Escape via Mount>> | Monitors for the execution of a file system mount followed by a chroot execution. Given enough permissions, a user within a container is capable of mounting the root file system of the host, and leveraging chroot to escape its containarized environment. This behavior pattern is very uncommon and should be investigated. | update | 104 

|<<prebuilt-rule-8-14-22-potential-privilege-escalation-via-enlightenment, Potential Privilege Escalation via Enlightenment>> | Identifies an attempt to exploit a local privilege escalation CVE-2022-37706 via a flaw in Linux window manager package Enlightenment. enlightenment_sys in Enlightenment before 0.25.4 allows local users to gain privileges because it is setuid root, and the system library function mishandles pathnames that begin with a /dev/.. substring. | update | 4 

|<<prebuilt-rule-8-14-22-privilege-escalation-via-gdb-cap-sys-ptrace, Privilege Escalation via GDB CAP_SYS_PTRACE>> | Identifies instances where GDB (granted the CAP_SYS_PTRACE capability) is executed, after which the user's access is elevated to UID/GID 0 (root). In Linux, the CAP_SYS_PTRACE capability grants a process the ability to use the ptrace system call, which is typically used for debugging and allows the process to trace and control other processes. Attackers may leverage this capability to hook and inject into a process that is running with root permissions in order to escalate their privileges to root. | update | 4 

|<<prebuilt-rule-8-14-22-root-network-connection-via-gdb-cap-sys-ptrace, Root Network Connection via GDB CAP_SYS_PTRACE>> | Identifies instances where GDB (granted the CAP_SYS_PTRACE capability) is executed, after which an outbound network connection is initiated by UID/GID 0 (root). In Linux, the CAP_SYS_PTRACE capability grants a process the ability to use the ptrace system call, which is typically used for debugging and allows the process to trace and control other processes. Attackers may leverage this capability to hook and inject into a process that is running with root permissions in order to execute shell code and gain a reverse shell with root privileges. | update | 4 

|<<prebuilt-rule-8-14-22-suspicious-kworker-uid-elevation, Suspicious Kworker UID Elevation>> | Monitors for the elevation of regular user permissions to root permissions through the kworker process. kworker, or kernel worker, processes are part of the kernel's workqueue mechanism. They are responsible for executing work that has been scheduled to be done in kernel space, which might include tasks like handling interrupts, background activities, and other kernel-related tasks. Attackers may attempt to evade detection by masquerading as a kernel worker process, and hijack the execution flow by hooking certain functions/syscalls through a rootkit in order to provide easy access to root via a special modified command. | update | 4 

|<<prebuilt-rule-8-14-22-suspicious-symbolic-link-created, Suspicious Symbolic Link Created>> | Identifies the creation of a symbolic link to a suspicious file or location. A symbolic link is a reference to a file or directory that acts as a pointer or shortcut, allowing users to access the target file or directory from a different location in the file system. An attacker can potentially leverage symbolic links for privilege escalation by tricking a privileged process into following the symbolic link to a sensitive file, giving the attacker access to data or capabilities they would not normally have. | update | 8 

|<<prebuilt-rule-8-14-22-potential-privilege-escalation-via-uid-int-max-bug-detected, Potential Privilege Escalation via UID INT_MAX Bug Detected>> | This rule monitors for the execution of the systemd-run command by a user with a UID that is larger than the maximum allowed UID size (INT_MAX). Some older Linux versions were affected by a bug which allows user accounts with a UID greater than INT_MAX to escalate privileges by spawning a shell through systemd-run. | update | 8 

|<<prebuilt-rule-8-14-22-kernel-load-or-unload-via-kexec-detected, Kernel Load or Unload via Kexec Detected>> | This detection rule identifies the usage of kexec, helping to uncover unauthorized kernel replacements and potential compromise of the system's integrity. Kexec is a Linux feature that enables the loading and execution of a different kernel without going through the typical boot process. Malicious actors can abuse kexec to bypass security measures, escalate privileges, establish persistence or hide their activities by loading a malicious kernel, enabling them to tamper with the system's trusted state, allowing e.g. a VM Escape. | update | 109 

|<<prebuilt-rule-8-14-22-potential-privilege-escalation-via-cve-2023-4911, Potential Privilege Escalation via CVE-2023-4911>> | This rule detects potential privilege escalation attempts through Looney Tunables (CVE-2023-4911). Looney Tunables is a buffer overflow vulnerability in GNU C Library's dynamic loader's processing of the GLIBC_TUNABLES environment variable. | update | 6 

|<<prebuilt-rule-8-14-22-network-connection-via-sudo-binary, Network Connection via Sudo Binary>> | Detects network connections initiated by the "sudo" binary. This behavior is uncommon and may occur in instances where reverse shell shellcode is injected into a process run with elevated permissions via "sudo". Attackers may attempt to inject shellcode into processes running as root, to escalate privileges. | update | 5 

|<<prebuilt-rule-8-14-22-potential-privilege-escalation-via-overlayfs, Potential Privilege Escalation via OverlayFS>> | Identifies an attempt to exploit a local privilege escalation (CVE-2023-2640 and CVE-2023-32629) via a flaw in Ubuntu's modifications to OverlayFS. These flaws allow the creation of specialized executables, which, upon execution, grant the ability to escalate privileges to root on the affected machine. | update | 7 

|<<prebuilt-rule-8-14-22-potential-privilege-escalation-via-pkexec, Potential Privilege Escalation via PKEXEC>> | Identifies an attempt to exploit a local privilege escalation in polkit pkexec (CVE-2021-4034) via unsecure environment variable injection. Successful exploitation allows an unprivileged user to escalate to the root user. | update | 210 

|<<prebuilt-rule-8-14-22-potential-shell-via-wildcard-injection-detected, Potential Shell via Wildcard Injection Detected>> | This rule monitors for the execution of a set of linux binaries, that are potentially vulnerable to wildcard injection, with suspicious command line flags followed by a shell spawn event. Linux wildcard injection is a type of security vulnerability where attackers manipulate commands or input containing wildcards (e.g., *, ?, []) to execute unintended operations or access sensitive data by tricking the system into interpreting the wildcard characters in unexpected ways. | update | 108 

|<<prebuilt-rule-8-14-22-potential-suspicious-debugfs-root-device-access, Potential Suspicious DebugFS Root Device Access>> | This rule monitors for the usage of the built-in Linux DebugFS utility to access a disk device without root permissions. Linux users that are part of the "disk" group have sufficient privileges to access all data inside of the machine through DebugFS. Attackers may leverage DebugFS in conjunction with "disk" permissions to read sensitive files owned by root, such as the shadow file, root ssh private keys or other sensitive files that may allow them to further escalate privileges. | update | 8 

|<<prebuilt-rule-8-14-22-potential-sudo-privilege-escalation-via-cve-2019-14287, Potential Sudo Privilege Escalation via CVE-2019-14287>> | This rule monitors for the execution of a suspicious sudo command that is leveraged in CVE-2019-14287 to escalate privileges to root. Sudo does not verify the presence of the designated user ID and proceeds to execute using a user ID that can be chosen arbitrarily. By using the sudo privileges, the command "sudo -u#-1" translates to an ID of 0, representing the root user. This exploit may work for sudo versions prior to v1.28. | update | 106 

|<<prebuilt-rule-8-14-22-potential-privilege-escalation-via-python-cap-setuid, Potential Privilege Escalation via Python cap_setuid>> | This detection rule monitors for the execution of a system command with setuid or setgid capabilities via Python, followed by a uid or gid change to the root user. This sequence of events may indicate successful privilege escalation. Setuid (Set User ID) and setgid (Set Group ID) are Unix-like OS features that enable processes to run with elevated privileges, based on the file owner or group. Threat actors can exploit these attributes to escalate privileges to the privileges that are set on the binary that is being executed. | update | 5 

|<<prebuilt-rule-8-14-22-privilege-escalation-via-cap-chown-cap-fowner-capabilities, Privilege Escalation via CAP_CHOWN/CAP_FOWNER Capabilities>> | Identifies instances where a processes (granted CAP_CHOWN and/or CAP_FOWNER capabilities) is executed, after which the ownership of a suspicious file or binary is changed. In Linux, the CAP_CHOWN capability allows a process to change the owner of a file, while CAP_FOWNER permits it to bypass permission checks on operations that require file ownership (like reading, writing, and executing). Attackers may abuse these capabilities to obtain unauthorized access to files. | update | 5 

|<<prebuilt-rule-8-14-22-suspicious-passwd-file-event-action, Suspicious Passwd File Event Action>> | Monitors for the generation of a passwd password entry via openssl, followed by a file write activity on the "/etc/passwd" file. The "/etc/passwd" file in Linux stores user account information, including usernames, user IDs, group IDs, home directories, and default shell paths. Attackers may exploit a misconfiguration in the "/etc/passwd" file permissions or other privileges to add a new entry to the "/etc/passwd" file with root permissions, and leverage this new user account to login as root. | update | 5 

|<<prebuilt-rule-8-14-22-privilege-escalation-via-cap-setuid-setgid-capabilities, Privilege Escalation via CAP_SETUID/SETGID Capabilities>> | Identifies instances where a process (granted CAP_SETUID and/or CAP_SETGID capabilities) is executed, after which the user's access is elevated to UID/GID 0 (root). In Linux, the CAP_SETUID and CAP_SETGID capabilities allow a process to change its UID and GID, respectively, providing control over user and group identity management. Attackers may leverage a misconfiguration for exploitation in order to escalate their privileges to root. | update | 6 

|<<prebuilt-rule-8-14-22-potential-privilege-escalation-via-recently-compiled-executable, Potential Privilege Escalation via Recently Compiled Executable>> | This rule monitors a sequence involving a program compilation event followed by its execution and a subsequent alteration of UID permissions to root privileges. This behavior can potentially indicate the execution of a kernel or software privilege escalation exploit. | update | 6 

|<<prebuilt-rule-8-14-22-namespace-manipulation-using-unshare, Namespace Manipulation Using Unshare>> | Identifies suspicious usage of unshare to manipulate system namespaces. Unshare can be utilized to escalate privileges or escape container security boundaries. Threat actors have utilized this binary to allow themselves to escape to the host and access other resources or escalate privileges. | update | 111 

|<<prebuilt-rule-8-14-22-potential-privilege-escalation-through-writable-docker-socket, Potential Privilege Escalation through Writable Docker Socket>> | This rule monitors for the usage of Docker runtime sockets to escalate privileges on Linux systems. Docker sockets by default are only be writable by the root user and docker group. Attackers that have permissions to write to these sockets may be able to create and run a container that allows them to escalate privileges and gain further access onto the host file system. | update | 7 

|<<prebuilt-rule-8-14-22-access-to-keychain-credentials-directories, Access to Keychain Credentials Directories>> | Adversaries may collect the keychain storage data from a system to acquire credentials. Keychains are the built-in way for macOS to keep track of users' passwords and credentials for many services and features such as WiFi passwords, websites, secure notes and certificates. | update | 209 

|<<prebuilt-rule-8-14-22-dumping-of-keychain-content-via-security-command, Dumping of Keychain Content via Security Command>> | Adversaries may dump the content of the keychain storage data from a system to acquire credentials. Keychains are the built-in way for macOS to keep track of users' passwords and credentials for many services and features, including Wi-Fi and website passwords, secure notes, certificates, and Kerberos. | update | 109 

|<<prebuilt-rule-8-14-22-keychain-password-retrieval-via-command-line, Keychain Password Retrieval via Command Line>> | Adversaries may collect keychain storage data from a system to in order to acquire credentials. Keychains are the built-in way for macOS to keep track of users' passwords and credentials for many services and features, including Wi-Fi and website passwords, secure notes, certificates, and Kerberos. | update | 110 

|<<prebuilt-rule-8-14-22-prompt-for-credentials-with-osascript, Prompt for Credentials with OSASCRIPT>> | Identifies the use of osascript to execute scripts via standard input that may prompt a user with a rogue dialog for credentials. | update | 210 

|<<prebuilt-rule-8-14-22-quarantine-attrib-removed-by-unsigned-or-untrusted-process, Quarantine Attrib Removed by Unsigned or Untrusted Process>> | Detects deletion of the quarantine attribute by an unusual process (xattr). In macOS, when applications or programs are downloaded from the internet, there is a quarantine flag set on the file. This attribute is read by Apple's Gatekeeper defense program at execution time. An adversary may disable this attribute to evade defenses. | update | 111 

|<<prebuilt-rule-8-14-22-potential-privacy-control-bypass-via-tccdb-modification, Potential Privacy Control Bypass via TCCDB Modification>> | Identifies the use of sqlite3 to directly modify the Transparency, Consent, and Control (TCC) SQLite database. This may indicate an attempt to bypass macOS privacy controls, including access to sensitive resources like the system camera, microphone, address book, and calendar. | update | 109 

|<<prebuilt-rule-8-14-22-potential-privacy-control-bypass-via-localhost-secure-copy, Potential Privacy Control Bypass via Localhost Secure Copy>> | Identifies use of the Secure Copy Protocol (SCP) to copy files locally by abusing the auto addition of the Secure Shell Daemon (sshd) to the authorized application list for Full Disk Access. This may indicate attempts to bypass macOS privacy controls to access sensitive files. | update | 109 

|<<prebuilt-rule-8-14-22-enumeration-of-users-or-groups-via-built-in-commands, Enumeration of Users or Groups via Built-in Commands>> | Identifies the execution of macOS built-in commands related to account or group enumeration. Adversaries may use account and group information to orient themselves before deciding how to act. | update | 209 

|<<prebuilt-rule-8-14-22-suspicious-browser-child-process, Suspicious Browser Child Process>> | Identifies the execution of a suspicious browser child process. Adversaries may gain access to a system through a user visiting a website over the normal course of browsing. With this technique, the user's web browser is typically targeted for exploitation. | update | 109 

|<<prebuilt-rule-8-14-22-macos-installer-package-spawns-network-event, MacOS Installer Package Spawns Network Event>> | Detects the execution of a MacOS installer package with an abnormal child process (e.g bash) followed immediately by a network connection via a suspicious process (e.g curl). Threat actors will build and distribute malicious MacOS installer packages, which have a .pkg extension, many times imitating valid software in order to persuade and infect their victims often using the package files (e.g pre/post install scripts etc.) to download additional tools or malicious software. If this rule fires it should indicate the installation of a malicious or suspicious package. | update | 109 

|<<prebuilt-rule-8-14-22-suspicious-automator-workflows-execution, Suspicious Automator Workflows Execution>> | Identifies the execution of the Automator Workflows process followed by a network connection from it's XPC service. Adversaries may drop a custom workflow template that hosts malicious JavaScript for Automation (JXA) code as an alternative to using osascript. | update | 108 

|<<prebuilt-rule-8-14-22-apple-script-execution-followed-by-network-connection, Apple Script Execution followed by Network Connection>> | Detects execution via the Apple script interpreter (osascript) followed by a network connection from the same process within a short time period. Adversaries may use malicious scripts for execution and command and control. | update | 108 

|<<prebuilt-rule-8-14-22-shell-execution-via-apple-scripting, Shell Execution via Apple Scripting>> | Identifies the execution of the shell process (sh) via scripting (JXA or AppleScript). Adversaries may use the doShellScript functionality in JXA or do shell script in AppleScript to execute system commands. | update | 109 

|<<prebuilt-rule-8-14-22-suspicious-macos-ms-office-child-process, Suspicious macOS MS Office Child Process>> | Identifies suspicious child processes of frequently targeted Microsoft Office applications (Word, PowerPoint, and Excel). These child processes are often launched during exploitation of Office applications or by documents with malicious macros. | update | 209 

|<<prebuilt-rule-8-14-22-attempt-to-mount-smb-share-via-command-line, Attempt to Mount SMB Share via Command Line>> | Identifies the execution of macOS built-in commands to mount a Server Message Block (SMB) network share. Adversaries may use valid accounts to interact with a remote network share using SMB. | update | 109 

|<<prebuilt-rule-8-14-22-virtual-private-network-connection-attempt, Virtual Private Network Connection Attempt>> | Identifies the execution of macOS built-in commands to connect to an existing Virtual Private Network (VPN). Adversaries may use VPN connections to laterally move and control remote systems on a network. | update | 109 

|<<prebuilt-rule-8-14-22-launch-agent-creation-or-modification-and-immediate-loading, Launch Agent Creation or Modification and Immediate Loading>> | An adversary can establish persistence by installing a new launch agent that executes at login by using launchd or launchctl to load a plist into the appropriate directories. | update | 108 

|<<prebuilt-rule-8-14-22-creation-of-hidden-login-item-via-apple-script, Creation of Hidden Login Item via Apple Script>> | Identifies the execution of osascript to create a hidden login item. This may indicate an attempt to persist a malicious program while concealing its presence. | update | 110 

|<<prebuilt-rule-8-14-22-launchdaemon-creation-or-modification-and-immediate-loading, LaunchDaemon Creation or Modification and Immediate Loading>> | Indicates the creation or modification of a launch daemon, which adversaries may use to repeatedly execute malicious payloads as part of persistence. | update | 108 

|<<prebuilt-rule-8-14-22-suspicious-crontab-creation-or-modification, Suspicious CronTab Creation or Modification>> | Identifies attempts to create or modify a crontab via a process that is not crontab (i.e python, osascript, etc.). This activity should not be highly prevalent and could indicate the use of cron as a persistence mechanism by a threat actor. | update | 108 

|<<prebuilt-rule-8-14-22-emond-rules-creation-or-modification, Emond Rules Creation or Modification>> | Identifies the creation or modification of the Event Monitor Daemon (emond) rules. Adversaries may abuse this service by writing a rule to execute commands when a defined event occurs, such as system start up or user authentication. | update | 109 

|<<prebuilt-rule-8-14-22-suspicious-emond-child-process, Suspicious Emond Child Process>> | Identifies the execution of a suspicious child process of the Event Monitor Daemon (emond). Adversaries may abuse this service by writing a rule to execute commands when a defined event occurs, such as system start up or user authentication. | update | 109 

|<<prebuilt-rule-8-14-22-creation-of-hidden-launch-agent-or-daemon, Creation of Hidden Launch Agent or Daemon>> | Identifies the creation of a hidden launch agent or daemon. An adversary may establish persistence by installing a new launch agent or daemon which executes at login. | update | 109 

|<<prebuilt-rule-8-14-22-finder-sync-plugin-registered-and-enabled, Finder Sync Plugin Registered and Enabled>> | Finder Sync plugins enable users to extend Finder’s functionality by modifying the user interface. Adversaries may abuse this feature by adding a rogue Finder Plugin to repeatedly execute malicious payloads for persistence. | update | 208 

|<<prebuilt-rule-8-14-22-persistence-via-folder-action-script, Persistence via Folder Action Script>> | Detects modification of a Folder Action script. A Folder Action script is executed when the folder to which it is attached has items added or removed, or when its window is opened, closed, moved, or resized. Adversaries may abuse this feature to establish persistence by utilizing a malicious script. | update | 109 

|<<prebuilt-rule-8-14-22-persistence-via-login-or-logout-hook, Persistence via Login or Logout Hook>> | Identifies use of the Defaults command to install a login or logoff hook in MacOS. An adversary may abuse this capability to establish persistence in an environment by inserting code to be executed at login or logout. | update | 109 

|<<prebuilt-rule-8-14-22-sublime-plugin-or-application-script-modification, Sublime Plugin or Application Script Modification>> | Adversaries may create or modify the Sublime application plugins or scripts to execute a malicious payload each time the Sublime application is started. | update | 110 

|<<prebuilt-rule-8-14-22-unexpected-child-process-of-macos-screensaver-engine, Unexpected Child Process of macOS Screensaver Engine>> | Identifies when a child process is spawned by the screensaver engine process, which is consistent with an attacker's malicious payload being executed after the screensaver activated on the endpoint. An adversary can maintain persistence on a macOS endpoint by creating a malicious screensaver (.saver) file and configuring the screensaver plist file to execute code each time the screensaver is activated. | update | 109 

|<<prebuilt-rule-8-14-22-screensaver-plist-file-modified-by-unexpected-process, Screensaver Plist File Modified by Unexpected Process>> | Identifies when a screensaver plist file is modified by an unexpected process. An adversary can maintain persistence on a macOS endpoint by creating a malicious screensaver (.saver) file and configuring the screensaver plist file to execute code each time the screensaver is activated. | update | 109 

|<<prebuilt-rule-8-14-22-apple-scripting-execution-with-administrator-privileges, Apple Scripting Execution with Administrator Privileges>> | Identifies execution of the Apple script interpreter (osascript) without a password prompt and with administrator privileges. | update | 209 

|<<prebuilt-rule-8-14-22-potential-network-sweep-detected, Potential Network Sweep Detected>> | This rule identifies a potential network sweep. A network sweep is a method used by attackers to scan a target network, identifying active hosts, open ports, and available services to gather information on vulnerabilities and weaknesses. This reconnaissance helps them plan subsequent attacks and exploit potential entry points for unauthorized access, data theft, or other malicious activities. This rule proposes threshold logic to check for connection attempts from one source host to 100 or more destination hosts on commonly used network services. | update | 10 

|<<prebuilt-rule-8-14-22-potential-network-scan-detected, Potential Network Scan Detected>> | This rule identifies a potential port scan. A port scan is a method utilized by attackers to systematically scan a target system or network for open ports, allowing them to identify available services and potential vulnerabilities. By mapping out the open ports, attackers can gather critical information to plan and execute targeted attacks, gaining unauthorized access, compromising security, and potentially leading to data breaches, unauthorized control, or further exploitation of the targeted system or network. This rule proposes threshold logic to check for connection attempts from one source host to 250 or more destination ports. | update | 9 

|<<prebuilt-rule-8-14-22-potential-syn-based-port-scan-detected, Potential SYN-Based Port Scan Detected>> | This rule identifies a potential SYN-Based port scan. A SYN port scan is a technique employed by attackers to scan a target network for open ports by sending SYN packets to multiple ports and observing the response. Attackers use this method to identify potential entry points or services that may be vulnerable to exploitation, allowing them to launch targeted attacks or gain unauthorized access to the system or network, compromising its security and potentially leading to data breaches or further malicious activities. This rule proposes threshold logic to check for connection attempts from one source host to 250 or more destination ports using 2 or less packets per port. | update | 10 

|<<prebuilt-rule-8-14-22-smb-connections-via-lolbin-or-untrusted-process, SMB Connections via LOLBin or Untrusted Process>> | Identifies potentially suspicious processes that are not trusted or living-off-the-land binaries (LOLBin) making Server Message Block (SMB) network connections over port 445. Windows File Sharing is typically implemented over SMB, which communicates between hosts using port 445. Legitimate connections are generally established by the kernel (PID 4). This rule helps to detect processes that might be port scanners, exploits, or user-level processes attempting lateral movement within the network by leveraging SMB connections. | update | 114 

|<<prebuilt-rule-8-14-22-remote-execution-via-file-shares, Remote Execution via File Shares>> | Identifies the execution of a file that was created by the virtual system process. This may indicate lateral movement via network file shares. | update | 117 

|==============================================
