[[prebuilt-rule-8-12-15-rapid7-threat-command-cves-correlation]]
=== Rapid7 Threat Command CVEs Correlation

This rule is triggered when CVEs collected from the Rapid7 Threat Command Integration have a match against vulnerabilities that were found in the customer environment.

*Rule type*: threat_match

*Rule indices*: 

* auditbeat-*
* endgame-*
* filebeat-*
* logs-*
* packetbeat-*
* winlogbeat-*

*Severity*: critical

*Risk score*: 99

*Runs every*: 30m

*Searches indices from*: now-35m ({ref}/common-options.html#date-math[Date Math format], see also <<rule-schedule, `Additional look-back time`>>)

*Maximum alerts per execution*: 10000

*References*: 

* https://www.elastic.co/guide/en/beats/filebeat/current/filebeat-module-threatintel.html
* https://docs.elastic.co/integrations/ti_rapid7_threat_command

*Tags*: 

* OS: Windows
* Data Source: Elastic Endgame
* Data Source: Windows
* Data Source: Network
* Data Source: Rapid7 Threat Command
* Rule Type: Threat Match
* Resources: Investigation Guide
* Use Case: Vulnerability
* Use Case: Asset Visibility
* Use Case: Continuous Monitoring

*Version*: 1

*Rule authors*: 

* Elastic

*Rule license*: Elastic License v2


==== Investigation guide



*Triage and Analysis*



*Investigating Rapid7 Threat Command CVEs Correlation*


Rapid7 Threat Command CVEs Correlation rule allows matching CVEs from user indices within the vulnerabilities collected from Rapid7 Threat Command integrations.

The matches will be based on the latest values of CVEs from the last 180 days. So it's essential to validate the data and review the results by investigating the associated activity to determine if it requires further investigation.

If a vulnerability matches a local observation, the following enriched fields will be generated to identify the vulnerability, field, and type matched.

- `threat.indicator.matched.atomic` - this identifies the atomic vulnerability that matched the local observation
- `threat.indicator.matched.field` - this identifies the vulnerability field that matched the local observation
- `threat.indicator.matched.type` - this identifies the vulnerability type that matched the local observation

Additional investigation can be done by reviewing the source of the activity and considering the history of the vulnerability that was matched. This can help understand if the activity is related to legitimate behavior.

- Investigation can be validated and reviewed based on the data that was matched and by viewing the source of that activity.
- Consider the history of the vulnerability that was matched. Has it happened before? Is it happening on multiple machines? These kinds of questions can help understand if the activity is related to legitimate behavior.
- Consider the user and their role within the company: is this something related to their job or work function?


==== Setup




*Setup*


This rule needs threat intelligence indicators to work.
Threat intelligence indicators can be collected using an https://www.elastic.co/guide/en/security/current/es-threat-intel-integrations.html#agent-ti-integration[Elastic Agent integration],
the https://www.elastic.co/guide/en/security/current/es-threat-intel-integrations.html#ti-mod-integration[Threat Intel module],
or a https://www.elastic.co/guide/en/security/current/es-threat-intel-integrations.html#custom-ti-integration[custom integration].

More information can be found https://www.elastic.co/guide/en/security/current/es-threat-intel-integrations.html[here].


*Max Signals*


This rule is configured to generate more **Max alerts per run** than the default 1000 alerts per run set for all rules. This is to ensure that it captures as many alerts as possible.

**IMPORTANT:** The rule's **Max alerts per run** setting can be superseded by the `xpack.alerting.rules.run.alerts.max` Kibana config setting, which determines the maximum alerts generated by _any_ rule in the Kibana alerting framework. For example, if `xpack.alerting.rules.run.alerts.max` is set to 1000, this rule will still generate no more than 1000 alerts even if its own **Max alerts per run** is set higher.

To make sure this rule can generate as many alerts as it's configured in its own **Max alerts per run** setting, increase the `xpack.alerting.rules.run.alerts.max` system setting accordingly.

**NOTE:** Changing `xpack.alerting.rules.run.alerts.max` is not possible in Serverless projects.


==== Rule query


[source, js]
----------------------------------
vulnerability.id : *

----------------------------------
