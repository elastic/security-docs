[[prebuilt-rule-8-4-1-prebuilt-rules-8-4-1-summary]]
[role="xpack"]
== Update v8.4.1

This section lists all updates associated with version 8.4.1 of the Fleet integration *Prebuilt Security Detection Rules*.


[width="100%",options="header"]
|==============================================
|Rule |Description |Status |Version

|<<prebuilt-rule-8-4-1-potential-non-standard-port-ssh-connection, Potential Non-Standard Port SSH connection>> | Identifies potentially malicious processes communicating via a port paring typically not associated with SSH. For example, SSH over port 2200 or port 2222 as opposed to the traditional port 22. Adversaries may make changes to the standard port a protocol uses to bypass filtering or muddle analysis/parsing of network data. | new | 1 

|<<prebuilt-rule-8-4-1-masquerading-space-after-filename, Masquerading Space After Filename>> | This rules identifies a process created from an executable with a space appended to the end of the filename. This may indicate an attempt to masquerade a malicious file as benign to gain user execution. When a space is added to the end of certain files, the OS will execute the file according to it's true filetype instead of it's extension. Adversaries can hide a program's true filetype by changing the extension of the file. They can then add a space to the end of the name so that the OS automatically executes the file when it's double-clicked. | new | 1 

|<<prebuilt-rule-8-4-1-multiple-alerts-in-different-att-ck-tactics-on-a-single-host, Multiple Alerts in Different ATT&CK Tactics on a Single Host>> | This rule uses alert data to determine when multiple alerts in different phases of an attack involving the same host are triggered. Analysts can use this to prioritize triage and response, as these hosts are more likely to be compromised. | new | 1 

|<<prebuilt-rule-8-4-1-aws-kms-customer-managed-key-disabled-or-scheduled-for-deletion, AWS KMS Customer Managed Key Disabled or Scheduled for Deletion>> | Identifies attempts to disable or schedule the deletion of an AWS KMS Customer Managed Key (CMK). Deleting an AWS KMS key is destructive and potentially dangerous. It deletes the key material and all metadata associated with the KMS key and is irreversible. After a KMS key is deleted, the data that was encrypted under that KMS key can no longer be decrypted, which means that data becomes unrecoverable. | new | 1 

|<<prebuilt-rule-8-4-1-kubernetes-denied-service-account-request, Kubernetes Denied Service Account Request>> | This rule detects when a service account makes an unauthorized request for resources from the API server. Service accounts follow a very predictable pattern of behavior. A service account should never send an unauthorized request to the API server. This behavior is likely an indicator of compromise or of a problem within the cluster. An adversary may have gained access to credentials/tokens and this could be an attempt to access or create resources to facilitate further movement or execution within the cluster. | new | 2 

|<<prebuilt-rule-8-4-1-kubernetes-anonymous-request-authorized, Kubernetes Anonymous Request Authorized>> | This rule detects when an unauthenticated user request is authorized within the cluster. Attackers may attempt to use anonymous accounts to gain initial access to the cluster or to avoid attribution of their activities within the cluster. This rule excludes the /healthz, /livez and /readyz endpoints which are commonly accessed anonymously. | new | 2 

|<<prebuilt-rule-8-4-1-kubernetes-container-created-with-excessive-linux-capabilities, Kubernetes Container Created with Excessive Linux Capabilities>> | This rule detects a container deployed with one or more dangerously permissive Linux capabilities. An attacker with the ability to deploy a container with added capabilities could use this for further execution, lateral movement, or privilege escalation within a cluster. The capabilities detected in this rule have been used in container escapes to the host machine. | new | 1 

|<<prebuilt-rule-8-4-1-kubernetes-suspicious-assignment-of-controller-service-account, Kubernetes Suspicious Assignment of Controller Service Account>> | This rule detects a request to attach a controller service account to an existing or new pod running in the kube-system namespace. By default, controllers running as part of the API Server utilize admin-equivalent service accounts hosted in the kube-system namespace. Controller service accounts aren't normally assigned to running pods and could indicate adversary behavior within the cluster. An attacker that can create or modify pods or pod controllers in the kube-system namespace, can assign one of these admin-equivalent service accounts to a pod and abuse their powerful token to escalate privileges and gain complete cluster control. | new | 3 

|<<prebuilt-rule-8-4-1-reverse-shell-created-via-named-pipe, Reverse Shell Created via Named Pipe>> | Identifies a reverse shell via the abuse of named pipes on Linux with the help of OpenSSL or Netcat. First in, first out (FIFO) files are special files for reading and writing to by Linux processes. For this to work, a named pipe is created and passed to a Linux shell where the use of a network connection tool such as Netcat or OpenSSL has been established. The stdout and stderr are captured in the named pipe from the network connection and passed back to the shell for execution. | new | 1 

|<<prebuilt-rule-8-4-1-access-to-a-sensitive-ldap-attribute, Access to a Sensitive LDAP Attribute>> | Identify access to sensitive Active Directory object attributes that contains credentials and decryption keys such as unixUserPassword, ms-PKI-AccountCredentials and msPKI-CredentialRoamingTokens. | new | 1 

|<<prebuilt-rule-8-4-1-wireless-credential-dumping-using-netsh-command, Wireless Credential Dumping using Netsh Command>> | Identifies attempts to dump Wireless saved access keys in clear text using the Windows built-in utility Netsh. | new | 1 

|<<prebuilt-rule-8-4-1-local-account-tokenfilter-policy-disabled, Local Account TokenFilter Policy Disabled>> | Identifies registry modification to the LocalAccountTokenFilterPolicy policy. If this value exists (which doesn't by default) and is set to 1, then remote connections from all local members of Administrators are granted full high-integrity tokens during negotiation. | new | 1 

|<<prebuilt-rule-8-4-1-system-information-discovery-via-windows-command-shell, System Information Discovery via Windows Command Shell>> | Identifies the execution of discovery commands to enumerate system info or files and folders using the Windows Command Shell. | new | 1 

|<<prebuilt-rule-8-4-1-remote-windows-service-installed, Remote Windows Service Installed>> | Identifies a network logon followed by Windows service creation with same LogonId. This could be indicative of lateral movement, but will be noisy if commonly done by administrators." | new | 1 

|<<prebuilt-rule-8-4-1-persistence-via-powershell-profile, Persistence via PowerShell profile>> | Identifies the creation or modification of a PowerShell profile. PowerShell profile is a script that is executed when PowerShell starts to customize the user environment, which can be abused by attackers to persist in a environment where PowerShell is common. | new | 1 

|<<prebuilt-rule-8-4-1-suspicious-service-was-installed-in-the-system, Suspicious service was installed in the system>> | Identifies the creation of a new Windows service with suspicious Service command values. Windows services typically run as SYSTEM and can be used for privilege escalation and persistence. | new | 1 

|<<prebuilt-rule-8-4-1-modification-of-the-mspkiaccountcredentials, Modification of the msPKIAccountCredentials>> | Identify the modification of the msPKIAccountCredentials attribute in an Active Directory User Object. Attackers can abuse the credentials roaming feature to overwrite an arbitrary file for privilege escalation. ms-PKI-AccountCredentials contains binary large objects (BLOBs) of encrypted credential objects from the credential manager store, private keys, certificates, and certificate requests. | new | 1 

|<<prebuilt-rule-8-4-1-sedebugprivilege-enabled-by-a-suspicious-process, SeDebugPrivilege Enabled by a Suspicious Process>> | Identifies the creation of a process running as SYSTEM and impersonating a Windows core binary privileges. Adversaries may create a new process with a different token to escalate privileges and bypass access controls. | new | 1 

|<<prebuilt-rule-8-4-1-privileges-elevation-via-parent-process-pid-spoofing, Privileges Elevation via Parent Process PID Spoofing>> | Identifies parent process spoofing used to create an elevated child process. Adversaries may spoof the parent process identifier (PPID) of a new process to evade process-monitoring defenses or to elevate privileges. | new | 1 

|<<prebuilt-rule-8-4-1-process-created-with-an-elevated-token, Process Created with an Elevated Token>> | Identifies the creation of a process running as SYSTEM and impersonating a Windows core binary privileges. Adversaries may create a new process with a different token to escalate privileges and bypass access controls. | new | 1 

|<<prebuilt-rule-8-4-1-security-software-discovery-via-grep, Security Software Discovery via Grep>> | Identifies the use of the grep command to discover known third-party macOS and Linux security tools, such as Antivirus or Host Firewall details. | update | 102 

|<<prebuilt-rule-8-4-1-potential-reverse-shell-activity-via-terminal, Potential Reverse Shell Activity via Terminal>> | Identifies the execution of a shell process with suspicious arguments which may be indicative of reverse shell activity. | update | 102 

|<<prebuilt-rule-8-4-1-suspicious-java-child-process, Suspicious JAVA Child Process>> | Identifies suspicious child processes of the Java interpreter process. This may indicate an attempt to execute a malicious JAR file or an exploitation attempt via a JAVA specific vulnerability. | update | 102 

|<<prebuilt-rule-8-4-1-potential-java-jndi-exploitation-attempt, Potential JAVA/JNDI Exploitation Attempt>> | Identifies an outbound network connection by JAVA to LDAP, RMI or DNS standard ports followed by a suspicious JAVA child processes. This may indicate an attempt to exploit a JAVA/NDI (Java Naming and Directory Interface) injection vulnerability. | update | 101 

|<<prebuilt-rule-8-4-1-hosts-file-modified, Hosts File Modified>> | The hosts file on endpoints is used to control manual IP address to hostname resolutions. The hosts file is the first point of lookup for DNS hostname resolution so if adversaries can modify the endpoint hosts file, they can route traffic to malicious infrastructure. This rule detects modifications to the hosts file on Microsoft Windows, Linux (Ubuntu or RHEL) and macOS systems. | update | 102 

|<<prebuilt-rule-8-4-1-threat-intel-filebeat-module-v8-x-indicator-match, Threat Intel Filebeat Module (v8.x) Indicator Match>> | This rule is triggered when indicators from the Threat Intel Filebeat module (v8.x) has a match against local file or network observations. | update | 102 

|<<prebuilt-rule-8-4-1-threat-intel-indicator-match, Threat Intel Indicator Match>> | This rule is triggered when indicators from the Threat Intel integrations have a match against local file or network observations. | update | 102 

|<<prebuilt-rule-8-4-1-aws-iam-brute-force-of-assume-role-policy, AWS IAM Brute Force of Assume Role Policy>> | Identifies a high number of failed attempts to assume an AWS Identity and Access Management (IAM) role. IAM roles are used to delegate access to users or services. An adversary may attempt to enumerate IAM roles in order to determine if a role exists before attempting to assume or hijack the discovered role. | update | 103 

|<<prebuilt-rule-8-4-1-aws-iam-user-addition-to-group, AWS IAM User Addition to Group>> | Identifies the addition of a user to a specified group in AWS Identity and Access Management (IAM). | update | 103 

|<<prebuilt-rule-8-4-1-aws-access-secret-in-secrets-manager, AWS Access Secret in Secrets Manager>> | An adversary may attempt to access the secrets in secrets manager to steal certificates, credentials, or other sensitive material | update | 103 

|<<prebuilt-rule-8-4-1-aws-cloudtrail-log-deleted, AWS CloudTrail Log Deleted>> | Identifies the deletion of an AWS log trail. An adversary may delete trails in an attempt to evade defenses. | update | 103 

|<<prebuilt-rule-8-4-1-aws-cloudtrail-log-suspended, AWS CloudTrail Log Suspended>> | Identifies suspending the recording of AWS API calls and log file delivery for the specified trail. An adversary may suspend trails in an attempt to evade defenses. | update | 103 

|<<prebuilt-rule-8-4-1-aws-cloudwatch-alarm-deletion, AWS CloudWatch Alarm Deletion>> | Identifies the deletion of an AWS CloudWatch alarm. An adversary may delete alarms in an attempt to evade defenses. | update | 103 

|<<prebuilt-rule-8-4-1-aws-config-resource-deletion, AWS Config Resource Deletion>> | Identifies attempts to delete an AWS Config Service resource. An adversary may tamper with Config services in order to reduce visibility into the security posture of an account and / or its workload instances. | update | 103 

|<<prebuilt-rule-8-4-1-aws-vpc-flow-logs-deletion, AWS VPC Flow Logs Deletion>> | Identifies the deletion of one or more flow logs in AWS Elastic Compute Cloud (EC2). An adversary may delete flow logs in an attempt to evade defenses. | update | 103 

|<<prebuilt-rule-8-4-1-aws-ec2-snapshot-activity, AWS EC2 Snapshot Activity>> | An attempt was made to modify AWS EC2 snapshot attributes. Snapshots are sometimes shared by threat actors in order to exfiltrate bulk data from an EC2 fleet. If the permissions were modified, verify the snapshot was not shared with an unauthorized or unexpected AWS account. | update | 103 

|<<prebuilt-rule-8-4-1-aws-cloudtrail-log-updated, AWS CloudTrail Log Updated>> | Identifies an update to an AWS log trail setting that specifies the delivery of log files. | update | 103 

|<<prebuilt-rule-8-4-1-aws-cloudwatch-log-group-deletion, AWS CloudWatch Log Group Deletion>> | Identifies the deletion of a specified AWS CloudWatch log group. When a log group is deleted, all the archived log events associated with the log group are also permanently deleted. | update | 103 

|<<prebuilt-rule-8-4-1-aws-cloudwatch-log-stream-deletion, AWS CloudWatch Log Stream Deletion>> | Identifies the deletion of an AWS CloudWatch log stream, which permanently deletes all associated archived log events with the stream. | update | 103 

|<<prebuilt-rule-8-4-1-aws-iam-deactivation-of-mfa-device, AWS IAM Deactivation of MFA Device>> | Identifies the deactivation of a specified multi-factor authentication (MFA) device and removes it from association with the user name for which it was originally enabled. In AWS Identity and Access Management (IAM), a device must be deactivated before it can be deleted. | update | 103 

|<<prebuilt-rule-8-4-1-aws-management-console-root-login, AWS Management Console Root Login>> | Identifies a successful login to the AWS Management Console by the Root user. | update | 103 

|<<prebuilt-rule-8-4-1-aws-execution-via-system-manager, AWS Execution via System Manager>> | Identifies the execution of commands and scripts via System Manager. Execution methods such as RunShellScript, RunPowerShellScript, and alike can be abused by an authenticated attacker to install a backdoor or to interact with a compromised instance via reverse-shell using system only commands. | update | 103 

|<<prebuilt-rule-8-4-1-spike-in-aws-error-messages, Spike in AWS Error Messages>> | A machine learning job detected a significant spike in the rate of a particular error in the CloudTrail messages. Spikes in error messages may accompany attempts at privilege escalation, lateral movement, or discovery. | update | 102 

|<<prebuilt-rule-8-4-1-rare-aws-error-code, Rare AWS Error Code>> | A machine learning job detected an unusual error in a CloudTrail message. These can be byproducts of attempted or successful persistence, privilege escalation, defense evasion, discovery, lateral movement, or collection. | update | 102 

|<<prebuilt-rule-8-4-1-unusual-city-for-an-aws-command, Unusual City For an AWS Command>> | A machine learning job detected AWS command activity that, while not inherently suspicious or abnormal, is sourcing from a geolocation (city) that is unusual for the command. This can be the result of compromised credentials or keys being used by a threat actor in a different geography than the authorized user(s). | update | 102 

|<<prebuilt-rule-8-4-1-unusual-country-for-an-aws-command, Unusual Country For an AWS Command>> | A machine learning job detected AWS command activity that, while not inherently suspicious or abnormal, is sourcing from a geolocation (country) that is unusual for the command. This can be the result of compromised credentials or keys being used by a threat actor in a different geography than the authorized user(s). | update | 102 

|<<prebuilt-rule-8-4-1-unusual-aws-command-for-a-user, Unusual AWS Command for a User>> | A machine learning job detected an AWS API command that, while not inherently suspicious or abnormal, is being made by a user context that does not normally use the command. This can be the result of compromised credentials or keys as someone uses a valid account to persist, move laterally, or exfiltrate data. | update | 102 

|<<prebuilt-rule-8-4-1-aws-root-login-without-mfa, AWS Root Login Without MFA>> | Identifies attempts to login to AWS as the root user without using multi-factor authentication (MFA). Amazon AWS best practices indicate that the root user should be protected by MFA. | update | 103 

|<<prebuilt-rule-8-4-1-aws-iam-assume-role-policy-update, AWS IAM Assume Role Policy Update>> | Identifies attempts to modify an AWS IAM Assume Role Policy. An adversary may attempt to modify the AssumeRolePolicy of a misconfigured role in order to gain the privileges of that role. | update | 103 

|<<prebuilt-rule-8-4-1-azure-key-vault-modified, Azure Key Vault Modified>> | Identifies modifications to a Key Vault in Azure. The Key Vault is a service that safeguards encryption keys and secrets like certificates, connection strings, and passwords. Because this data is sensitive and business critical, access to key vaults should be secured to allow only authorized applications and users. | update | 102 

|<<prebuilt-rule-8-4-1-azure-service-principal-addition, Azure Service Principal Addition>> | Identifies when a new service principal is added in Azure. An application, hosted service, or automated tool that accesses or modifies resources needs an identity created. This identity is known as a service principal. For security reasons, it's always recommended to use service principals with automated tools rather than allowing them to log in with a user identity. | update | 103 

|<<prebuilt-rule-8-4-1-azure-active-directory-high-risk-sign-in, Azure Active Directory High Risk Sign-in>> | Identifies high risk Azure Active Directory (AD) sign-ins by leveraging Microsoft's Identity Protection machine learning and heuristics. Identity Protection categorizes risk into three tiers: low, medium, and high. While Microsoft does not provide specific details about how risk is calculated, each level brings higher confidence that the user or sign-in is compromised. | update | 103 

|<<prebuilt-rule-8-4-1-azure-active-directory-high-risk-user-sign-in-heuristic, Azure Active Directory High Risk User Sign-in Heuristic>> | Identifies high risk Azure Active Directory (AD) sign-ins by leveraging Microsoft Identity Protection machine learning and heuristics. | update | 103 

|<<prebuilt-rule-8-4-1-azure-active-directory-powershell-sign-in, Azure Active Directory PowerShell Sign-in>> | Identifies a sign-in using the Azure Active Directory PowerShell module. PowerShell for Azure Active Directory allows for managing settings from the command line, which is intended for users who are members of an admin role. | update | 103 

|<<prebuilt-rule-8-4-1-possible-consent-grant-attack-via-azure-registered-application, Possible Consent Grant Attack via Azure-Registered Application>> | Detects when a user grants permissions to an Azure-registered application or when an administrator grants tenant-wide permissions to an application. An adversary may create an Azure-registered application that requests access to data such as contact information, email, or documents. | update | 103 

|<<prebuilt-rule-8-4-1-azure-privilege-identity-management-role-modified, Azure Privilege Identity Management Role Modified>> | Azure Active Directory (AD) Privileged Identity Management (PIM) is a service that enables you to manage, control, and monitor access to important resources in an organization. PIM can be used to manage the built-in Azure resource roles such as Global Administrator and Application Administrator. An adversary may add a user to a PIM role in order to maintain persistence in their target's environment or modify a PIM role to weaken their target's security controls. | update | 103 

|<<prebuilt-rule-8-4-1-multi-factor-authentication-disabled-for-an-azure-user, Multi-Factor Authentication Disabled for an Azure User>> | Identifies when multi-factor authentication (MFA) is disabled for an Azure user account. An adversary may disable MFA for a user account in order to weaken the authentication requirements for the account. | update | 103 

|<<prebuilt-rule-8-4-1-google-workspace-mfa-enforcement-disabled, Google Workspace MFA Enforcement Disabled>> | Detects when multi-factor authentication (MFA) enforcement is disabled for Google Workspace users. An adversary may disable MFA enforcement in order to weaken an organization’s security controls. | update | 103 

|<<prebuilt-rule-8-4-1-kubernetes-suspicious-self-subject-review, Kubernetes Suspicious Self-Subject Review>> | This rule detects when a service account or node attempts to enumerate their own permissions via the selfsubjectaccessreview or selfsubjectrulesreview APIs. This is highly unusual behavior for non-human identities like service accounts and nodes. An adversary may have gained access to credentials/tokens and this could be an attempt to determine what privileges they have to facilitate further movement or execution within the cluster. | update | 200 

|<<prebuilt-rule-8-4-1-kubernetes-user-exec-into-pod, Kubernetes User Exec into Pod>> | This rule detects a user attempt to establish a shell session into a pod using the 'exec' command. Using the 'exec' command in a pod allows a user to establish a temporary shell session and execute any process/commands in the pod. An adversary may call bash to gain a persistent interactive shell which will allow access to any data the pod has permissions to, including secrets. | update | 200 

|<<prebuilt-rule-8-4-1-kubernetes-exposed-service-created-with-type-nodeport, Kubernetes Exposed Service Created With Type NodePort>> | This rule detects an attempt to create or modify a service as type NodePort. The NodePort service allows a user to externally expose a set of labeled pods to the internet. This creates an open port on every worker node in the cluster that has a pod for that service. When external traffic is received on that open port, it directs it to the specific pod through the service representing it. A malicious user can configure a service as type Nodeport in order to intercept traffic from other pods or nodes, bypassing firewalls and other network security measures configured for load balancers within a cluster. This creates a direct method of communication between the cluster and the outside world, which could be used for more malicious behavior and certainly widens the attack surface of your cluster. | update | 200 

|<<prebuilt-rule-8-4-1-kubernetes-pod-created-with-hostipc, Kubernetes Pod Created With HostIPC>> | This rule detects an attempt to create or modify a pod using the host IPC namespace. This gives access to data used by any pod that also use the hosts IPC namespace. If any process on the host or any processes in a pod uses the hosts inter-process communication mechanisms (shared memory, semaphore arrays, message queues, etc.), an attacker can read/write to those same mechanisms. They may look for files in /dev/shm or use ipcs to check for any IPC facilities being used. | update | 200 

|<<prebuilt-rule-8-4-1-kubernetes-pod-created-with-hostnetwork, Kubernetes Pod Created With HostNetwork>> | This rules detects an attempt to create or modify a pod attached to the host network. HostNetwork allows a pod to use the node network namespace. Doing so gives the pod access to any service running on localhost of the host. An attacker could use this access to snoop on network activity of other pods on the same node or bypass restrictive network policies applied to its given namespace. | update | 200 

|<<prebuilt-rule-8-4-1-kubernetes-pod-created-with-hostpid, Kubernetes Pod Created With HostPID>> | This rule detects an attempt to create or modify a pod attached to the host PID namespace. HostPID allows a pod to access all the processes running on the host and could allow an attacker to take malicious action. When paired with ptrace this can be used to escalate privileges outside of the container. When paired with a privileged container, the pod can see all of the processes on the host. An attacker can enter the init system (PID 1) on the host. From there, they could execute a shell and continue to escalate privileges to root. | update | 200 

|<<prebuilt-rule-8-4-1-kubernetes-pod-created-with-a-sensitive-hostpath-volume, Kubernetes Pod created with a Sensitive hostPath Volume>> | This rule detects when a pod is created with a sensitive volume of type hostPath. A hostPath volume type mounts a sensitive file or folder from the node to the container. If the container gets compromised, the attacker can use this mount for gaining access to the node. There are many ways a container with unrestricted access to the host filesystem can escalate privileges, including reading data from other containers, and accessing tokens of more privileged pods. | update | 200 

|<<prebuilt-rule-8-4-1-kubernetes-privileged-pod-created, Kubernetes Privileged Pod Created>> | This rule detects when a user creates a pod/container running in privileged mode. A highly privileged container has access to the node's resources and breaks the isolation between containers. If compromised, an attacker can use the privileged container to gain access to the underlying host. Gaining access to the host may provide the adversary with the opportunity to achieve follow-on objectives, such as establishing persistence, moving laterally within the environment, or setting up a command and control channel on the host. | update | 200 

|<<prebuilt-rule-8-4-1-attempted-bypass-of-okta-mfa, Attempted Bypass of Okta MFA>> | Detects attempts to bypass Okta multi-factor authentication (MFA). An adversary may attempt to bypass the Okta MFA policies configured for an organization in order to obtain unauthorized access to an application. | update | 102 

|<<prebuilt-rule-8-4-1-attempts-to-brute-force-an-okta-user-account, Attempts to Brute Force an Okta User Account>> | Identifies when an Okta user account is locked out 3 times within a 3 hour window. An adversary may attempt a brute force or password spraying attack to obtain unauthorized access to user accounts. The default Okta authentication policy ensures that a user account is locked out after 10 failed authentication attempts. | update | 102 

|<<prebuilt-rule-8-4-1-potential-abuse-of-repeated-mfa-push-notifications, Potential Abuse of Repeated MFA Push Notifications>> | Detects when an attacker abuses the Multi-Factor authentication mechanism by repeatedly issuing login requests until the user eventually accepts the Okta push notification. An adversary may attempt to bypass the Okta MFA policies configured for an organization to obtain unauthorized access. | update | 101 

|<<prebuilt-rule-8-4-1-okta-brute-force-or-password-spraying-attack, Okta Brute Force or Password Spraying Attack>> | Identifies a high number of failed Okta user authentication attempts from a single IP address, which could be indicative of a brute force or password spraying attack. An adversary may attempt a brute force or password spraying attack to obtain unauthorized access to user accounts. | update | 102 

|<<prebuilt-rule-8-4-1-okta-user-session-impersonation, Okta User Session Impersonation>> | A user has initiated a session impersonation granting them access to the environment with the permissions of the user they are impersonating. This would likely indicate Okta administrative access and should only ever occur if requested and expected. | update | 102 

|<<prebuilt-rule-8-4-1-attempt-to-deactivate-an-okta-network-zone, Attempt to Deactivate an Okta Network Zone>> | Detects attempts to deactivate an Okta network zone. Okta network zones can be configured to limit or restrict access to a network based on IP addresses or geolocations. An adversary may attempt to modify, delete, or deactivate an Okta network zone in order to remove or weaken an organization's security controls. | update | 102 

|<<prebuilt-rule-8-4-1-attempt-to-delete-an-okta-network-zone, Attempt to Delete an Okta Network Zone>> | Detects attempts to delete an Okta network zone. Okta network zones can be configured to limit or restrict access to a network based on IP addresses or geolocations. An adversary may attempt to modify, delete, or deactivate an Okta network zone in order to remove or weaken an organization's security controls. | update | 102 

|<<prebuilt-rule-8-4-1-attempt-to-deactivate-an-okta-policy, Attempt to Deactivate an Okta Policy>> | Detects attempts to deactivate an Okta policy. An adversary may attempt to deactivate an Okta policy in order to weaken an organization's security controls. For example, an adversary may attempt to deactivate an Okta multi-factor authentication (MFA) policy in order to weaken the authentication requirements for user accounts. | update | 102 

|<<prebuilt-rule-8-4-1-attempt-to-deactivate-an-okta-policy-rule, Attempt to Deactivate an Okta Policy Rule>> | Detects attempts to deactivate a rule within an Okta policy. An adversary may attempt to deactivate a rule within an Okta policy in order to remove or weaken an organization's security controls. | update | 102 

|<<prebuilt-rule-8-4-1-attempt-to-delete-an-okta-policy, Attempt to Delete an Okta Policy>> | Detects attempts to delete an Okta policy. An adversary may attempt to delete an Okta policy in order to weaken an organization's security controls. For example, an adversary may attempt to delete an Okta multi-factor authentication (MFA) policy in order to weaken the authentication requirements for user accounts. | update | 102 

|<<prebuilt-rule-8-4-1-attempt-to-delete-an-okta-policy-rule, Attempt to Delete an Okta Policy Rule>> | Detects attempts to delete a rule within an Okta policy. An adversary may attempt to delete an Okta policy rule in order to weaken an organization's security controls. | update | 102 

|<<prebuilt-rule-8-4-1-attempt-to-modify-an-okta-network-zone, Attempt to Modify an Okta Network Zone>> | Detects attempts to modify an Okta network zone. Okta network zones can be configured to limit or restrict access to a network based on IP addresses or geolocations. An adversary may attempt to modify, delete, or deactivate an Okta network zone in order to remove or weaken an organization's security controls. | update | 102 

|<<prebuilt-rule-8-4-1-attempt-to-modify-an-okta-policy, Attempt to Modify an Okta Policy>> | Detects attempts to modify an Okta policy. An adversary may attempt to modify an Okta policy in order to weaken an organization's security controls. For example, an adversary may attempt to modify an Okta multi-factor authentication (MFA) policy in order to weaken the authentication requirements for user accounts. | update | 102 

|<<prebuilt-rule-8-4-1-attempt-to-modify-an-okta-policy-rule, Attempt to Modify an Okta Policy Rule>> | Detects attempts to modify a rule within an Okta policy. An adversary may attempt to modify an Okta policy rule in order to weaken an organization's security controls. | update | 102 

|<<prebuilt-rule-8-4-1-high-number-of-okta-user-password-reset-or-unlock-attempts, High Number of Okta User Password Reset or Unlock Attempts>> | Identifies a high number of Okta user password reset or account unlock attempts. An adversary may attempt to obtain unauthorized access to Okta user accounts using these methods and attempt to blend in with normal activity in their target's environment and evade detection. | update | 102 

|<<prebuilt-rule-8-4-1-attempt-to-revoke-okta-api-token, Attempt to Revoke Okta API Token>> | Identifies attempts to revoke an Okta API token. An adversary may attempt to revoke or delete an Okta API token to disrupt an organization's business operations. | update | 102 

|<<prebuilt-rule-8-4-1-attempt-to-deactivate-an-okta-application, Attempt to Deactivate an Okta Application>> | Detects attempts to deactivate an Okta application. An adversary may attempt to modify, deactivate, or delete an Okta application in order to weaken an organization's security controls or disrupt their business operations. | update | 102 

|<<prebuilt-rule-8-4-1-attempt-to-delete-an-okta-application, Attempt to Delete an Okta Application>> | Detects attempts to delete an Okta application. An adversary may attempt to modify, deactivate, or delete an Okta application in order to weaken an organization's security controls or disrupt their business operations. | update | 102 

|<<prebuilt-rule-8-4-1-attempt-to-modify-an-okta-application, Attempt to Modify an Okta Application>> | Detects attempts to modify an Okta application. An adversary may attempt to modify, deactivate, or delete an Okta application in order to weaken an organization's security controls or disrupt their business operations. | update | 102 

|<<prebuilt-rule-8-4-1-possible-okta-dos-attack, Possible Okta DoS Attack>> | Detects possible Denial of Service (DoS) attacks against an Okta organization. An adversary may attempt to disrupt an organization's business operations by performing a DoS attack against its Okta service. | update | 102 

|<<prebuilt-rule-8-4-1-unauthorized-access-to-an-okta-application, Unauthorized Access to an Okta Application>> | Identifies unauthorized access attempts to Okta applications. | update | 102 

|<<prebuilt-rule-8-4-1-suspicious-activity-reported-by-okta-user, Suspicious Activity Reported by Okta User>> | Detects when a user reports suspicious activity for their Okta account. These events should be investigated, as they can help security teams identify when an adversary is attempting to gain access to their network. | update | 102 

|<<prebuilt-rule-8-4-1-threat-detected-by-okta-threatinsight, Threat Detected by Okta ThreatInsight>> | Detects when Okta ThreatInsight identifies a request from a malicious IP address. Investigating requests from IP addresses identified as malicious by Okta ThreatInsight can help security teams monitor for and respond to credential based attacks against their organization, such as brute force and password spraying attacks. | update | 102 

|<<prebuilt-rule-8-4-1-administrator-privileges-assigned-to-an-okta-group, Administrator Privileges Assigned to an Okta Group>> | Detects when an administrator role is assigned to an Okta group. An adversary may attempt to assign administrator privileges to an Okta group in order to assign additional permissions to compromised user accounts and maintain access to their target organization. | update | 102 

|<<prebuilt-rule-8-4-1-administrator-role-assigned-to-an-okta-user, Administrator Role Assigned to an Okta User>> | Identifies when an administrator role is assigned to an Okta user. An adversary may attempt to assign an administrator role to an Okta user in order to assign additional permissions to a user account and maintain access to their target's environment. | update | 102 

|<<prebuilt-rule-8-4-1-attempt-to-create-okta-api-token, Attempt to Create Okta API Token>> | Detects attempts to create an Okta API token. An adversary may create an Okta API token to maintain access to an organization's network while they work to achieve their objectives. An attacker may abuse an API token to execute techniques such as creating user accounts or disabling security rules or policies. | update | 102 

|<<prebuilt-rule-8-4-1-attempt-to-deactivate-mfa-for-an-okta-user-account, Attempt to Deactivate MFA for an Okta User Account>> | Detects attempts to deactivate multi-factor authentication (MFA) for an Okta user. An adversary may deactivate MFA for an Okta user account in order to weaken the authentication requirements for the account. | update | 102 

|<<prebuilt-rule-8-4-1-attempt-to-reset-mfa-factors-for-an-okta-user-account, Attempt to Reset MFA Factors for an Okta User Account>> | Detects attempts to reset an Okta user's enrolled multi-factor authentication (MFA) factors. An adversary may attempt to reset the MFA factors for an Okta user's account in order to register new MFA factors and abuse the account to blend in with normal activity in the victim's environment. | update | 102 

|<<prebuilt-rule-8-4-1-modification-or-removal-of-an-okta-application-sign-on-policy, Modification or Removal of an Okta Application Sign-On Policy>> | Detects attempts to modify or delete a sign on policy for an Okta application. An adversary may attempt to modify or delete the sign on policy for an Okta application in order to remove or weaken an organization's security controls. | update | 102 

|<<prebuilt-rule-8-4-1-system-log-file-deletion, System Log File Deletion>> | Identifies the deletion of sensitive Linux system logs. This may indicate an attempt to evade detection or destroy forensic evidence on a system. | update | 101 

|<<prebuilt-rule-8-4-1-abnormal-process-id-or-lock-file-created, Abnormal Process ID or Lock File Created>> | Identifies the creation of a Process ID (PID), lock or reboot file created in temporary file storage paradigm (tmpfs) directory /var/run. On Linux, the PID files typically hold the process ID to track previous copies running and manage other tasks. Certain Linux malware use the /var/run directory for holding data, executables and other tasks, disguising itself or these files as legitimate PID files. | update | 102 

|<<prebuilt-rule-8-4-1-file-transfer-or-listener-established-via-netcat, File Transfer or Listener Established via Netcat>> | A netcat process is engaging in network activity on a Linux host. Netcat is often used as a persistence mechanism by exporting a reverse shell or by serving a shell on a listening port. Netcat is also sometimes used for data exfiltration. | update | 102 

|<<prebuilt-rule-8-4-1-process-started-from-process-id-pid-file, Process Started from Process ID (PID) File>> | Identifies a new process starting from a process ID (PID), lock or reboot file within the temporary file storage paradigm (tmpfs) directory /var/run directory. On Linux, the PID files typically hold the process ID to track previous copies running and manage other tasks. Certain Linux malware use the /var/run directory for holding data, executables and other tasks, disguising itself or these files as legitimate PID files. | update | 101 

|<<prebuilt-rule-8-4-1-binary-executed-from-shared-memory-directory, Binary Executed from Shared Memory Directory>> | Identifies the execution of a binary by root in Linux shared memory directories: (/dev/shm/, /run/shm/, /var/run/, /var/lock/). This activity is to be considered highly abnormal and should be investigated. Threat actors have placed executables used for persistence on high-uptime servers in these directories as system backdoors. | update | 101 

|<<prebuilt-rule-8-4-1-high-number-of-process-terminations, High Number of Process Terminations>> | This rule identifies a high number (10) of process terminations via pkill from the same host within a short time period. | update | 102 

|<<prebuilt-rule-8-4-1-suspicious-file-creation-in-etc-for-persistence, Suspicious File Creation in /etc for Persistence>> | Detects the manual creation of files in specific etc directories, via user root, used by Linux malware to persist and elevate privileges on compromised systems. File creation in these directories should not be entirely common and could indicate a malicious binary or script installing persistence for long term access. | update | 101 

|<<prebuilt-rule-8-4-1-potential-shell-via-web-server, Potential Shell via Web Server>> | Identifies suspicious commands executed via a web server, which may suggest a vulnerability and remote shell access. | update | 102 

|<<prebuilt-rule-8-4-1-potential-shadow-file-read-via-command-line-utilities, Potential Shadow File Read via Command Line Utilities>> | Identifies access to the /etc/shadow file via the commandline using standard system utilities. After elevating privileges to root, threat actors may attempt to read or dump this file in order to gain valid credentials. They may utilize these to move laterally undetected and access additional resources. | update | 2 

|<<prebuilt-rule-8-4-1-creation-of-hidden-login-item-via-apple-script, Creation of Hidden Login Item via Apple Script>> | Identifies the execution of osascript to create a hidden login item. This may indicate an attempt to persist a malicious program while concealing its presence. | update | 101 

|<<prebuilt-rule-8-4-1-potential-persistence-via-login-hook, Potential Persistence via Login Hook>> | Identifies the creation or modification of the login window property list (plist). Adversaries may modify plist files to run a program during system boot or user login for persistence. | update | 101 

|<<prebuilt-rule-8-4-1-suspicious-powershell-script, Suspicious Powershell Script>> | A machine learning job detected a PowerShell script with unusual data characteristics, such as obfuscation, that may be a characteristic of malicious PowerShell script text blocks. | update | 101 

|<<prebuilt-rule-8-4-1-unusual-process-for-a-windows-host, Unusual Process For a Windows Host>> | Identifies rare processes that do not usually run on individual hosts, which can indicate execution of unauthorized services, malware, or persistence mechanisms. Processes are considered rare when they only run occasionally as compared with other processes running on the host. | update | 102 

|<<prebuilt-rule-8-4-1-accepted-default-telnet-port-connection, Accepted Default Telnet Port Connection>> | This rule detects network events that may indicate the use of Telnet traffic. Telnet is commonly used by system administrators to remotely control older or embedded systems using the command line shell. It should almost never be directly exposed to the Internet, as it is frequently targeted and exploited by threat actors as an initial access or backdoor vector. As a plain-text protocol, it may also expose usernames and passwords to anyone capable of observing the traffic. | update | 101 

|<<prebuilt-rule-8-4-1-cobalt-strike-command-and-control-beacon, Cobalt Strike Command and Control Beacon>> | Cobalt Strike is a threat emulation platform commonly modified and used by adversaries to conduct network attack and exploitation campaigns. This rule detects a network activity algorithm leveraged by Cobalt Strike implant beacons for command and control. | update | 101 

|<<prebuilt-rule-8-4-1-default-cobalt-strike-team-server-certificate, Default Cobalt Strike Team Server Certificate>> | This rule detects the use of the default Cobalt Strike Team Server TLS certificate. Cobalt Strike is software for Adversary Simulations and Red Team Operations which are security assessments that replicate the tactics and techniques of an advanced adversary in a network. Modifications to the Packetbeat configuration can be made to include MD5 and SHA256 hashing algorithms (the default is SHA1). See the References section for additional information on module configuration. | update | 101 

|<<prebuilt-rule-8-4-1-adversary-behavior-detected-elastic-endgame, Adversary Behavior - Detected - Elastic Endgame>> | Elastic Endgame detected an Adversary Behavior. Click the Elastic Endgame icon in the event.module column or the link in the rule.reference column for additional information. | update | 101 

|<<prebuilt-rule-8-4-1-exporting-exchange-mailbox-via-powershell, Exporting Exchange Mailbox via PowerShell>> | Identifies the use of the Exchange PowerShell cmdlet, New-MailBoxExportRequest, to export the contents of a primary mailbox or archive to a .pst file. Adversaries may target user email to collect sensitive information. | update | 102 

|<<prebuilt-rule-8-4-1-powershell-suspicious-script-with-audio-capture-capabilities, PowerShell Suspicious Script with Audio Capture Capabilities>> | Detects PowerShell scripts that can record audio, a common feature in popular post-exploitation tooling. | update | 102 

|<<prebuilt-rule-8-4-1-powershell-keylogging-script, PowerShell Keylogging Script>> | Detects the use of Win32 API Functions that can be used to capture user keystrokes in PowerShell scripts. Attackers use this technique to capture user input, looking for credentials and/or other valuable data. | update | 102 

|<<prebuilt-rule-8-4-1-powershell-suspicious-script-with-screenshot-capabilities, PowerShell Suspicious Script with Screenshot Capabilities>> | Detects PowerShell scripts that can take screenshots, which is a common feature in post-exploitation kits and remote access tools (RATs). | update | 102 

|<<prebuilt-rule-8-4-1-encrypting-files-with-winrar-or-7z, Encrypting Files with WinRar or 7z>> | Identifies use of WinRar or 7z to create an encrypted files. Adversaries will often compress and encrypt data in preparation for exfiltration. | update | 102 

|<<prebuilt-rule-8-4-1-network-connection-via-certutil, Network Connection via Certutil>> | Identifies certutil.exe making a network connection. Adversaries could abuse certutil.exe to download a certificate, or malware, from a remote URL. | update | 102 

|<<prebuilt-rule-8-4-1-connection-to-commonly-abused-web-services, Connection to Commonly Abused Web Services>> | Adversaries may implement command and control (C2) communications that use common web services to hide their activity. This attack technique is typically targeted at an organization and uses web services common to the victim network, which allows the adversary to blend into legitimate traffic activity. These popular services are typically targeted since they have most likely been used before compromise, which helps malicious traffic blend in. | update | 102 

|<<prebuilt-rule-8-4-1-potential-dns-tunneling-via-nslookup, Potential DNS Tunneling via NsLookup>> | This rule identifies a large number (15) of nslookup.exe executions with an explicit query type from the same host. This may indicate command and control activity utilizing the DNS protocol. | update | 102 

|<<prebuilt-rule-8-4-1-port-forwarding-rule-addition, Port Forwarding Rule Addition>> | Identifies the creation of a new port forwarding rule. An adversary may abuse this technique to bypass network segmentation restrictions. | update | 102 

|<<prebuilt-rule-8-4-1-potential-remote-desktop-tunneling-detected, Potential Remote Desktop Tunneling Detected>> | Identifies potential use of an SSH utility to establish RDP over a reverse SSH Tunnel. This can be used by attackers to enable routing of network packets that would otherwise not reach their intended destination. | update | 102 

|<<prebuilt-rule-8-4-1-remote-file-download-via-desktopimgdownldr-utility, Remote File Download via Desktopimgdownldr Utility>> | Identifies the desktopimgdownldr utility being used to download a remote file. An adversary may use desktopimgdownldr to download arbitrary files as an alternative to certutil. | update | 102 

|<<prebuilt-rule-8-4-1-remote-file-download-via-mpcmdrun, Remote File Download via MpCmdRun>> | Identifies the Windows Defender configuration utility (MpCmdRun.exe) being used to download a remote file. | update | 102 

|<<prebuilt-rule-8-4-1-remote-file-download-via-powershell, Remote File Download via PowerShell>> | Identifies powershell.exe being used to download an executable file from an untrusted remote destination. | update | 102 

|<<prebuilt-rule-8-4-1-remote-file-download-via-script-interpreter, Remote File Download via Script Interpreter>> | Identifies built-in Windows script interpreters (cscript.exe or wscript.exe) being used to download an executable file from a remote destination. | update | 102 

|<<prebuilt-rule-8-4-1-sunburst-command-and-control-activity, SUNBURST Command and Control Activity>> | The malware known as SUNBURST targets the SolarWind's Orion business software for command and control. This rule detects post-exploitation command and control activity of the SUNBURST backdoor. | update | 102 

|<<prebuilt-rule-8-4-1-remote-file-copy-via-teamviewer, Remote File Copy via TeamViewer>> | Identifies an executable or script file remotely downloaded via a TeamViewer transfer session. | update | 102 

|<<prebuilt-rule-8-4-1-potential-credential-access-via-windows-utilities, Potential Credential Access via Windows Utilities>> | Identifies the execution of known Windows utilities often abused to dump LSASS memory or the Active Directory database (NTDS.dit) in preparation for credential access. | update | 102 

|<<prebuilt-rule-8-4-1-ntds-or-sam-database-file-copied, NTDS or SAM Database File Copied>> | Identifies a copy operation of the Active Directory Domain Database (ntds.dit) or Security Account Manager (SAM) files. Those files contain sensitive information including hashed domain and/or local credentials. | update | 102 

|<<prebuilt-rule-8-4-1-potential-credential-access-via-trusted-developer-utility, Potential Credential Access via Trusted Developer Utility>> | An instance of MSBuild, the Microsoft Build Engine, loaded DLLs (dynamically linked libraries) responsible for Windows credential management. This technique is sometimes used for credential dumping. | update | 102 

|<<prebuilt-rule-8-4-1-potential-credential-access-via-dcsync, Potential Credential Access via DCSync>> | This rule identifies when a User Account starts the Active Directory Replication Process. Attackers can use the DCSync technique to get credential information of individual accounts or the entire domain, thus compromising the entire domain. | update | 102 

|<<prebuilt-rule-8-4-1-kerberos-pre-authentication-disabled-for-user, Kerberos Pre-authentication Disabled for User>> | Identifies the modification of an account's Kerberos pre-authentication options. An adversary with GenericWrite/GenericAll rights over the account can maliciously modify these settings to perform offline password cracking attacks such as AS-REP roasting. | update | 102 

|<<prebuilt-rule-8-4-1-creation-or-modification-of-domain-backup-dpapi-private-key, Creation or Modification of Domain Backup DPAPI private key>> | Identifies the creation or modification of Domain Backup private keys. Adversaries may extract the Data Protection API (DPAPI) domain backup key from a Domain Controller (DC) to be able to decrypt any domain user master key file. | update | 101 

|<<prebuilt-rule-8-4-1-credential-acquisition-via-registry-hive-dumping, Credential Acquisition via Registry Hive Dumping>> | Identifies attempts to export a registry hive which may contain credentials using the Windows reg.exe tool. | update | 102 

|<<prebuilt-rule-8-4-1-microsoft-iis-service-account-password-dumped, Microsoft IIS Service Account Password Dumped>> | Identifies the Internet Information Services (IIS) command-line tool, AppCmd, being used to list passwords. An attacker with IIS web server access via a web shell can decrypt and dump the IIS AppPool service account password using AppCmd. | update | 102 

|<<prebuilt-rule-8-4-1-microsoft-iis-connection-strings-decryption, Microsoft IIS Connection Strings Decryption>> | Identifies use of aspnet_regiis to decrypt Microsoft IIS connection strings. An attacker with Microsoft IIS web server access via a webshell or alike can decrypt and dump any hardcoded connection strings, such as the MSSQL service account password using aspnet_regiis command. | update | 102 

|<<prebuilt-rule-8-4-1-kerberos-traffic-from-unusual-process, Kerberos Traffic from Unusual Process>> | Identifies network connections to the standard Kerberos port from an unusual process. On Windows, the only process that normally performs Kerberos traffic from a domain joined host is lsass.exe. | update | 102 

|<<prebuilt-rule-8-4-1-suspicious-lsass-access-via-malseclogon, Suspicious LSASS Access via MalSecLogon>> | Identifies suspicious access to LSASS handle from a call trace pointing to seclogon.dll and with a suspicious access rights value. This may indicate an attempt to leak an LSASS handle via abusing the Secondary Logon service in preparation for credential access. | update | 101 

|<<prebuilt-rule-8-4-1-lsass-memory-dump-creation, LSASS Memory Dump Creation>> | Identifies the creation of a Local Security Authority Subsystem Service (lsass.exe) default memory dump. This may indicate a credential access attempt via trusted system utilities such as Task Manager (taskmgr.exe) and SQL Dumper (sqldumper.exe) or known pentesting tools such as Dumpert and AndrewSpecial. | update | 101 

|<<prebuilt-rule-8-4-1-lsass-memory-dump-handle-access, LSASS Memory Dump Handle Access>> | Identifies handle requests for the Local Security Authority Subsystem Service (LSASS) object access with specific access masks that many tools with a capability to dump memory to disk use (0x1fffff, 0x1010, 0x120089). This rule is tool agnostic as it has been validated against a host of various LSASS dump tools such as SharpDump, Procdump, Mimikatz, Comsvcs etc. It detects this behavior at a low level and does not depend on a specific tool or dump file name. | update | 102 

|<<prebuilt-rule-8-4-1-mimikatz-memssp-log-file-detected, Mimikatz Memssp Log File Detected>> | Identifies the password log file from the default Mimikatz memssp module. | update | 102 

|<<prebuilt-rule-8-4-1-potential-invoke-mimikatz-powershell-script, Potential Invoke-Mimikatz PowerShell Script>> | Mimikatz is a credential dumper capable of obtaining plaintext Windows account logins and passwords, along with many other features that make it useful for testing the security of networks. This rule detects Invoke-Mimikatz PowerShell script and alike. | update | 102 

|<<prebuilt-rule-8-4-1-modification-of-wdigest-security-provider, Modification of WDigest Security Provider>> | Identifies attempts to modify the WDigest security provider in the registry to force the user's password to be stored in clear text in memory. This behavior can be indicative of an adversary attempting to weaken the security configuration of an endpoint. Once the UseLogonCredential value is modified, the adversary may attempt to dump clear text passwords from memory. | update | 102 

|<<prebuilt-rule-8-4-1-windows-registry-file-creation-in-smb-share, Windows Registry File Creation in SMB Share>> | Identifies the creation or modification of a medium-size registry hive file on a Server Message Block (SMB) share, which may indicate an exfiltration attempt of a previously dumped Security Account Manager (SAM) registry hive for credential extraction on an attacker-controlled system. | update | 102 

|<<prebuilt-rule-8-4-1-network-logon-provider-registry-modification, Network Logon Provider Registry Modification>> | Identifies the modification of the network logon provider registry. Adversaries may register a rogue network logon provider module for persistence and/or credential access via intercepting the authentication credentials in clear text during user logon. | update | 101 

|<<prebuilt-rule-8-4-1-powershell-minidump-script, PowerShell MiniDump Script>> | This rule detects PowerShell scripts capable of dumping process memory using WindowsErrorReporting or Dbghelp.dll MiniDumpWriteDump. Attackers can use this tooling to dump LSASS and get access to credentials. | update | 102 

|<<prebuilt-rule-8-4-1-powershell-kerberos-ticket-request, PowerShell Kerberos Ticket Request>> | Detects PowerShell scripts that have the capability of requesting kerberos tickets, which is a common step in Kerberoasting toolkits to crack service accounts. | update | 102 

|<<prebuilt-rule-8-4-1-potential-credential-access-via-duplicatehandle-in-lsass, Potential Credential Access via DuplicateHandle in LSASS>> | Identifies suspicious access to an LSASS handle via DuplicateHandle from an unknown call trace module. This may indicate an attempt to bypass the NtOpenProcess API to evade detection and dump LSASS memory for credential access. | update | 101 

|<<prebuilt-rule-8-4-1-potential-local-ntlm-relay-via-http, Potential Local NTLM Relay via HTTP>> | Identifies attempt to coerce a local NTLM authentication via HTTP using the Windows Printer Spooler service as a target. An adversary may use this primitive in combination with other techniques to elevate privileges on a compromised system. | update | 102 

|<<prebuilt-rule-8-4-1-potential-remote-credential-access-via-registry, Potential Remote Credential Access via Registry>> | Identifies remote access to the registry to potentially dump credential data from the Security Account Manager (SAM) registry hive in preparation for credential access and privileges elevation. | update | 102 

|<<prebuilt-rule-8-4-1-multiple-vault-web-credentials-read, Multiple Vault Web Credentials Read>> | Windows Credential Manager allows you to create, view, or delete saved credentials for signing into websites, connected applications, and networks. An adversary may abuse this to list or dump credentials stored in the Credential Manager for saved usernames and passwords. This may also be performed in preparation of lateral movement. | update | 2 

|<<prebuilt-rule-8-4-1-searching-for-saved-credentials-via-vaultcmd, Searching for Saved Credentials via VaultCmd>> | Windows Credential Manager allows you to create, view, or delete saved credentials for signing into websites, connected applications, and networks. An adversary may abuse this to list or dump credentials stored in the Credential Manager for saved usernames and passwords. This may also be performed in preparation of lateral movement. | update | 102 

|<<prebuilt-rule-8-4-1-sensitive-privilege-seenabledelegationprivilege-assigned-to-a-user, Sensitive Privilege SeEnableDelegationPrivilege assigned to a User>> | Identifies the assignment of the SeEnableDelegationPrivilege sensitive "user right" to a user. The SeEnableDelegationPrivilege "user right" enables computer and user accounts to be trusted for delegation. Attackers can abuse this right to compromise Active Directory accounts and elevate their privileges. | update | 102 

|<<prebuilt-rule-8-4-1-potential-shadow-credentials-added-to-ad-object, Potential Shadow Credentials added to AD Object>> | Identify the modification of the msDS-KeyCredentialLink attribute in an Active Directory Computer or User Object. Attackers can abuse control over the object and create a key pair, append to raw public key in the attribute, and obtain persistent and stealthy access to the target user or computer object. | update | 101 

|<<prebuilt-rule-8-4-1-user-account-exposed-to-kerberoasting, User account exposed to Kerberoasting>> | Detects when a user account has the servicePrincipalName attribute modified. Attackers can abuse write privileges over a user to configure Service Principle Names (SPNs) so that they can perform Kerberoasting. Administrators can also configure this for legitimate purposes, exposing the account to Kerberoasting. | update | 102 

|<<prebuilt-rule-8-4-1-potential-credential-access-via-renamed-com-services-dll, Potential Credential Access via Renamed COM+ Services DLL>> | Identifies suspicious renamed COMSVCS.DLL Image Load, which exports the MiniDump function that can be used to dump a process memory. This may indicate an attempt to dump LSASS memory while bypassing command-line based detection in preparation for credential access. | update | 101 

|<<prebuilt-rule-8-4-1-potential-credential-access-via-lsass-memory-dump, Potential Credential Access via LSASS Memory Dump>> | Identifies suspicious access to LSASS handle from a call trace pointing to DBGHelp.dll or DBGCore.dll, which both export the MiniDumpWriteDump method that can be used to dump LSASS memory content in preparation for credential access. | update | 101 

|<<prebuilt-rule-8-4-1-potential-lsass-memory-dump-via-psscapturesnapshot, Potential LSASS Memory Dump via PssCaptureSnapShot>> | Identifies suspicious access to an LSASS handle via PssCaptureSnapShot where two successive process accesses are performed by the same process and target two different instances of LSASS. This may indicate an attempt to evade detection and dump LSASS memory for credential access. | update | 101 

|<<prebuilt-rule-8-4-1-suspicious-remote-registry-access-via-sebackupprivilege, Suspicious Remote Registry Access via SeBackupPrivilege>> | Identifies remote access to the registry using an account with Backup Operators group membership. This may indicate an attempt to exfiltrate credentials by dumping the Security Account Manager (SAM) registry hive in preparation for credential access and privileges elevation. | update | 102 

|<<prebuilt-rule-8-4-1-symbolic-link-to-shadow-copy-created, Symbolic Link to Shadow Copy Created>> | Identifies the creation of symbolic links to a shadow copy. Symbolic links can be used to access files in the shadow copy, including sensitive files such as ntds.dit, System Boot Key and browser offline credentials. | update | 102 

|<<prebuilt-rule-8-4-1-potential-lsass-clone-creation-via-psscapturesnapshot, Potential LSASS Clone Creation via PssCaptureSnapShot>> | Identifies the creation of an LSASS process clone via PssCaptureSnapShot where the parent process is the initial LSASS process instance. This may indicate an attempt to evade detection and dump LSASS memory for credential access. | update | 101 

|<<prebuilt-rule-8-4-1-adding-hidden-file-attribute-via-attrib, Adding Hidden File Attribute via Attrib>> | Adversaries can add the 'hidden' attribute to files to hide them from the user in an attempt to evade detection. | update | 102 

|<<prebuilt-rule-8-4-1-modification-of-amsienable-registry-key, Modification of AmsiEnable Registry Key>> | Identifies modifications of the AmsiEnable registry key to 0, which disables the Antimalware Scan Interface (AMSI). An adversary can modify this key to disable AMSI protections. | update | 102 

|<<prebuilt-rule-8-4-1-clearing-windows-console-history, Clearing Windows Console History>> | Identifies when a user attempts to clear console history. An adversary may clear the command history of a compromised account to conceal the actions undertaken during an intrusion. | update | 102 

|<<prebuilt-rule-8-4-1-clearing-windows-event-logs, Clearing Windows Event Logs>> | Identifies attempts to clear or disable Windows event log stores using Windows wevetutil command. This is often done by attackers in an attempt to evade detection or destroy forensic evidence on a system. | update | 102 

|<<prebuilt-rule-8-4-1-windows-event-logs-cleared, Windows Event Logs Cleared>> | Identifies attempts to clear Windows event log stores. This is often done by attackers in an attempt to evade detection or destroy forensic evidence on a system. | update | 102 

|<<prebuilt-rule-8-4-1-creation-or-modification-of-root-certificate, Creation or Modification of Root Certificate>> | Identifies the creation or modification of a local trusted root certificate in Windows. The install of a malicious root certificate would allow an attacker the ability to masquerade malicious files as valid signed components from any entity (for example, Microsoft). It could also allow an attacker to decrypt SSL traffic. | update | 102 

|<<prebuilt-rule-8-4-1-windows-defender-disabled-via-registry-modification, Windows Defender Disabled via Registry Modification>> | Identifies modifications to the Windows Defender registry settings to disable the service or set the service to be started manually. | update | 102 

|<<prebuilt-rule-8-4-1-windows-defender-exclusions-added-via-powershell, Windows Defender Exclusions Added via PowerShell>> | Identifies modifications to the Windows Defender configuration settings using PowerShell to add exclusions at the folder directory or process level. | update | 102 

|<<prebuilt-rule-8-4-1-delete-volume-usn-journal-with-fsutil, Delete Volume USN Journal with Fsutil>> | Identifies use of the fsutil.exe to delete the volume USNJRNL. This technique is used by attackers to eliminate evidence of files created during post-exploitation activities. | update | 102 

|<<prebuilt-rule-8-4-1-powershell-script-block-logging-disabled, PowerShell Script Block Logging Disabled>> | Identifies attempts to disable PowerShell Script Block Logging via registry modification. Attackers may disable this logging to conceal their activities in the host and evade detection. | update | 102 

|<<prebuilt-rule-8-4-1-disable-windows-firewall-rules-via-netsh, Disable Windows Firewall Rules via Netsh>> | Identifies use of the netsh.exe to disable or weaken the local firewall. Attackers will use this command line tool to disable the firewall during troubleshooting or to enable network mobility. | update | 102 

|<<prebuilt-rule-8-4-1-disabling-windows-defender-security-settings-via-powershell, Disabling Windows Defender Security Settings via PowerShell>> | Identifies use of the Set-MpPreference PowerShell command to disable or weaken certain Windows Defender settings. | update | 102 

|<<prebuilt-rule-8-4-1-disable-windows-event-and-security-logs-using-built-in-tools, Disable Windows Event and Security Logs Using Built-in Tools>> | Identifies attempts to disable EventLog via the logman Windows utility, PowerShell, or auditpol. This is often done by attackers in an attempt to evade detection on a system. | update | 102 

|<<prebuilt-rule-8-4-1-dns-over-https-enabled-via-registry, DNS-over-HTTPS Enabled via Registry>> | Identifies when a user enables DNS-over-HTTPS. This can be used to hide internet activity or the process of exfiltrating data. With this enabled, an organization will lose visibility into data such as query type, response, and originating IP, which are used to determine bad actors. | update | 101 

|<<prebuilt-rule-8-4-1-suspicious-net-code-compilation, Suspicious .NET Code Compilation>> | Identifies suspicious .NET code execution. connections. | update | 102 

|<<prebuilt-rule-8-4-1-remote-desktop-enabled-in-windows-firewall-by-netsh, Remote Desktop Enabled in Windows Firewall by Netsh>> | Identifies use of the network shell utility (netsh.exe) to enable inbound Remote Desktop Protocol (RDP) connections in the Windows Firewall. | update | 102 

|<<prebuilt-rule-8-4-1-enable-host-network-discovery-via-netsh, Enable Host Network Discovery via Netsh>> | Identifies use of the netsh.exe program to enable host discovery via the network. Attackers can use this command-line tool to weaken the host firewall settings. | update | 102 

|<<prebuilt-rule-8-4-1-control-panel-process-with-unusual-arguments, Control Panel Process with Unusual Arguments>> | Identifies unusual instances of Control Panel with suspicious keywords or paths in the process command line value. Adversaries may abuse control.exe to proxy execution of malicious code. | update | 102 

|<<prebuilt-rule-8-4-1-imageload-via-windows-update-auto-update-client, ImageLoad via Windows Update Auto Update Client>> | Identifies abuse of the Windows Update Auto Update Client (wuauclt.exe) to load an arbitrary DLL. This behavior is used as a defense evasion technique to blend-in malicious activity with legitimate Windows software. | update | 102 

|<<prebuilt-rule-8-4-1-microsoft-build-engine-started-by-an-office-application, Microsoft Build Engine Started by an Office Application>> | An instance of MSBuild, the Microsoft Build Engine, was started by Excel or Word. This is unusual behavior for the Build Engine and could have been caused by an Excel or Word document executing a malicious script payload. | update | 102 

|<<prebuilt-rule-8-4-1-microsoft-build-engine-started-by-a-script-process, Microsoft Build Engine Started by a Script Process>> | An instance of MSBuild, the Microsoft Build Engine, was started by a script or the Windows command interpreter. This behavior is unusual and is sometimes used by malicious payloads. | update | 101 

|<<prebuilt-rule-8-4-1-microsoft-build-engine-started-by-a-system-process, Microsoft Build Engine Started by a System Process>> | An instance of MSBuild, the Microsoft Build Engine, was started by Explorer or the WMI (Windows Management Instrumentation) subsystem. This behavior is unusual and is sometimes used by malicious payloads. | update | 102 

|<<prebuilt-rule-8-4-1-microsoft-build-engine-using-an-alternate-name, Microsoft Build Engine Using an Alternate Name>> | An instance of MSBuild, the Microsoft Build Engine, was started after being renamed. This is uncommon behavior and may indicate an attempt to run unnoticed or undetected. | update | 102 

|<<prebuilt-rule-8-4-1-microsoft-build-engine-started-an-unusual-process, Microsoft Build Engine Started an Unusual Process>> | An instance of MSBuild, the Microsoft Build Engine, started a PowerShell script or the Visual C# Command Line Compiler. This technique is sometimes used to deploy a malicious payload using the Build Engine. | update | 102 

|<<prebuilt-rule-8-4-1-potential-dll-sideloading-via-trusted-microsoft-programs, Potential DLL SideLoading via Trusted Microsoft Programs>> | Identifies an instance of a Windows trusted program that is known to be vulnerable to DLL Search Order Hijacking starting after being renamed or from a non-standard path. This is uncommon behavior and may indicate an attempt to evade defenses via side loading a malicious DLL within the memory space of one of those processes. | update | 101 

|<<prebuilt-rule-8-4-1-potential-dll-side-loading-via-microsoft-antimalware-service-executable, Potential DLL Side-Loading via Microsoft Antimalware Service Executable>> | Identifies a Windows trusted program that is known to be vulnerable to DLL Search Order Hijacking starting after being renamed or from a non-standard path. This is uncommon behavior and may indicate an attempt to evade defenses via side-loading a malicious DLL within the memory space of one of those processes. | update | 101 

|<<prebuilt-rule-8-4-1-executable-file-creation-with-multiple-extensions, Executable File Creation with Multiple Extensions>> | Masquerading can allow an adversary to evade defenses and better blend in with the environment. One way it occurs is when the name or location of a file is manipulated as a means of tricking a user into executing what they think is a benign file type but is actually executable code. | update | 101 

|<<prebuilt-rule-8-4-1-process-execution-from-an-unusual-directory, Process Execution from an Unusual Directory>> | Identifies process execution from suspicious default Windows directories. This is sometimes done by adversaries to hide malware in trusted paths. | update | 102 

|<<prebuilt-rule-8-4-1-encoded-executable-stored-in-the-registry, Encoded Executable Stored in the Registry>> | Identifies registry write modifications to hide an encoded portable executable. This could be indicative of adversary defense evasion by avoiding the storing of malicious content directly on disk. | update | 101 

|<<prebuilt-rule-8-4-1-iis-http-logging-disabled, IIS HTTP Logging Disabled>> | Identifies when Internet Information Services (IIS) HTTP Logging is disabled on a server. An attacker with IIS server access via a webshell or other mechanism can disable HTTP Logging as an effective anti-forensics measure. | update | 102 

|<<prebuilt-rule-8-4-1-process-injection-by-the-microsoft-build-engine, Process Injection by the Microsoft Build Engine>> | An instance of MSBuild, the Microsoft Build Engine, created a thread in another process. This technique is sometimes used to evade detection or elevate privileges. | update | 101 

|<<prebuilt-rule-8-4-1-suspicious-endpoint-security-parent-process, Suspicious Endpoint Security Parent Process>> | A suspicious Endpoint Security parent process was detected. This may indicate a process hollowing or other form of code injection. | update | 102 

|<<prebuilt-rule-8-4-1-renamed-autoit-scripts-interpreter, Renamed AutoIt Scripts Interpreter>> | Identifies a suspicious AutoIt process execution. Malware written as an AutoIt script tends to rename the AutoIt executable to avoid detection. | update | 102 

|<<prebuilt-rule-8-4-1-suspicious-werfault-child-process, Suspicious WerFault Child Process>> | A suspicious WerFault child process was detected, which may indicate an attempt to run unnoticed. Verify process details such as command line, network connections, file writes and parent process details as well. | update | 102 

|<<prebuilt-rule-8-4-1-program-files-directory-masquerading, Program Files Directory Masquerading>> | Identifies execution from a directory masquerading as the Windows Program Files directories. These paths are trusted and usually host trusted third party programs. An adversary may leverage masquerading, along with low privileges to bypass detections allowlisting those folders. | update | 101 

|<<prebuilt-rule-8-4-1-microsoft-windows-defender-tampering, Microsoft Windows Defender Tampering>> | Identifies when one or more features on Microsoft Defender are disabled. Adversaries may disable or tamper with Microsoft Defender features to evade detection and conceal malicious behavior. | update | 102 

|<<prebuilt-rule-8-4-1-ms-office-macro-security-registry-modifications, MS Office Macro Security Registry Modifications>> | Microsoft Office Products offer options for users and developers to control the security settings for running and using Macros. Adversaries may abuse these security settings to modify the default behavior of the Office Application to trust future macros and/or disable security warnings, which could increase their chances of establishing persistence. | update | 102 

|<<prebuilt-rule-8-4-1-temporarily-scheduled-task-creation, Temporarily Scheduled Task Creation>> | Indicates the creation and deletion of a scheduled task within a short time interval. Adversaries can use these to proxy malicious execution via the schedule service and perform clean up. | update | 2 

|<<prebuilt-rule-8-4-1-suspicious-net-reflection-via-powershell, Suspicious .NET Reflection via PowerShell>> | Detects the use of Reflection.Assembly to load PEs and DLLs in memory in PowerShell scripts. Attackers use this method to load executables and DLLs without writing to the disk, bypassing security solutions. | update | 102 

|<<prebuilt-rule-8-4-1-powershell-suspicious-payload-encoded-and-compressed, PowerShell Suspicious Payload Encoded and Compressed>> | Identifies the use of .NET functionality for decompression and base64 decoding combined in PowerShell scripts, which malware and security tools heavily use to deobfuscate payloads and load them directly in memory to bypass defenses. | update | 102 

|<<prebuilt-rule-8-4-1-potential-process-injection-via-powershell, Potential Process Injection via PowerShell>> | Detects the use of Windows API functions that are commonly abused by malware and security tools to load malicious code or inject it into remote processes. | update | 102 

|<<prebuilt-rule-8-4-1-potential-process-herpaderping-attempt, Potential Process Herpaderping Attempt>> | Identifies process execution followed by a file overwrite of an executable by the same parent process. This may indicate an evasion attempt to execute malicious code in a stealthy way. | update | 101 

|<<prebuilt-rule-8-4-1-windows-firewall-disabled-via-powershell, Windows Firewall Disabled via PowerShell>> | Identifies when the Windows Firewall is disabled using PowerShell cmdlets, which can help attackers evade network constraints, like internet and network lateral communication restrictions. | update | 102 

|<<prebuilt-rule-8-4-1-process-termination-followed-by-deletion, Process Termination followed by Deletion>> | Identifies a process termination event quickly followed by the deletion of its executable file. Malware tools and other non-native files dropped or created on a system by an adversary may leave traces to indicate to what occurred. Removal of these files can occur during an intrusion, or as part of a post-intrusion process to minimize the adversary's footprint. | update | 101 

|<<prebuilt-rule-8-4-1-suspicious-microsoft-diagnostics-wizard-execution, Suspicious Microsoft Diagnostics Wizard Execution>> | Identifies potential abuse of the Microsoft Diagnostics Troubleshooting Wizard (MSDT) to proxy malicious command or binary execution via malicious process arguments. | update | 102 

|<<prebuilt-rule-8-4-1-scheduled-tasks-at-command-enabled, Scheduled Tasks AT Command Enabled>> | Identifies attempts to enable the Windows scheduled tasks AT command via the registry. Attackers may use this method to move laterally or persist locally. The AT command has been deprecated since Windows 8 and Windows Server 2012, but still exists for backwards compatibility. | update | 101 

|<<prebuilt-rule-8-4-1-potential-secure-file-deletion-via-sdelete-utility, Potential Secure File Deletion via SDelete Utility>> | Detects file name patterns generated by the use of Sysinternals SDelete utility to securely delete a file via multiple file overwrite and rename operations. | update | 101 

|<<prebuilt-rule-8-4-1-sip-provider-modification, SIP Provider Modification>> | Identifies modifications to the registered Subject Interface Package (SIP) providers. SIP providers are used by the Windows cryptographic system to validate file signatures on the system. This may be an attempt to bypass signature validation checks or inject code into critical processes. | update | 101 

|<<prebuilt-rule-8-4-1-solarwinds-process-disabling-services-via-registry, SolarWinds Process Disabling Services via Registry>> | Identifies a SolarWinds binary modifying the start type of a service to be disabled. An adversary may abuse this technique to manipulate relevant security services. | update | 101 

|<<prebuilt-rule-8-4-1-suspicious-certutil-commands, Suspicious CertUtil Commands>> | Identifies suspicious commands being used with certutil.exe. CertUtil is a native Windows component which is part of Certificate Services. CertUtil is often abused by attackers to live off the land for stealthier command and control or data exfiltration. | update | 101 

|<<prebuilt-rule-8-4-1-suspicious-process-access-via-direct-system-call, Suspicious Process Access via Direct System Call>> | Identifies suspicious process access events from an unknown memory region. Endpoint security solutions usually hook userland Windows APIs in order to decide if the code that is being executed is malicious or not. It's possible to bypass hooked functions by writing malicious functions that call syscalls directly. | update | 102 

|<<prebuilt-rule-8-4-1-suspicious-process-creation-calltrace, Suspicious Process Creation CallTrace>> | Identifies when a process is created and immediately accessed from an unknown memory code region and by the same parent process. This may indicate a code injection attempt. | update | 102 

|<<prebuilt-rule-8-4-1-suspicious-execution-short-program-name, Suspicious Execution - Short Program Name>> | Identifies process execution with a single character process name. This is often done by adversaries while staging or executing temporary utilities. | update | 102 

|<<prebuilt-rule-8-4-1-suspicious-zoom-child-process, Suspicious Zoom Child Process>> | A suspicious Zoom child process was detected, which may indicate an attempt to run unnoticed. Verify process details such as command line, network connections, file writes and associated file signature details as well. | update | 102 

|<<prebuilt-rule-8-4-1-unusual-executable-file-creation-by-a-system-critical-process, Unusual Executable File Creation by a System Critical Process>> | Identifies an unexpected executable file being created or modified by a Windows system critical process, which may indicate activity related to remote code execution or other forms of exploitation. | update | 102 

|<<prebuilt-rule-8-4-1-unusual-file-creation-alternate-data-stream, Unusual File Creation - Alternate Data Stream>> | Identifies suspicious creation of Alternate Data Streams on highly targeted files. This is uncommon for legitimate files and sometimes done by adversaries to hide malware. | update | 102 

|<<prebuilt-rule-8-4-1-unusual-process-execution-path-alternate-data-stream, Unusual Process Execution Path - Alternate Data Stream>> | Identifies processes running from an Alternate Data Stream. This is uncommon for legitimate processes and sometimes done by adversaries to hide malware. | update | 101 

|<<prebuilt-rule-8-4-1-unusual-network-connection-via-rundll32, Unusual Network Connection via RunDLL32>> | Identifies unusual instances of rundll32.exe making outbound network connections. This may indicate adversarial Command and Control activity. | update | 102 

|<<prebuilt-rule-8-4-1-unusual-process-network-connection, Unusual Process Network Connection>> | Identifies network activity from unexpected system applications. This may indicate adversarial activity as these applications are often leveraged by adversaries to execute code and evade detection. | update | 102 

|<<prebuilt-rule-8-4-1-unusual-child-process-from-a-system-virtual-process, Unusual Child Process from a System Virtual Process>> | Identifies a suspicious child process of the Windows virtual system process, which could indicate code injection. | update | 102 

|<<prebuilt-rule-8-4-1-potential-evasion-via-filter-manager, Potential Evasion via Filter Manager>> | The Filter Manager Control Program (fltMC.exe) binary may be abused by adversaries to unload a filter driver and evade defenses. | update | 102 

|<<prebuilt-rule-8-4-1-signed-proxy-execution-via-ms-work-folders, Signed Proxy Execution via MS Work Folders>> | Identifies the use of Windows Work Folders to execute a potentially masqueraded control.exe file in the current working directory. Misuse of Windows Work Folders could indicate malicious activity. | update | 102 

|<<prebuilt-rule-8-4-1-adfind-command-activity, AdFind Command Activity>> | This rule detects the Active Directory query tool, AdFind.exe. AdFind has legitimate purposes, but it is frequently leveraged by threat actors to perform post-exploitation Active Directory reconnaissance. The AdFind tool has been observed in Trickbot, Ryuk, Maze, and FIN6 campaigns. For Winlogbeat, this rule requires Sysmon. | update | 102 

|<<prebuilt-rule-8-4-1-enumeration-of-administrator-accounts, Enumeration of Administrator Accounts>> | Identifies instances of lower privilege accounts enumerating Administrator accounts or groups using built-in Windows tools. | update | 102 

|<<prebuilt-rule-8-4-1-account-discovery-command-via-system-account, Account Discovery Command via SYSTEM Account>> | Identifies when the SYSTEM account uses an account discovery utility. This could be a sign of discovery activity after an adversary has achieved privilege escalation. | update | 102 

|<<prebuilt-rule-8-4-1-enumerating-domain-trusts-via-nltest-exe, Enumerating Domain Trusts via NLTEST.EXE>> | Identifies the use of nltest.exe for domain trust discovery purposes. Adversaries may use this command-line utility to enumerate domain trusts and gain insight into trust relationships, as well as the state of Domain Controller (DC) replication in a Microsoft Windows NT Domain. | update | 102 

|<<prebuilt-rule-8-4-1-windows-network-enumeration, Windows Network Enumeration>> | Identifies attempts to enumerate hosts in a network using the built-in Windows net.exe tool. | update | 102 

|<<prebuilt-rule-8-4-1-peripheral-device-discovery, Peripheral Device Discovery>> | Identifies use of the Windows file system utility (fsutil.exe) to gather information about attached peripheral devices and components connected to a computer system. | update | 102 

|<<prebuilt-rule-8-4-1-powershell-share-enumeration-script, PowerShell Share Enumeration Script>> | Detects scripts that contain PowerShell functions, structures, or Windows API functions related to windows share enumeration activities. Attackers, mainly ransomware groups, commonly identify and inspect network shares, looking for critical information for encryption and/or exfiltration. | update | 2 

|<<prebuilt-rule-8-4-1-powershell-suspicious-discovery-related-windows-api-functions, PowerShell Suspicious Discovery Related Windows API Functions>> | This rule detects the use of discovery-related Windows API functions in PowerShell Scripts. Attackers can use these functions to perform various situational awareness related activities, like enumerating users, shares, sessions, domain trusts, groups, etc. | update | 102 

|<<prebuilt-rule-8-4-1-external-ip-lookup-from-non-browser-process, External IP Lookup from Non-Browser Process>> | Identifies domains commonly used by adversaries for post-exploitation IP lookups. It is common for adversaries to test for Internet access and acquire their external IP address after they have gained access to a system. Among others, this has been observed in campaigns leveraging the information stealer, Trickbot. | update | 102 

|<<prebuilt-rule-8-4-1-enumeration-of-privileged-local-groups-membership, Enumeration of Privileged Local Groups Membership>> | Identifies instances of an unusual process enumerating built-in Windows privileged local groups membership like Administrators or Remote Desktop users. | update | 102 

|<<prebuilt-rule-8-4-1-remote-system-discovery-commands, Remote System Discovery Commands>> | Discovery of remote system information using built-in commands, which may be used to move laterally. | update | 102 

|<<prebuilt-rule-8-4-1-security-software-discovery-using-wmic, Security Software Discovery using WMIC>> | Identifies the use of Windows Management Instrumentation Command (WMIC) to discover certain System Security Settings such as AntiVirus or Host Firewall details. | update | 102 

|<<prebuilt-rule-8-4-1-whoami-process-activity, Whoami Process Activity>> | Identifies suspicious use of whoami.exe which displays user, group, and privileges information for the user who is currently logged on to the local system. | update | 102 

|<<prebuilt-rule-8-4-1-command-execution-via-solarwinds-process, Command Execution via SolarWinds Process>> | A suspicious SolarWinds child process (Cmd.exe or Powershell.exe) was detected. | update | 102 

|<<prebuilt-rule-8-4-1-suspicious-solarwinds-child-process, Suspicious SolarWinds Child Process>> | A suspicious SolarWinds child process was detected, which may indicate an attempt to execute malicious programs. | update | 102 

|<<prebuilt-rule-8-4-1-execution-of-com-object-via-xwizard, Execution of COM object via Xwizard>> | Windows Component Object Model (COM) is an inter-process communication (IPC) component of the native Windows application programming interface (API) that enables interaction between software objects or executable code. Xwizard can be used to run a COM object created in registry to evade defensive counter measures. | update | 102 

|<<prebuilt-rule-8-4-1-svchost-spawning-cmd, Svchost spawning Cmd>> | Identifies a suspicious parent child process relationship with cmd.exe descending from svchost.exe | update | 102 

|<<prebuilt-rule-8-4-1-unusual-parent-process-for-cmd-exe, Unusual Parent Process for cmd.exe>> | Identifies a suspicious parent child process relationship with cmd.exe descending from an unusual process. | update | 102 

|<<prebuilt-rule-8-4-1-command-shell-activity-started-via-rundll32, Command Shell Activity Started via RunDLL32>> | Identifies command shell activity started via RunDLL32, which is commonly abused by attackers to host malicious code. | update | 101 

|<<prebuilt-rule-8-4-1-enumeration-command-spawned-via-wmiprvse, Enumeration Command Spawned via WMIPrvSE>> | Identifies native Windows host and network enumeration commands spawned by the Windows Management Instrumentation Provider Service (WMIPrvSE). | update | 102 

|<<prebuilt-rule-8-4-1-execution-from-unusual-directory-command-line, Execution from Unusual Directory - Command Line>> | Identifies process execution from suspicious default Windows directories. This may be abused by adversaries to hide malware in trusted paths. | update | 102 

|<<prebuilt-rule-8-4-1-execution-of-file-written-or-modified-by-microsoft-office, Execution of File Written or Modified by Microsoft Office>> | Identifies an executable created by a Microsoft Office application and subsequently executed. These processes are often launched via scripts inside documents or during exploitation of Microsoft Office applications. | update | 102 

|<<prebuilt-rule-8-4-1-execution-of-file-written-or-modified-by-pdf-reader, Execution of File Written or Modified by PDF Reader>> | Identifies a suspicious file that was written by a PDF reader application and subsequently executed. These processes are often launched via exploitation of PDF applications. | update | 102 

|<<prebuilt-rule-8-4-1-suspicious-portable-executable-encoded-in-powershell-script, Suspicious Portable Executable Encoded in Powershell Script>> | Detects the presence of a portable executable (PE) in a PowerShell script by looking for its encoded header. Attackers embed PEs into PowerShell scripts to inject them into memory, avoiding defences by not writing to disk. | update | 102 

|<<prebuilt-rule-8-4-1-powershell-psreflect-script, PowerShell PSReflect Script>> | Detects the use of PSReflect in PowerShell scripts. Attackers leverage PSReflect as a library that enables PowerShell to access win32 API functions. | update | 102 

|<<prebuilt-rule-8-4-1-psexec-network-connection, PsExec Network Connection>> | Identifies use of the SysInternals tool PsExec.exe making a network connection. This could be an indication of lateral movement. | update | 102 

|<<prebuilt-rule-8-4-1-execution-via-local-sxs-shared-module, Execution via local SxS Shared Module>> | Identifies the creation, change, or deletion of a DLL module within a Windows SxS local folder. Adversaries may abuse shared modules to execute malicious payloads by instructing the Windows module loader to load DLLs from arbitrary local paths. | update | 101 

|<<prebuilt-rule-8-4-1-suspicious-cmd-execution-via-wmi, Suspicious Cmd Execution via WMI>> | Identifies suspicious command execution (cmd) via Windows Management Instrumentation (WMI) on a remote host. This could be indicative of adversary lateral movement. | update | 102 

|<<prebuilt-rule-8-4-1-suspicious-wmi-image-load-from-ms-office, Suspicious WMI Image Load from MS Office>> | Identifies a suspicious image load (wmiutils.dll) from Microsoft Office processes. This behavior may indicate adversarial activity where child processes are spawned via Windows Management Instrumentation (WMI). This technique can be used to execute code and evade traditional parent/child processes spawned from Microsoft Office products. | update | 101 

|<<prebuilt-rule-8-4-1-suspicious-pdf-reader-child-process, Suspicious PDF Reader Child Process>> | Identifies suspicious child processes of PDF reader applications. These child processes are often launched via exploitation of PDF applications or social engineering. | update | 102 

|<<prebuilt-rule-8-4-1-suspicious-powershell-engine-imageload, Suspicious PowerShell Engine ImageLoad>> | Identifies the PowerShell engine being invoked by unexpected processes. Rather than executing PowerShell functionality with powershell.exe, some attackers do this to operate more stealthily. | update | 102 

|<<prebuilt-rule-8-4-1-suspicious-process-execution-via-renamed-psexec-executable, Suspicious Process Execution via Renamed PsExec Executable>> | Identifies suspicious psexec activity which is executing from the psexec service that has been renamed, possibly to evade detection. | update | 102 

|<<prebuilt-rule-8-4-1-process-activity-via-compiled-html-file, Process Activity via Compiled HTML File>> | Compiled HTML files (.chm) are commonly distributed as part of the Microsoft HTML Help system. Adversaries may conceal malicious code in a CHM file and deliver it to a victim for execution. CHM content is loaded by the HTML Help executable program (hh.exe). | update | 102 

|<<prebuilt-rule-8-4-1-conhost-spawned-by-suspicious-parent-process, Conhost Spawned By Suspicious Parent Process>> | Detects when the Console Window Host (conhost.exe) process is spawned by a suspicious parent process, which could be indicative of code injection. | update | 102 

|<<prebuilt-rule-8-4-1-execution-via-mssql-xp-cmdshell-stored-procedure, Execution via MSSQL xp_cmdshell Stored Procedure>> | Identifies execution via MSSQL xp_cmdshell stored procedure. Malicious users may attempt to elevate their privileges by using xp_cmdshell, which is disabled by default, thus, it's important to review the context of it's use. | update | 102 

|<<prebuilt-rule-8-4-1-third-party-backup-files-deleted-via-unexpected-process, Third-party Backup Files Deleted via Unexpected Process>> | Identifies the deletion of backup files, saved using third-party software, by a process outside of the backup suite. Adversaries may delete Backup files to ensure that recovery from a ransomware attack is less likely. | update | 102 

|<<prebuilt-rule-8-4-1-deleting-backup-catalogs-with-wbadmin, Deleting Backup Catalogs with Wbadmin>> | Identifies use of the wbadmin.exe to delete the backup catalog. Ransomware and other malware may do this to prevent system recovery. | update | 102 

|<<prebuilt-rule-8-4-1-modification-of-boot-configuration, Modification of Boot Configuration>> | Identifies use of bcdedit.exe to delete boot configuration data. This tactic is sometimes used as by malware or an attacker as a destructive technique. | update | 102 

|<<prebuilt-rule-8-4-1-high-number-of-process-and-or-service-terminations, High Number of Process and/or Service Terminations>> | This rule identifies a high number (10) of process terminations (stop, delete, or suspend) from the same host within a short time period. | update | 102 

|<<prebuilt-rule-8-4-1-volume-shadow-copy-deleted-or-resized-via-vssadmin, Volume Shadow Copy Deleted or Resized via VssAdmin>> | Identifies use of vssadmin.exe for shadow copy deletion or resizing on endpoints. This commonly occurs in tandem with ransomware or other destructive attacks. | update | 102 

|<<prebuilt-rule-8-4-1-volume-shadow-copy-deletion-via-powershell, Volume Shadow Copy Deletion via PowerShell>> | Identifies the use of the Win32_ShadowCopy class and related cmdlets to achieve shadow copy deletion. This commonly occurs in tandem with ransomware or other destructive attacks. | update | 102 

|<<prebuilt-rule-8-4-1-volume-shadow-copy-deletion-via-wmic, Volume Shadow Copy Deletion via WMIC>> | Identifies use of wmic.exe for shadow copy deletion on endpoints. This commonly occurs in tandem with ransomware or other destructive attacks. | update | 102 

|<<prebuilt-rule-8-4-1-windows-script-executing-powershell, Windows Script Executing PowerShell>> | Identifies a PowerShell process launched by either cscript.exe or wscript.exe. Observing Windows scripting processes executing a PowerShell script, may be indicative of malicious activity. | update | 102 

|<<prebuilt-rule-8-4-1-suspicious-ms-office-child-process, Suspicious MS Office Child Process>> | Identifies suspicious child processes of frequently targeted Microsoft Office applications (Word, PowerPoint, Excel). These child processes are often launched during exploitation of Office applications or from documents with malicious macros. | update | 102 

|<<prebuilt-rule-8-4-1-suspicious-ms-outlook-child-process, Suspicious MS Outlook Child Process>> | Identifies suspicious child processes of Microsoft Outlook. These child processes are often associated with spear phishing activity. | update | 102 

|<<prebuilt-rule-8-4-1-unusual-child-process-of-dns-exe, Unusual Child Process of dns.exe>> | Identifies an unexpected process spawning from dns.exe, the process responsible for Windows DNS server services, which may indicate activity related to remote code execution or other forms of exploitation. | update | 102 

|<<prebuilt-rule-8-4-1-unusual-file-modification-by-dns-exe, Unusual File Modification by dns.exe>> | Identifies an unexpected file being modified by dns.exe, the process responsible for Windows DNS Server services, which may indicate activity related to remote code execution or other forms of exploitation. | update | 101 

|<<prebuilt-rule-8-4-1-nullsessionpipe-registry-modification, NullSessionPipe Registry Modification>> | Identifies NullSessionPipe registry modifications that specify which pipes can be accessed anonymously. This could be indicative of adversary lateral movement preparation by making the added pipe available to everyone. | update | 101 

|<<prebuilt-rule-8-4-1-direct-outbound-smb-connection, Direct Outbound SMB Connection>> | Identifies unexpected processes making network connections over port 445. Windows File Sharing is typically implemented over Server Message Block (SMB), which communicates between hosts using port 445. When legitimate, these network connections are established by the kernel. Processes making 445/tcp connections may be port scanners, exploits, or suspicious user-level processes moving laterally. | update | 102 

|<<prebuilt-rule-8-4-1-abnormally-large-dns-response, Abnormally Large DNS Response>> | Specially crafted DNS requests can manipulate a known overflow vulnerability in some Windows DNS servers, resulting in Remote Code Execution (RCE) or a Denial of Service (DoS) from crashing the service. | update | 102 

|<<prebuilt-rule-8-4-1-potential-lateral-tool-transfer-via-smb-share, Potential Lateral Tool Transfer via SMB Share>> | Identifies the creation or change of a Windows executable file over network shares. Adversaries may transfer tools or other files between systems in a compromised environment. | update | 102 

|<<prebuilt-rule-8-4-1-remote-execution-via-file-shares, Remote Execution via File Shares>> | Identifies the execution of a file that was created by the virtual system process. This may indicate lateral movement via network file shares. | update | 102 

|<<prebuilt-rule-8-4-1-mounting-hidden-or-webdav-remote-shares, Mounting Hidden or WebDav Remote Shares>> | Identifies the use of net.exe to mount a WebDav or hidden remote share. This may indicate lateral movement or preparation for data exfiltration. | update | 102 

|<<prebuilt-rule-8-4-1-rdp-enabled-via-registry, RDP Enabled via Registry>> | Identifies registry write modifications to enable Remote Desktop Protocol (RDP) access. This could be indicative of adversary lateral movement preparation. | update | 102 

|<<prebuilt-rule-8-4-1-remotely-started-services-via-rpc, Remotely Started Services via RPC>> | Identifies remote execution of Windows services over remote procedure call (RPC). This could be indicative of lateral movement, but will be noisy if commonly done by administrators." | update | 102 

|<<prebuilt-rule-8-4-1-remote-scheduled-task-creation, Remote Scheduled Task Creation>> | Identifies remote scheduled task creations on a target host. This could be indicative of adversary lateral movement. | update | 102 

|<<prebuilt-rule-8-4-1-adobe-hijack-persistence, Adobe Hijack Persistence>> | Detects writing executable files that will be automatically launched by Adobe on launch. | update | 102 

|<<prebuilt-rule-8-4-1-account-configured-with-never-expiring-password, Account Configured with Never-Expiring Password>> | Detects the creation and modification of an account with the "Don't Expire Password" option Enabled. Attackers can abuse this misconfiguration to persist in the domain and maintain long-term access using compromised accounts with this property. | update | 102 

|<<prebuilt-rule-8-4-1-creation-of-a-hidden-local-user-account, Creation of a Hidden Local User Account>> | Identifies the creation of a hidden local user account by appending the dollar sign to the account name. This is sometimes done by attackers to increase access to a system and avoid appearing in the results of accounts listing using the net users command. | update | 102 

|<<prebuilt-rule-8-4-1-suspicious-startup-shell-folder-modification, Suspicious Startup Shell Folder Modification>> | Identifies suspicious startup shell folder modifications to change the default Startup directory in order to bypass detections monitoring file creation in the Windows Startup folder. | update | 102 

|<<prebuilt-rule-8-4-1-local-scheduled-task-creation, Local Scheduled Task Creation>> | Indicates the creation of a scheduled task. Adversaries can use these to establish persistence, move laterally, and/or escalate privileges. | update | 101 

|<<prebuilt-rule-8-4-1-potential-modification-of-accessibility-binaries, Potential Modification of Accessibility Binaries>> | Windows contains accessibility features that may be launched with a key combination before a user has logged in. An adversary can modify the way these programs are launched to get a command prompt or backdoor without logging in to the system. | update | 102 

|<<prebuilt-rule-8-4-1-account-password-reset-remotely, Account Password Reset Remotely>> | Identifies an attempt to reset a potentially privileged account password remotely. Adversaries may manipulate account passwords to maintain access or evade password duration policies and preserve compromised credentials. | update | 101 

|<<prebuilt-rule-8-4-1-startup-or-run-key-registry-modification, Startup or Run Key Registry Modification>> | Identifies run key or startup key registry modifications. In order to survive reboots and other system interrupts, attackers will modify run keys within the registry or leverage startup folder items as a form of persistence. | update | 102 

|<<prebuilt-rule-8-4-1-a-scheduled-task-was-created, A scheduled task was created>> | Indicates the creation of a scheduled task using Windows event logs. Adversaries can use these to establish persistence, move laterally, and/or escalate privileges. | update | 2 

|<<prebuilt-rule-8-4-1-a-scheduled-task-was-updated, A scheduled task was updated>> | Indicates the update of a scheduled task using Windows event logs. Adversaries can use these to establish persistence, by changing the configuration of a legit scheduled task. Some changes such as disabling or enabling a scheduled task are common and may may generate noise. | update | 2 

|<<prebuilt-rule-8-4-1-adminsdholder-sdprop-exclusion-added, AdminSDHolder SDProp Exclusion Added>> | Identifies a modification on the dsHeuristics attribute on the bit that holds the configuration of groups excluded from the SDProp process. The SDProp compares the permissions on protected objects with those defined on the AdminSDHolder object. If the permissions on any of the protected accounts and groups do not match, the permissions on the protected accounts and groups are reset to match those of the domain's AdminSDHolder object, meaning that groups excluded will remain unchanged. Attackers can abuse this misconfiguration to maintain long-term access to privileged accounts in these groups. | update | 102 

|<<prebuilt-rule-8-4-1-startup-persistence-by-a-suspicious-process, Startup Persistence by a Suspicious Process>> | Identifies files written to or modified in the startup folder by commonly abused processes. Adversaries may use this technique to maintain persistence. | update | 102 

|<<prebuilt-rule-8-4-1-startup-folder-persistence-via-unsigned-process, Startup Folder Persistence via Unsigned Process>> | Identifies files written or modified in the startup folder by unsigned processes. Adversaries may abuse this technique to maintain persistence in an environment. | update | 102 

|<<prebuilt-rule-8-4-1-persistent-scripts-in-the-startup-directory, Persistent Scripts in the Startup Directory>> | Identifies script engines creating files in the Startup folder, or the creation of script files in the Startup folder. Adversaries may abuse this technique to maintain persistence in an environment. | update | 102 

|<<prebuilt-rule-8-4-1-component-object-model-hijacking, Component Object Model Hijacking>> | Identifies Component Object Model (COM) hijacking via registry modification. Adversaries may establish persistence by executing malicious content triggered by hijacked references to COM objects. | update | 102 

|<<prebuilt-rule-8-4-1-system-shells-via-services, System Shells via Services>> | Windows services typically run as SYSTEM and can be used as a privilege escalation opportunity. Malware or penetration testers may run a shell as a service to gain SYSTEM permissions. | update | 102 

|<<prebuilt-rule-8-4-1-user-added-to-privileged-group, User Added to Privileged Group>> | Identifies a user being added to a privileged group in Active Directory. Privileged accounts and groups in Active Directory are those to which powerful rights, privileges, and permissions are granted that allow them to perform nearly any action in Active Directory and on domain-joined systems. | update | 102 

|<<prebuilt-rule-8-4-1-user-account-creation, User Account Creation>> | Identifies attempts to create new users. This is sometimes done by attackers to increase access or establish persistence on a system or domain. | update | 102 

|<<prebuilt-rule-8-4-1-potential-application-shimming-via-sdbinst, Potential Application Shimming via Sdbinst>> | The Application Shim was created to allow for backward compatibility of software as the operating system codebase changes over time. This Windows functionality has been abused by attackers to stealthily gain persistence and arbitrary code execution in legitimate Windows processes. | update | 102 

|<<prebuilt-rule-8-4-1-persistence-via-update-orchestrator-service-hijack, Persistence via Update Orchestrator Service Hijack>> | Identifies potential hijacking of the Microsoft Update Orchestrator Service to establish persistence with an integrity level of SYSTEM. | update | 102 

|<<prebuilt-rule-8-4-1-persistence-via-wmi-event-subscription, Persistence via WMI Event Subscription>> | An adversary can use Windows Management Instrumentation (WMI) to install event filters, providers, consumers, and bindings that execute code when a defined event occurs. Adversaries may use the capabilities of WMI to subscribe to an event and execute arbitrary code when that event occurs, providing persistence on a system. | update | 102 

|<<prebuilt-rule-8-4-1-persistence-via-wmi-standard-registry-provider, Persistence via WMI Standard Registry Provider>> | Identifies use of the Windows Management Instrumentation StdRegProv (registry provider) to modify commonly abused registry locations for persistence. | update | 101 

|<<prebuilt-rule-8-4-1-web-shell-detection-script-process-child-of-common-web-processes, Web Shell Detection: Script Process Child of Common Web Processes>> | Identifies suspicious commands executed via a web server, which may suggest a vulnerability and remote shell access. | update | 102 

|<<prebuilt-rule-8-4-1-process-creation-via-secondary-logon, Process Creation via Secondary Logon>> | Identifies process creation with alternate credentials. Adversaries may create a new process with a different token to escalate privileges and bypass access controls. | update | 2 

|<<prebuilt-rule-8-4-1-disabling-user-account-control-via-registry-modification, Disabling User Account Control via Registry Modification>> | User Account Control (UAC) can help mitigate the impact of malware on Windows hosts. With UAC, apps and tasks always run in the security context of a non-administrator account, unless an administrator specifically authorizes administrator-level access to the system. This rule identifies registry value changes to bypass User Access Control (UAC) protection. | update | 102 

|<<prebuilt-rule-8-4-1-startup-logon-script-added-to-group-policy-object, Startup/Logon Script added to Group Policy Object>> | Detects the modification of Group Policy Objects (GPO) to add a startup/logon script to users or computer objects. | update | 102 

|<<prebuilt-rule-8-4-1-group-policy-abuse-for-privilege-addition, Group Policy Abuse for Privilege Addition>> | Detects the first occurrence of a modification to Group Policy Object Attributes to add privileges to user accounts or use them to add users as local admins. | update | 102 

|<<prebuilt-rule-8-4-1-scheduled-task-execution-at-scale-via-gpo, Scheduled Task Execution at Scale via GPO>> | Detects the modification of Group Policy Object attributes to execute a scheduled task in the objects controlled by the GPO. | update | 102 

|<<prebuilt-rule-8-4-1-potential-privilege-escalation-via-installerfiletakeover, Potential Privilege Escalation via InstallerFileTakeOver>> | Identifies a potential exploitation of InstallerTakeOver (CVE-2021-41379) default PoC execution. Successful exploitation allows an unprivileged user to escalate privileges to SYSTEM. | update | 102 

|<<prebuilt-rule-8-4-1-suspicious-dll-loaded-for-persistence-or-privilege-escalation, Suspicious DLL Loaded for Persistence or Privilege Escalation>> | Identifies the loading of a non Microsoft signed DLL that is missing on a default Windows install (phantom DLL) or one that can be loaded from a different location by a native Windows process. This may be abused to persist or elevate privileges via privileged file write vulnerabilities. | update | 102 

|<<prebuilt-rule-8-4-1-suspicious-print-spooler-spl-file-created, Suspicious Print Spooler SPL File Created>> | Detects attempts to exploit privilege escalation vulnerabilities related to the Print Spooler service including CVE-2020-1048 and CVE-2020-1337. | update | 102 

|<<prebuilt-rule-8-4-1-remote-computer-account-dnshostname-update, Remote Computer Account DnsHostName Update>> | Identifies the remote update to a computer account's DnsHostName attribute. If the new value set is a valid domain controller DNS hostname and the subject computer name is not a domain controller, then it's highly likely a preparation step to exploit CVE-2022-26923 in an attempt to elevate privileges from a standard domain user to domain admin privileges. | update | 101 

|<<prebuilt-rule-8-4-1-uac-bypass-attempt-via-privileged-ifileoperation-com-interface, UAC Bypass Attempt via Privileged IFileOperation COM Interface>> | Identifies attempts to bypass User Account Control (UAC) via DLL side-loading. Attackers may attempt to bypass UAC to stealthily execute code with elevated permissions. | update | 101 

|<<prebuilt-rule-8-4-1-bypass-uac-via-event-viewer, Bypass UAC via Event Viewer>> | Identifies User Account Control (UAC) bypass via eventvwr.exe. Attackers bypass UAC to stealthily execute code with elevated permissions. | update | 102 

|<<prebuilt-rule-8-4-1-uac-bypass-attempt-via-windows-directory-masquerading, UAC Bypass Attempt via Windows Directory Masquerading>> | Identifies an attempt to bypass User Account Control (UAC) by masquerading as a Microsoft trusted Windows directory. Attackers may bypass UAC to stealthily execute code with elevated permissions. | update | 102 

|<<prebuilt-rule-8-4-1-uac-bypass-via-windows-firewall-snap-in-hijack, UAC Bypass via Windows Firewall Snap-In Hijack>> | Identifies attempts to bypass User Account Control (UAC) by hijacking the Microsoft Management Console (MMC) Windows Firewall snap-in. Attackers bypass UAC to stealthily execute code with elevated permissions. | update | 102 

|<<prebuilt-rule-8-4-1-unusual-parent-child-relationship, Unusual Parent-Child Relationship>> | Identifies Windows programs run from unexpected parent processes. This could indicate masquerading or other strange activity on a system. | update | 102 

|<<prebuilt-rule-8-4-1-privilege-escalation-via-rogue-named-pipe-impersonation, Privilege Escalation via Rogue Named Pipe Impersonation>> | Identifies a privilege escalation attempt via rogue named pipe impersonation. An adversary may abuse this technique by masquerading as a known named pipe and manipulating a privileged process to connect to it. | update | 101 

|<<prebuilt-rule-8-4-1-gcp-kubernetes-rolebindings-created-or-patched, GCP Kubernetes Rolebindings Created or Patched>> | Identifies the creation or patching of potentially malicious role bindings. Users can use role bindings and cluster role bindings to assign roles to Kubernetes subjects (users, groups, or service accounts). | deprecated | 102 

|==============================================
