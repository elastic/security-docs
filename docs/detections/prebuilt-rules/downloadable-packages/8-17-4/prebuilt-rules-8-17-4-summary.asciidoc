[[prebuilt-rule-8-17-4-prebuilt-rules-8-17-4-summary]]
[role="xpack"]
== Update v8.17.4

This section lists all updates associated with version 8.17.4 of the Fleet integration *Prebuilt Security Detection Rules*.


[width="100%",options="header"]
|==============================================
|Rule |Description |Status |Version

|<<prebuilt-rule-8-17-4-aws-ec2-user-data-retrieval-for-ec2-instance, AWS EC2 User Data Retrieval for EC2 Instance>> | Identifies discovery request `DescribeInstanceAttribute` with the attribute userData and instanceId in AWS CloudTrail logs. This may indicate an attempt to retrieve user data from an EC2 instance. Adversaries may use this information to gather sensitive data from the instance such as hardcoded credentials or to identify potential vulnerabilities. This is a [New Terms](https://www.elastic.co/guide/en/security/current/rules-ui-create.html#create-new-terms-rule) rule that identifies when `aws.cloudtrail.user_identity.arn` requests the user data for a specific `aws.cloudtrail.flattened.request_parameters.instanceId` from an EC2 instance in the last 14 days. | new | 3 

|<<prebuilt-rule-8-17-4-process-backgrounded-by-unusual-parent, Process Backgrounded by Unusual Parent>> | This rule identifies processes that are backgrounded by an unusual parent process. This behavior may indicate a process attempting to evade detection by hiding its parent process. | new | 1 

|<<prebuilt-rule-8-17-4-suspicious-usage-of-bpf-probe-write-user-helper, Suspicious Usage of bpf_probe_write_user Helper>> | This rule monitors the syslog log file for messages related to instances of a program using the `bpf_probe_write_user` helper. The `bpf_probe_write_user` helper is used to write data to user space from a BPF program. Unauthorized use of this helper can be indicative of an eBPF rootkit or other malicious activity. | new | 1 

|<<prebuilt-rule-8-17-4-potential-file-transfer-via-curl-for-windows, Potential File Transfer via Curl for Windows>> | Identifies Curl for Windows making an HTTP request. Adversaries could abuse Curl to download files or upload data to a remote URL. | new | 1 

|<<prebuilt-rule-8-17-4-command-execution-via-forfiles, Command Execution via ForFiles>> | Detects attempts to execute a command via the forfiles Windows utility. Adversaries may use this utility to proxy execution via a trusted parent process. | new | 1 

|<<prebuilt-rule-8-17-4-file-with-right-to-left-override-character-rtlo-created-executed, File with Right-to-Left Override Character (RTLO) Created/Executed>> | Identifies the creation or execution of files or processes with names containing the Right-to-Left Override (RTLO) character, which can be used to disguise the file extension and trick users into executing malicious files. | new | 1 

|<<prebuilt-rule-8-17-4-execution-of-a-downloaded-windows-script, Execution of a Downloaded Windows Script>> | Identifies the creation of a Windows script downloaded from the internet followed by the execution of a scripting utility. Adversaries may use Windows script files for initial access and execution. | new | 1 

|<<prebuilt-rule-8-17-4-web-application-suspicious-activity-post-request-declined, Web Application Suspicious Activity: POST Request Declined>> | A POST request to a web application returned a 403 response, which indicates the web application declined to process the request because the action requested was not allowed. | update | 103 

|<<prebuilt-rule-8-17-4-web-application-suspicious-activity-unauthorized-method, Web Application Suspicious Activity: Unauthorized Method>> | A request to a web application returned a 405 response, which indicates the web application declined to process the request because the HTTP method is not allowed for the resource. | update | 103 

|<<prebuilt-rule-8-17-4-web-application-suspicious-activity-sqlmap-user-agent, Web Application Suspicious Activity: sqlmap User Agent>> | This is an example of how to detect an unwanted web client user agent. This search matches the user agent for sqlmap 1.3.11, which is a popular FOSS tool for testing web applications for SQL injection vulnerabilities. | update | 103 

|<<prebuilt-rule-8-17-4-suspicious-file-downloaded-from-google-drive, Suspicious File Downloaded from Google Drive>> | Identifies suspicious file download activity from a Google Drive URL. This could indicate an attempt to deliver phishing payloads via a trusted webservice. | update | 5 

|<<prebuilt-rule-8-17-4-potential-non-standard-port-ssh-connection, Potential Non-Standard Port SSH connection>> | Identifies potentially malicious processes communicating via a port paring typically not associated with SSH. For example, SSH over port 2200 or port 2222 as opposed to the traditional port 22. Adversaries may make changes to the standard port a protocol uses to bypass filtering or muddle analysis/parsing of network data. | update | 7 

|<<prebuilt-rule-8-17-4-potential-cookies-theft-via-browser-debugging, Potential Cookies Theft via Browser Debugging>> | Identifies the execution of a Chromium based browser with the debugging process argument, which may indicate an attempt to steal authentication cookies. An adversary may steal web application or service session cookies and use them to gain access web applications or Internet services as an authenticated user without needing credentials. | update | 208 

|<<prebuilt-rule-8-17-4-active-directory-forced-authentication-from-linux-host-smb-named-pipes, Active Directory Forced Authentication from Linux Host - SMB Named Pipes>> | Identifies a potential forced authentication using related SMB named pipes. Attackers may attempt to force targets to authenticate to a host controlled by them to capture hashes or enable relay attacks. | update | 4 

|<<prebuilt-rule-8-17-4-agent-spoofing-mismatched-agent-id, Agent Spoofing - Mismatched Agent ID>> | Detects events that have a mismatch on the expected event agent ID. The status "agent_id_mismatch/mismatch" occurs when the expected agent ID associated with the API key does not match the actual agent ID in an event. This could indicate attempts to spoof events in order to masquerade actual activity to evade detection. | update | 103 

|<<prebuilt-rule-8-17-4-agent-spoofing-multiple-hosts-using-same-agent, Agent Spoofing - Multiple Hosts Using Same Agent>> | Detects when multiple hosts are using the same agent ID. This could occur in the event of an agent being taken over and used to inject illegitimate documents into an instance as an attempt to spoof events in order to masquerade actual activity to evade detection. | update | 103 

|<<prebuilt-rule-8-17-4-webserver-access-logs-deleted, WebServer Access Logs Deleted>> | Identifies the deletion of WebServer access logs. This may indicate an attempt to evade detection or destroy forensic evidence on a system. | update | 208 

|<<prebuilt-rule-8-17-4-tampering-of-shell-command-line-history, Tampering of Shell Command-Line History>> | Adversaries may attempt to clear or disable the Bash command-line history in an attempt to evade detection or forensic investigations. | update | 108 

|<<prebuilt-rule-8-17-4-elastic-agent-service-terminated, Elastic Agent Service Terminated>> | Identifies the Elastic endpoint agent has stopped and is no longer running on the host. Adversaries may attempt to disable security monitoring tools in an attempt to evade detection or prevention capabilities during an intrusion. This may also indicate an issue with the agent itself and should be addressed to ensure defensive measures are back in a stable state. | update | 108 

|<<prebuilt-rule-8-17-4-rot-encoded-python-script-execution, ROT Encoded Python Script Execution>> | Identifies the execution of a Python script that uses the ROT cipher for letters substitution. Adversaries may use this method to encode and obfuscate part of their malicious code in legit python packages. | update | 2 

|<<prebuilt-rule-8-17-4-masquerading-space-after-filename, Masquerading Space After Filename>> | This rules identifies a process created from an executable with a space appended to the end of the filename. This may indicate an attempt to masquerade a malicious file as benign to gain user execution. When a space is added to the end of certain files, the OS will execute the file according to it's true filetype instead of it's extension. Adversaries can hide a program's true filetype by changing the extension of the file. They can then add a space to the end of the name so that the OS automatically executes the file when it's double-clicked. | update | 8 

|<<prebuilt-rule-8-17-4-timestomping-using-touch-command, Timestomping using Touch Command>> | Timestomping is an anti-forensics technique which is used to modify the timestamps of a file, often to mimic files that are in the same folder. | update | 107 

|<<prebuilt-rule-8-17-4-virtual-machine-fingerprinting-via-grep, Virtual Machine Fingerprinting via Grep>> | An adversary may attempt to get detailed information about the operating system and hardware. This rule identifies common locations used to discover virtual machine hardware by a non-root user. This technique has been used by the Pupy RAT and other malware. | update | 106 

|<<prebuilt-rule-8-17-4-aws-ssm-sendcommand-with-run-shell-command-parameters, AWS SSM `SendCommand` with Run Shell Command Parameters>> | Identifies the use of the AWS Systems Manager (SSM) `SendCommand` API with the either `AWS-RunShellScript` or `AWS-RunPowerShellScript` parameters. The `SendCommand` API call allows users to execute commands on EC2 instances using the SSM service. Adversaries may use this technique to execute commands on EC2 instances without the need for SSH or RDP access. This behavior may indicate an adversary attempting to execute commands on an EC2 instance for malicious purposes. This is a [New Terms](https://www.elastic.co/guide/en/security/current/rules-ui-create.html#create-new-terms-rule) rule that only flags when this behavior is observed for the first time on a host in the last 7 days. | update | 4 

|<<prebuilt-rule-8-17-4-eggshell-backdoor-execution, EggShell Backdoor Execution>> | Identifies the execution of and EggShell Backdoor. EggShell is a known post exploitation tool for macOS and Linux. | update | 104 

|<<prebuilt-rule-8-17-4-potential-widespread-malware-infection-across-multiple-hosts, Potential Widespread Malware Infection Across Multiple Hosts>> | This rule uses alert data to determine when a malware signature is triggered in multiple hosts. Analysts can use this to prioritize triage and response, as this can potentially indicate a widespread malware infection. | update | 3 

|<<prebuilt-rule-8-17-4-potential-java-jndi-exploitation-attempt, Potential JAVA/JNDI Exploitation Attempt>> | Identifies an outbound network connection by JAVA to LDAP, RMI or DNS standard ports followed by a suspicious JAVA child processes. This may indicate an attempt to exploit a JAVA/NDI (Java Naming and Directory Interface) injection vulnerability. | update | 105 

|<<prebuilt-rule-8-17-4-my-first-rule, My First Rule>> | This rule helps you test and practice using alerts with Elastic Security as you get set up. It’s not a sign of threat activity. | update | 5 

|<<prebuilt-rule-8-17-4-zoom-meeting-with-no-passcode, Zoom Meeting with no Passcode>> | This rule identifies Zoom meetings that are created without a passcode. Meetings without a passcode are susceptible to Zoombombing. Zoombombing is carried out by taking advantage of Zoom sessions that are not protected with a passcode. Zoombombing refers to the unwanted, disruptive intrusion, generally by Internet trolls and hackers, into a video conference call. In a typical Zoombombing incident, a teleconferencing session is hijacked by the insertion of material that is lewd, obscene, racist, or antisemitic in nature, typically resulting of the shutdown of the session. | update | 104 

|<<prebuilt-rule-8-17-4-multiple-alerts-in-different-att-ck-tactics-on-a-single-host, Multiple Alerts in Different ATT&CK Tactics on a Single Host>> | This rule uses alert data to determine when multiple alerts in different phases of an attack involving the same host are triggered. Analysts can use this to prioritize triage and response, as these hosts are more likely to be compromised. | update | 5 

|<<prebuilt-rule-8-17-4-multiple-alerts-involving-a-user, Multiple Alerts Involving a User>> | This rule uses alert data to determine when multiple different alerts involving the same user are triggered. Analysts can use this to prioritize triage and response, as these users are more likely to be compromised. | update | 4 

|<<prebuilt-rule-8-17-4-modification-of-standard-authentication-module-or-configuration, Modification of Standard Authentication Module or Configuration>> | Adversaries may modify the standard authentication module for persistence via patching the normal authorization process or modifying the login configuration to allow unauthorized access or elevate privileges. | update | 205 

|<<prebuilt-rule-8-17-4-bash-shell-profile-modification, Bash Shell Profile Modification>> | Both ~/.bash_profile and ~/.bashrc are files containing shell commands that are run when Bash is invoked. These files are executed in a user's context, either interactively or non-interactively, when a user logs in so that their environment is set correctly. Adversaries may abuse this to establish persistence by executing malicious content triggered by a user’s shell. | update | 105 

|<<prebuilt-rule-8-17-4-ssh-authorized-keys-file-modification, SSH Authorized Keys File Modification>> | The Secure Shell (SSH) authorized_keys file specifies which users are allowed to log into a server using public key authentication. Adversaries may modify it to maintain persistence on a victim host by adding their own public key(s). | update | 207 

|<<prebuilt-rule-8-17-4-potential-privilege-escalation-via-sudoers-file-modification, Potential Privilege Escalation via Sudoers File Modification>> | A sudoers file specifies the commands users or groups can run and from which terminals. Adversaries can take advantage of these configurations to execute commands as other users or spawn processes with higher privileges. | update | 105 

|<<prebuilt-rule-8-17-4-suid-sgid-bit-set, SUID/SGID Bit Set>> | An adversary may add the setuid or setgid bit to a file or directory in order to run a file with the privileges of the owning user or group. An adversary can take advantage of this to either do a shell escape or exploit a vulnerability in an application with the setuid or setgid bit to get code running in a different user’s context. Additionally, adversaries can use this mechanism on their own malware to make sure they're able to execute in elevated contexts in the future. | update | 106 

|<<prebuilt-rule-8-17-4-sudo-heap-based-buffer-overflow-attempt, Sudo Heap-Based Buffer Overflow Attempt>> | Identifies the attempted use of a heap-based buffer overflow vulnerability for the Sudo binary in Unix-like systems (CVE-2021-3156). Successful exploitation allows an unprivileged user to escalate to the root user. | update | 105 

|<<prebuilt-rule-8-17-4-sudoers-file-modification, Sudoers File Modification>> | A sudoers file specifies the commands that users or groups can run and from which terminals. Adversaries can take advantage of these configurations to execute commands as other users or spawn processes with higher privileges. | update | 206 

|<<prebuilt-rule-8-17-4-aws-cloudtrail-log-created, AWS CloudTrail Log Created>> | Identifies the creation of an AWS log trail that specifies the settings for delivery of log data. | update | 208 

|<<prebuilt-rule-8-17-4-aws-s3-unauthenticated-bucket-access-by-rare-source, AWS S3 Unauthenticated Bucket Access by Rare Source>> | Identifies AWS CloudTrail events where an unauthenticated source is attempting to access an S3 bucket. This activity may indicate a misconfigured S3 bucket policy that allows public access to the bucket, potentially exposing sensitive data to unauthorized users. Adversaries can specify `--no-sign-request` in the AWS CLI to retrieve objects from an S3 bucket without authentication. This is a [New Terms](https://www.elastic.co/guide/en/security/current/rules-ui-create.html#create-new-terms-rule) rule, which means it will only trigger once for each unique value of the `source.address` field that has not been seen making this API request within the last 7 days. This field contains the IP address of the source making the request. | update | 2 

|<<prebuilt-rule-8-17-4-aws-ec2-admin-credential-fetch-via-assumed-role, AWS EC2 Admin Credential Fetch via Assumed Role>> | Identifies the first occurrence of a user identity in AWS using `GetPassword` for the administrator password of an EC2 instance with an assumed role. Adversaries may use this API call to escalate privileges or move laterally within EC2 instances. | update | 4 

|<<prebuilt-rule-8-17-4-aws-iam-compromisedkeyquarantine-policy-attached-to-user, AWS IAM CompromisedKeyQuarantine Policy Attached to User>> | This rule looks for use of the IAM `AttachUserPolicy` API operation to attach the `CompromisedKeyQuarantine` or `CompromisedKeyQuarantineV2` AWS managed policies to an existing IAM user. This policy denies access to certain actions and is applied by the AWS team in the event that an IAM user's credentials have been compromised or exposed publicly. | update | 2 

|<<prebuilt-rule-8-17-4-first-time-seen-aws-secret-value-accessed-in-secrets-manager, First Time Seen AWS Secret Value Accessed in Secrets Manager>> | An adversary with access to a compromised AWS service such as an EC2 instance, Lambda function, or other service may attempt to leverage the compromised service to access secrets in AWS Secrets Manager. This rule looks for the first time a specific user identity has programmatically retrieved a secret value from Secrets Manager using the `GetSecretValue` or `BatchGetSecretValue` actions. This rule assumes that AWS services such as Lambda functions and EC2 instances are setup with IAM role's assigned that have the necessary permissions to access the secrets in Secrets Manager. An adversary with access to a compromised AWS service such as an EC2 instance, Lambda function, or other service would rely on the compromised service's IAM role to access the secrets in Secrets Manager. | update | 313 

|<<prebuilt-rule-8-17-4-rapid-secret-retrieval-attempts-from-aws-secretsmanager, Rapid Secret Retrieval Attempts from AWS SecretsManager>> | This rule attempts to identify rapid secret retrieval attempts from AWS SecretsManager. Adversaries may attempt to retrieve secrets from the Secrets Manager programmatically using the `GetSecretValue` or `BatchGetSecretValue` API actions. | update | 3 

|<<prebuilt-rule-8-17-4-aws-systems-manager-securestring-parameter-request-with-decryption-flag, AWS Systems Manager SecureString Parameter Request with Decryption Flag>> | Detects the first occurrence of a user identity accessing AWS Systems Manager (SSM) SecureString parameters using the GetParameter or GetParameters API actions with credentials in the request parameters. This could indicate that the user is accessing sensitive information. This rule detects when a user accesses a SecureString parameter with the `withDecryption` parameter set to true. This is a [NewTerms](https://www.elastic.co/guide/en/security/current/rules-ui-create.html#create-new-terms-rule) rule that detects the first occurrence of a specific AWS ARN accessing SecureString parameters with decryption within the last 10 days. | update | 3 

|<<prebuilt-rule-8-17-4-aws-management-console-brute-force-of-root-user-identity, AWS Management Console Brute Force of Root User Identity>> | Identifies a high number of failed authentication attempts to the AWS management console for the Root user identity. An adversary may attempt to brute force the password for the Root user identity, as it has complete access to all services and resources for the AWS account. | update | 208 

|<<prebuilt-rule-8-17-4-aws-configuration-recorder-stopped, AWS Configuration Recorder Stopped>> | Identifies an AWS configuration change to stop recording a designated set of resources. | update | 207 

|<<prebuilt-rule-8-17-4-aws-ec2-network-access-control-list-deletion, AWS EC2 Network Access Control List Deletion>> | Identifies the deletion of an Amazon Elastic Compute Cloud (EC2) network access control list (ACL) or one of its ingress/egress entries. | update | 207 

|<<prebuilt-rule-8-17-4-aws-elasticache-security-group-created, AWS ElastiCache Security Group Created>> | Identifies when an ElastiCache security group has been created. | update | 207 

|<<prebuilt-rule-8-17-4-aws-elasticache-security-group-modified-or-deleted, AWS ElastiCache Security Group Modified or Deleted>> | Identifies when an ElastiCache security group has been modified or deleted. | update | 207 

|<<prebuilt-rule-8-17-4-aws-guardduty-detector-deletion, AWS GuardDuty Detector Deletion>> | Identifies the deletion of an Amazon GuardDuty detector. Upon deletion, GuardDuty stops monitoring the environment and all existing findings are lost. | update | 207 

|<<prebuilt-rule-8-17-4-aws-rds-db-instance-restored, AWS RDS DB Instance Restored>> | An adversary with a set of compromised credentials may attempt to make copies of running or deleted RDS databases in order to evade defense mechanisms or access data. This rule identifies successful attempts to restore a DB instance using the RDS `RestoreDBInstanceFromDBSnapshot` or `RestoreDBInstanceFromS3` API operations. | update | 208 

|<<prebuilt-rule-8-17-4-route53-resolver-query-log-configuration-deleted, Route53 Resolver Query Log Configuration Deleted>> | Identifies when a Route53 Resolver Query Log Configuration is deleted. When a Route53 Resolver query log configuration is deleted, Resolver stops logging DNS queries and responses for the specified configuration. Adversaries may delete query log configurations to evade detection or cover their tracks. | update | 3 

|<<prebuilt-rule-8-17-4-aws-s3-bucket-configuration-deletion, AWS S3 Bucket Configuration Deletion>> | Identifies the deletion of various Amazon Simple Storage Service (S3) bucket configuration components. | update | 208 

|<<prebuilt-rule-8-17-4-aws-s3-bucket-expiration-lifecycle-configuration-added, AWS S3 Bucket Expiration Lifecycle Configuration Added>> | Identifies an expiration lifecycle configuration added to an S3 bucket. Lifecycle configurations can be used to manage objects in a bucket, including setting expiration policies. This rule detects when a lifecycle configuration is added to an S3 bucket, which could indicate that objects in the bucket will be automatically deleted after a specified period of time. This could be used to evade detection by deleting objects that contain evidence of malicious activity. | update | 3 

|<<prebuilt-rule-8-17-4-aws-s3-bucket-server-access-logging-disabled, AWS S3 Bucket Server Access Logging Disabled>> | Identifies when server access logging is disabled for an Amazon S3 bucket. Server access logs provide a detailed record of requests made to an S3 bucket. When server access logging is disabled for a bucket, it could indicate an adversary's attempt to impair defenses by disabling logs that contain evidence of malicious activity. | update | 2 

|<<prebuilt-rule-8-17-4-aws-sqs-queue-purge, AWS SQS Queue Purge>> | Identifies when an AWS Simple Queue Service (SQS) queue is purged. Adversaries may purge SQS queues to disrupt operations, delete messages, or impair monitoring and alerting mechanisms. This action can be used to evade detection and cover tracks by removing evidence of malicious activities. | update | 2 

|<<prebuilt-rule-8-17-4-first-occurrence-of-sts-getfederationtoken-request-by-user, First Occurrence of STS GetFederationToken Request by User>> | Identifies the first occurrence of an AWS Security Token Service (STS) `GetFederationToken` request made by a user within the last 10 days. The `GetFederationToken` API call allows users to request temporary security credentials to access AWS resources. Adversaries may use this API to obtain temporary credentials to access resources they would not normally have access to. | update | 2 

|<<prebuilt-rule-8-17-4-insecure-aws-ec2-vpc-security-group-ingress-rule-added, Insecure AWS EC2 VPC Security Group Ingress Rule Added>> | Identifies when a specified inbound (ingress) rule is added or adjusted for a VPC security group in AWS EC2. This rule detects when a security group rule is added that allows traffic from any IP address or from a specific IP address to common remote access ports, such as 22 (SSH) or 3389 (RDP). Adversaries may add these rules to allow remote access to VPC instances from any location, increasing the attack surface and potentially exposing the instances to unauthorized access. | update | 2 

|<<prebuilt-rule-8-17-4-aws-waf-access-control-list-deletion, AWS WAF Access Control List Deletion>> | Identifies the deletion of a specified AWS Web Application Firewall (WAF) access control list. | update | 207 

|<<prebuilt-rule-8-17-4-aws-waf-rule-or-rule-group-deletion, AWS WAF Rule or Rule Group Deletion>> | Identifies the deletion of a specified AWS Web Application Firewall (WAF) rule or rule group. | update | 207 

|<<prebuilt-rule-8-17-4-aws-ec2-deprecated-ami-discovery, AWS EC2 Deprecated AMI Discovery>> | Identifies when a user has queried for deprecated Amazon Machine Images (AMIs) in AWS. This may indicate an adversary whom is looking for outdated AMIs that may be vulnerable to exploitation. While deprecated AMIs are not inherently malicious or indicate breach, they may be more susceptible to vulnerabilities and should be investigated for potential security risks. | update | 2 

|<<prebuilt-rule-8-17-4-aws-ec2-multi-region-describeinstances-api-calls, AWS EC2 Multi-Region DescribeInstances API Calls>> | Identifies when a single AWS resource is making `DescribeInstances` API calls in more than 10 regions within a 30-second window. This could indicate a potential threat actor attempting to discover the AWS infrastructure across multiple regions using compromised credentials or a compromised instance. Adversaries may use this information to identify potential targets for further exploitation or to gain a better understanding of the target's infrastructure. | update | 4 

|<<prebuilt-rule-8-17-4-aws-discovery-api-calls-via-cli-from-a-single-resource, AWS Discovery API Calls via CLI from a Single Resource>> | Detects when a single AWS resource is running multiple `Describe` and `List` API calls in a 10-second window. This behavior could indicate an actor attempting to discover the AWS infrastructure using compromised credentials or a compromised instance. Adversaries may use this information to identify potential targets for further exploitation or to gain a better understanding of the target's infrastructure. | update | 2 

|<<prebuilt-rule-8-17-4-aws-sts-getcalleridentity-api-called-for-the-first-time, AWS STS GetCallerIdentity API Called for the First Time>> | An adversary with access to a set of compromised credentials may attempt to verify that the credentials are valid and determine what account they are using. This rule looks for the first time an identity has called the STS `GetCallerIdentity` API operation in the last 15 days, which may be an indicator of compromised credentials. A legitimate user would not need to call this operation as they should know the account they are using. | update | 4 

|<<prebuilt-rule-8-17-4-aws-service-quotas-multi-region-getservicequota-requests, AWS Service Quotas Multi-Region `GetServiceQuota` Requests>> | Identifies when a single AWS resource is making `GetServiceQuota` API calls for the EC2 service quota L-1216C47A in more than 10 regions within a 30-second window. Quota code L-1216C47A represents on-demand instances which are used by adversaries to deploy malware and mine cryptocurrency. This could indicate a potential threat actor attempting to discover the AWS infrastructure across multiple regions using compromised credentials or a compromised instance. | update | 3 

|<<prebuilt-rule-8-17-4-aws-lambda-layer-added-to-existing-function, AWS Lambda Layer Added to Existing Function>> | Identifies when an Lambda Layer is added to an existing Lambda function. AWS layers are a way to share code and data across multiple functions. By adding a layer to an existing function, an attacker can persist or execute code in the context of the function. | update | 3 

|<<prebuilt-rule-8-17-4-first-time-aws-cloudformation-stack-creation-by-user, First Time AWS Cloudformation Stack Creation by User>> | This rule detects the first time a principal calls AWS Cloudwatch `CreateStack` or `CreateStackSet` API. Cloudformation is used to create a single collection of cloud resources called a stack, via a defined template file. An attacker with the appropriate privileges could leverage Cloudformation to create specific resources needed to further exploit the environment. This is a new terms rule that looks for the first instance of this behavior in the last 10 days for a role or IAM user within a particular account. | update | 2 

|<<prebuilt-rule-8-17-4-aws-ssm-command-document-created-by-rare-user, AWS SSM Command Document Created by Rare User>> | Identifies when an AWS Systems Manager (SSM) command document is created by a user who does not typically perform this action. Adversaries may create SSM command documents to execute commands on managed instances, potentially leading to unauthorized access, command and control, data exfiltration and more. | update | 2 

|<<prebuilt-rule-8-17-4-aws-ssm-sendcommand-execution-by-rare-user, AWS SSM `SendCommand` Execution by Rare User>> | Detects the execution of commands or scripts on EC2 instances using AWS Systems Manager (SSM), such as `RunShellScript`, `RunPowerShellScript` or custom documents. While legitimate users may employ these commands for management tasks, they can also be exploited by attackers with credentials to establish persistence, install malware, or execute reverse shells for further access to compromised instances. This is a [New Terms](https://www.elastic.co/guide/en/security/current/rules-ui-create.html#create-new-terms-rule) rule that looks for the first instance of this behavior by the `aws.cloudtrail.user_identity.arn` field in the last 7 days. | update | 211 

|<<prebuilt-rule-8-17-4-ec2-ami-shared-with-another-account, EC2 AMI Shared with Another Account>> | Identifies an AWS Amazon Machine Image (AMI) being shared with another AWS account. Adversaries with access may share an AMI with an external AWS account as a means of data exfiltration. AMIs can contain secrets, bash histories, code artifacts, and other sensitive data that adversaries may abuse if shared with unauthorized accounts. AMIs can be made publicly available accidentally as well. | update | 3 

|<<prebuilt-rule-8-17-4-aws-ec2-ebs-snapshot-shared-or-made-public, AWS EC2 EBS Snapshot Shared or Made Public>> | Identifies AWS EC2 EBS snaphots being shared with another AWS account or made public. EBS virtual disks can be copied into snapshots, which can then be shared with an external AWS account or made public. Adversaries may attempt this in order to copy the snapshot into an environment they control, to access the data. | update | 4 

|<<prebuilt-rule-8-17-4-aws-ec2-full-network-packet-capture-detected, AWS EC2 Full Network Packet Capture Detected>> | Identifies potential Traffic Mirroring in an Amazon Elastic Compute Cloud (EC2) instance. Traffic Mirroring is an Amazon VPC feature that you can use to copy network traffic from an Elastic network interface. This feature can potentially be abused to exfiltrate sensitive data from unencrypted internal traffic. | update | 207 

|<<prebuilt-rule-8-17-4-aws-ec2-vm-export-failure, AWS EC2 VM Export Failure>> | Identifies an attempt to export an AWS EC2 instance. A virtual machine (VM) export may indicate an attempt to extract or exfiltrate information. | update | 207 

|<<prebuilt-rule-8-17-4-aws-rds-snapshot-export, AWS RDS Snapshot Export>> | Identifies the export of an Amazon Relational Database Service (RDS) Aurora database snapshot. | update | 207 

|<<prebuilt-rule-8-17-4-aws-rds-db-snapshot-shared-with-another-account, AWS RDS DB Snapshot Shared with Another Account>> | Identifies an AWS RDS DB snapshot being shared with another AWS account. DB snapshots contain a full backup of an entire DB instance including sensitive data that can be abused if shared with unauthorized accounts or made public. Adversaries may use snapshots to restore a DB Instance in an environment they control as a means of data exfiltration. | update | 3 

|<<prebuilt-rule-8-17-4-aws-s3-bucket-policy-added-to-share-with-external-account, AWS S3 Bucket Policy Added to Share with External Account>> | Identifies an AWS S3 bucket policy change to share permissions with an external account. Adversaries may attempt to backdoor an S3 bucket by sharing it with an external account. This can be used to exfiltrate data or to provide access to other adversaries. This rule identifies changes to a bucket policy via the `PutBucketPolicy` API call where the policy includes an `Effect=Allow` statement that does not contain the AWS account ID of the bucket owner. | update | 3 

|<<prebuilt-rule-8-17-4-aws-s3-bucket-replicated-to-another-account, AWS S3 Bucket Replicated to Another Account>> | Identifies when the `PutBucketReplication` operation is used to replicate S3 objects to a bucket in another AWS account. Adversaries may use bucket replication to exfiltrate sensitive data to an environment they control. | update | 2 

|<<prebuilt-rule-8-17-4-aws-sns-email-subscription-by-rare-user, AWS SNS Email Subscription by Rare User>> | Identifies when an SNS topic is subscribed to by an email address of a user who does not typically perform this action. Adversaries may subscribe to an SNS topic to collect sensitive information or exfiltrate data via an external email address. | update | 2 

|<<prebuilt-rule-8-17-4-aws-eventbridge-rule-disabled-or-deleted, AWS EventBridge Rule Disabled or Deleted>> | Identifies when a user has disabled or deleted an EventBridge rule. This activity can result in an unintended loss of visibility in applications or a break in the flow with other AWS services. | update | 207 

|<<prebuilt-rule-8-17-4-aws-ec2-encryption-disabled, AWS EC2 Encryption Disabled>> | Identifies disabling of Amazon Elastic Block Store (EBS) encryption by default in the current region. Disabling encryption by default does not change the encryption status of your existing volumes. | update | 207 

|<<prebuilt-rule-8-17-4-aws-efs-file-system-or-mount-deleted, AWS EFS File System or Mount Deleted>> | Detects when an EFS File System or Mount is deleted. An adversary could break any file system using the mount target that is being deleted, which might disrupt instances or applications using those mounts. The mount must be deleted prior to deleting the File System, or the adversary will be unable to delete the File System. | update | 207 

|<<prebuilt-rule-8-17-4-aws-iam-group-deletion, AWS IAM Group Deletion>> | Identifies the deletion of a specified AWS Identity and Access Management (IAM) resource group. Deleting a resource group does not delete resources that are members of the group; it only deletes the group structure. | update | 207 

|<<prebuilt-rule-8-17-4-aws-kms-customer-managed-key-disabled-or-scheduled-for-deletion, AWS KMS Customer Managed Key Disabled or Scheduled for Deletion>> | Identifies attempts to disable or schedule the deletion of an AWS KMS Customer Managed Key (CMK). Deleting an AWS KMS key is destructive and potentially dangerous. It deletes the key material and all metadata associated with the KMS key and is irreversible. After a KMS key is deleted, the data that was encrypted under that KMS key can no longer be decrypted, which means that data becomes unrecoverable. | update | 107 

|<<prebuilt-rule-8-17-4-aws-rds-security-group-deletion, AWS RDS Security Group Deletion>> | Identifies the deletion of an Amazon Relational Database Service (RDS) Security group. | update | 207 

|<<prebuilt-rule-8-17-4-aws-deletion-of-rds-instance-or-cluster, AWS Deletion of RDS Instance or Cluster>> | Identifies the deletion of an Amazon Relational Database Service (RDS) Aurora database cluster, global database cluster, or database instance. | update | 207 

|<<prebuilt-rule-8-17-4-aws-rds-db-instance-or-cluster-deletion-protection-disabled, AWS RDS DB Instance or Cluster Deletion Protection Disabled>> | Identifies the modification of an AWS RDS DB instance or cluster to remove the deletionProtection feature. Deletion protection is enabled automatically for instances set up through the console and can be used to protect them from unintentional deletion activity. If disabled an instance or cluster can be deleted, destroying sensitive or critical information. Adversaries with the proper permissions can take advantage of this to set up future deletion events against a compromised environment. | update | 3 

|<<prebuilt-rule-8-17-4-aws-rds-instance-cluster-stoppage, AWS RDS Instance/Cluster Stoppage>> | Identifies that an Amazon Relational Database Service (RDS) cluster or instance has been stopped. | update | 207 

|<<prebuilt-rule-8-17-4-aws-rds-snapshot-deleted, AWS RDS Snapshot Deleted>> | Identifies the deletion of an AWS RDS DB snapshot. Snapshots contain a full backup of an entire DB instance. Unauthorized deletion of snapshots can make it impossible to recover critical or sensitive data. This rule detects deleted snapshots and instances modified so that backupRetentionPeriod is set to 0 which disables automated backups and is functionally similar to deleting the system snapshot. | update | 3 

|<<prebuilt-rule-8-17-4-potential-aws-s3-bucket-ransomware-note-uploaded, Potential AWS S3 Bucket Ransomware Note Uploaded>> | Identifies potential ransomware note being uploaded to an AWS S3 bucket. This rule detects the `PutObject` S3 API call with a common ransomware note file extension such as `.ransom`, or `.lock`. Adversaries with access to a misconfigured S3 bucket may retrieve, delete, and replace objects with ransom notes to extort victims. | update | 4 

|<<prebuilt-rule-8-17-4-aws-s3-object-encryption-using-external-kms-key, AWS S3 Object Encryption Using External KMS Key>> | Identifies `CopyObject` events within an S3 bucket using an AWS KMS key from an external account for encryption. Adversaries with access to a misconfigured S3 bucket and the proper permissions may encrypt objects with an external KMS key to deny their victims access to their own data. | update | 3 

|<<prebuilt-rule-8-17-4-aws-s3-object-versioning-suspended, AWS S3 Object Versioning Suspended>> | Identifies when object versioning is suspended for an Amazon S3 bucket. Object versioning allows for multiple versions of an object to exist in the same bucket. This allows for easy recovery of deleted or overwritten objects. When object versioning is suspended for a bucket, it could indicate an adversary's attempt to inhibit system recovery following malicious activity. Additionally, when versioning is suspended, buckets can then be deleted. | update | 3 

|<<prebuilt-rule-8-17-4-aws-iam-password-recovery-requested, AWS IAM Password Recovery Requested>> | Identifies AWS IAM password recovery requests. An adversary may attempt to gain unauthorized AWS access by abusing password recovery mechanisms. | update | 207 

|<<prebuilt-rule-8-17-4-aws-signin-single-factor-console-login-with-federated-user, AWS Signin Single Factor Console Login with Federated User>> | Identifies when a federated user logs into the AWS Management Console without using multi-factor authentication (MFA). Federated users are typically given temporary credentials to access AWS services. If a federated user logs into the AWS Management Console without using MFA, it may indicate a security risk, as MFA adds an additional layer of security to the authentication process. This could also indicate the abuse of STS tokens to bypass MFA requirements. | update | 3 

|<<prebuilt-rule-8-17-4-ssm-session-started-to-ec2-instance, SSM Session Started to EC2 Instance>> | Identifies the first occurrence of an AWS resource establishing a session via SSM to an EC2 instance. Adversaries may use AWS Systems Manager to establish a session to an EC2 instance to execute commands on the instance. This can be used to gain access to the instance and perform actions such as privilege escalation. This rule helps detect the first occurrence of this activity for a given AWS resource. | update | 2 

|<<prebuilt-rule-8-17-4-aws-ec2-instance-connect-ssh-public-key-uploaded, AWS EC2 Instance Connect SSH Public Key Uploaded>> | Identifies when a new SSH public key is uploaded to an AWS EC2 instance using the EC2 Instance Connect service. This action could indicate an adversary attempting to maintain access to the instance. The rule also detects the `SendSerialConsoleSSHPublicKey` or `SendSSHPublicKey` API actions, which are logged when manually uploading an SSH key to an EC2 instance or serial connection. It is important to know that this API call happens automatically by the EC2 Instance Connect service when a user connects to an EC2 instance using the EC2 Instance Connect service via the CLI or AWS Management Console. | update | 3 

|<<prebuilt-rule-8-17-4-aws-ec2-instance-console-login-via-assumed-role, AWS EC2 Instance Console Login via Assumed Role>> | Identifies a successful console login activity by an EC2 instance profile using an assumed role. This is uncommon behavior and could indicate an attacker using compromised credentials to further exploit an environment. An EC2 instance assumes a role using their EC2 ID as the session name. This rule looks for the pattern "i-" which is the beginning pattern for assumed role sessions started by an EC2 instance and a successful `ConsoleLogin` or `GetSigninToken` API call. | update | 2 

|<<prebuilt-rule-8-17-4-aws-ec2-network-access-control-list-creation, AWS EC2 Network Access Control List Creation>> | Identifies the creation of an AWS Elastic Compute Cloud (EC2) network access control list (ACL) or an entry in a network ACL with a specified rule number. | update | 207 

|<<prebuilt-rule-8-17-4-aws-ec2-route-table-modified-or-deleted, AWS EC2 Route Table Modified or Deleted>> | Identifies AWS CloudTrail events where an EC2 route table or association has been modified or deleted. Route table or association modifications can be used by attackers to disrupt network traffic, reroute communications, or maintain persistence in a compromised environment. This is a [New Terms](https://www.elastic.co/guide/en/security/current/rules-ui-create.html#create-new-terms-rule) rule that detects the first instance of this behavior by the `aws.cloudtrail.user_identity.arn` field in the last 10 days. | update | 208 

|<<prebuilt-rule-8-17-4-aws-ec2-security-group-configuration-change, AWS EC2 Security Group Configuration Change>> | Identifies a change to an AWS Security Group Configuration. A security group is like a virtual firewall, and modifying configurations may allow unauthorized access. Threat actors may abuse this to establish persistence, exfiltrate data, or pivot in an AWS environment. | update | 208 

|<<prebuilt-rule-8-17-4-aws-iam-login-profile-added-for-root, AWS IAM Login Profile Added for Root>> | Detects when an AWS IAM login profile is added to a root user account and is self-assigned. Adversaries, with temporary access to the root account, may add a login profile to the root user account to maintain access even if the original access key is rotated or disabled. | update | 2 

|<<prebuilt-rule-8-17-4-aws-iam-create-user-via-assumed-role-on-ec2-instance, AWS IAM Create User via Assumed Role on EC2 Instance>> | Detects the creation of an AWS Identity and Access Management (IAM) user initiated by an assumed role on an EC2 instance. Assumed roles allow users or services to temporarily adopt different AWS permissions, but the creation of IAM users through these roles—particularly from within EC2 instances—may indicate a compromised instance. Adversaries might exploit such permissions to establish persistence by creating new IAM users under unauthorized conditions. | update | 2 

|<<prebuilt-rule-8-17-4-aws-iam-group-creation, AWS IAM Group Creation>> | Identifies the creation of a group in AWS Identity and Access Management (IAM). Groups specify permissions for multiple users. Any user in a group automatically has the permissions that are assigned to the group. | update | 207 

|<<prebuilt-rule-8-17-4-aws-iam-roles-anywhere-profile-creation, AWS IAM Roles Anywhere Profile Creation>> | Identifies the creation of an AWS Roles Anywhere profile. AWS Roles Anywhere is a feature that allows you to use AWS Identity and Access Management (IAM) profiles to manage access to your AWS resources from any location via trusted anchors. This rule detects the creation of a profile that can be assumed from any service. Adversaries may create profiles tied to overly permissive roles to maintain access to AWS resources. Ensure that the profile creation is expected and that the trust policy is configured securely. | update | 3 

|<<prebuilt-rule-8-17-4-aws-iam-roles-anywhere-trust-anchor-created-with-external-ca, AWS IAM Roles Anywhere Trust Anchor Created with External CA>> | Identifies when an AWS IAM Roles Anywhere Trust Anchor with an external certificate authority is created. AWS Roles Anywhere profiles are legitimate profiles that can be created by administrators to allow access from any location. This rule detects when a trust anchor is created with an external certificate authority that is not managed by AWS Certificate Manager Private Certificate Authority (ACM PCA). Adversaries may accomplish this to maintain persistence in the environment. | update | 3 

|<<prebuilt-rule-8-17-4-aws-iam-user-created-access-keys-for-another-user, AWS IAM User Created Access Keys For Another User>> | An adversary with access to a set of compromised credentials may attempt to persist or escalate privileges by creating a new set of credentials for an existing user. This rule looks for use of the IAM `CreateAccessKey` API operation to create new programmatic access keys for another IAM user. | update | 6 

|<<prebuilt-rule-8-17-4-aws-lambda-function-policy-updated-to-allow-public-invocation, AWS Lambda Function Policy Updated to Allow Public Invocation>> | Identifies when an AWS Lambda function policy is updated to allow public invocation. This rule specifically looks for the `AddPermission` API call with the `Principal` set to `*` which allows any AWS account to invoke the Lambda function. Adversaries may abuse this permission to create a backdoor in the Lambda function that allows them to execute arbitrary code. | update | 2 

|<<prebuilt-rule-8-17-4-aws-rds-cluster-creation, AWS RDS Cluster Creation>> | Identifies the creation of a new Amazon Relational Database Service (RDS) Aurora DB cluster or global database spread across multiple regions. | update | 207 

|<<prebuilt-rule-8-17-4-aws-rds-db-instance-or-cluster-password-modified, AWS RDS DB Instance or Cluster Password Modified>> | Identifies the modification of the master password for an AWS RDS DB instance or cluster. DB instances may contain sensitive data that can be abused if accessed by unauthorized actors. Amazon RDS API operations never return the password, so this operation provides a means to regain access if the password is lost. Adversaries with the proper permissions can take advantage of this to evade defenses and gain unauthorized access to a DB instance or cluster to support persistence mechanisms or privilege escalation. | update | 3 

|<<prebuilt-rule-8-17-4-aws-rds-security-group-creation, AWS RDS Security Group Creation>> | Identifies the creation of an Amazon Relational Database Service (RDS) Security group. | update | 207 

|<<prebuilt-rule-8-17-4-aws-rds-instance-creation, AWS RDS Instance Creation>> | Identifies the creation of an Amazon Relational Database Service (RDS) Aurora database instance. | update | 207 

|<<prebuilt-rule-8-17-4-aws-rds-db-instance-made-public, AWS RDS DB Instance Made Public>> | Identifies the creation or modification of an AWS RDS DB instance to enable public access. DB instances may contain sensitive data that can be abused if shared with unauthorized accounts or made public. Adversaries may enable public access on a DB instance to maintain persistence or evade defenses by bypassing access controls. | update | 3 

|<<prebuilt-rule-8-17-4-aws-redshift-cluster-creation, AWS Redshift Cluster Creation>> | Identifies the creation of an Amazon Redshift cluster. Unexpected creation of this cluster by a non-administrative user may indicate a permission or role issue with current users. If unexpected, the resource may not properly be configured and could introduce security vulnerabilities. | update | 207 

|<<prebuilt-rule-8-17-4-aws-route-53-domain-transfer-lock-disabled, AWS Route 53 Domain Transfer Lock Disabled>> | Identifies when a transfer lock was removed from a Route 53 domain. It is recommended to refrain from performing this action unless intending to transfer the domain to a different registrar. | update | 207 

|<<prebuilt-rule-8-17-4-aws-route-53-domain-transferred-to-another-account, AWS Route 53 Domain Transferred to Another Account>> | Identifies when a request has been made to transfer a Route 53 domain to another AWS account. | update | 207 

|<<prebuilt-rule-8-17-4-aws-route53-private-hosted-zone-associated-with-a-vpc, AWS Route53 private hosted zone associated with a VPC>> | Identifies when a Route53 private hosted zone has been associated with VPC. | update | 207 

|<<prebuilt-rule-8-17-4-aws-route-table-created, AWS Route Table Created>> | Identifies when an AWS Route Table has been created. | update | 208 

|<<prebuilt-rule-8-17-4-aws-sts-assumerole-with-new-mfa-device, AWS STS AssumeRole with New MFA Device>> | Identifies when a user has assumed a role using a new MFA device. Users can assume a role to obtain temporary credentials and access AWS resources using the AssumeRole API of AWS Security Token Service (STS). While a new MFA device is not always indicative of malicious behavior it should be verified as adversaries can use this technique for persistence and privilege escalation. | update | 2 

|<<prebuilt-rule-8-17-4-aws-iam-administratoraccess-policy-attached-to-group, AWS IAM AdministratorAccess Policy Attached to Group>> | An adversary with access to a set of compromised credentials may attempt to persist or escalate privileges by attaching additional permissions to user groups the compromised user account belongs to. This rule looks for use of the IAM `AttachGroupPolicy` API operation to attach the highly permissive `AdministratorAccess` AWS managed policy to an existing IAM user group. | update | 4 

|<<prebuilt-rule-8-17-4-aws-iam-administratoraccess-policy-attached-to-role, AWS IAM AdministratorAccess Policy Attached to Role>> | An adversary with access to a set of compromised credentials may attempt to persist or escalate privileges by attaching additional permissions to compromised IAM roles. This rule looks for use of the IAM `AttachRolePolicy` API operation to attach the highly permissive `AdministratorAccess` AWS managed policy to an existing IAM role. | update | 4 

|<<prebuilt-rule-8-17-4-aws-iam-administratoraccess-policy-attached-to-user, AWS IAM AdministratorAccess Policy Attached to User>> | An adversary with access to a set of compromised credentials may attempt to persist or escalate privileges by attaching additional permissions to compromised user accounts. This rule looks for use of the IAM `AttachUserPolicy` API operation to attach the highly permissive `AdministratorAccess` AWS managed policy to an existing IAM user. | update | 5 

|<<prebuilt-rule-8-17-4-aws-iam-customer-managed-policy-attached-to-role-by-rare-user, AWS IAM Customer-Managed Policy Attached to Role by Rare User>> | Detects when an AWS Identity and Access Management (IAM) customer-managed policy is attached to a role by an unusual or unauthorized user. Customer-managed policies are policies created and controlled within an AWS account, granting specific permissions to roles or users when attached. This rule identifies potential privilege escalation by flagging cases where a customer-managed policy is attached to a role by an unexpected actor, which could signal unauthorized access or misuse. Attackers may attach policies to roles to expand permissions and elevate their privileges within the AWS environment. This is a [New Terms](https://www.elastic.co/guide/en/security/current/rules-ui-create.html#create-new-terms-rule) rule that uses the `aws.cloudtrail.user_identity.arn` and `aws.cloudtrail.flattened.request_parameters.roleName` fields to check if the combination of the actor ARN and target role name has not been seen in the last 14 days. | update | 2 

|<<prebuilt-rule-8-17-4-aws-iam-saml-provider-updated, AWS IAM SAML Provider Updated>> | Identifies when a user has updated a SAML provider in AWS. SAML providers are used to enable federated access to the AWS Management Console. This activity could be an indication of an attacker attempting to escalate privileges. | update | 208 

|<<prebuilt-rule-8-17-4-aws-iam-assume-role-policy-update, AWS IAM Assume Role Policy Update>> | Identifies AWS CloudTrail events where an IAM role's trust policy has been updated. The trust policy is a JSON document that defines which principals are allowed to assume the role. An attacker may attempt to modify this policy to gain the privileges of the role. This is a [New Terms](https://www.elastic.co/guide/en/security/current/rules-ui-create.html#create-new-terms-rule) rule, which means it will only trigger once for each unique value of the `aws.cloudtrail.user_identity.arn` and `aws.cloudtrail.flattened.request_parameters.roleName` fields that has not been seen making this API request within the last 14 days. | update | 210 

|<<prebuilt-rule-8-17-4-aws-sts-role-assumption-by-service, AWS STS Role Assumption by Service>> | Identifies when a service has assumed a role in AWS Security Token Service (STS). Services can assume a role to obtain temporary credentials and access AWS resources. Adversaries can use this technique for credential access and privilege escalation. This is a [New Terms](https://www.elastic.co/guide/en/security/current/rules-ui-create.html#create-new-terms-rule) rule that identifies when a service assumes a role in AWS Security Token Service (STS) to obtain temporary credentials and access AWS resources. While often legitimate, adversaries may use this technique for unauthorized access, privilege escalation, or lateral movement within an AWS environment. | update | 210 

|<<prebuilt-rule-8-17-4-aws-sts-role-assumption-by-user, AWS STS Role Assumption by User>> | Identifies when a user or role has assumed a role in AWS Security Token Service (STS). Users can assume a role to obtain temporary credentials and access AWS resources. Adversaries can use this technique for credential access and privilege escalation. This is a [New Terms](https://www.elastic.co/guide/en/security/current/rules-ui-create.html#create-new-terms-rule) rule that identifies when a service assumes a role in AWS Security Token Service (STS) to obtain temporary credentials and access AWS resources. While often legitimate, adversaries may use this technique for unauthorized access, privilege escalation, or lateral movement within an AWS environment. | update | 2 

|<<prebuilt-rule-8-17-4-aws-sts-assumeroot-by-rare-user-and-member-account, AWS STS AssumeRoot by Rare User and Member Account>> | Identifies when the STS `AssumeRoot` action is performed by a rare user in AWS. The AssumeRoot action allows users to assume the root member account role, granting elevated but specific permissions based on the task policy specified. Adversaries whom may have compromised user credentials, such as access and secret keys, can use this technique to escalate privileges and gain unauthorized access to AWS resources. This is a [New Terms](https://www.elastic.co/guide/en/security/current/rules-ui-create.html#create-new-terms-rule) rule that identifies when the STS `AssumeRoot` action is performed by a user that rarely assumes this role and specific member account. | update | 2 

|<<prebuilt-rule-8-17-4-aws-sts-getsessiontoken-abuse, AWS STS GetSessionToken Abuse>> | Identifies the suspicious use of GetSessionToken. Tokens could be created and used by attackers to move laterally and escalate privileges. | update | 207 

|<<prebuilt-rule-8-17-4-aws-sts-role-chaining, AWS STS Role Chaining>> | Identifies role chaining activity. Role chaining is when you use one assumed role to assume a second role through the AWS CLI or API. While this a recognized functionality in AWS, role chaining can be abused for privilege escalation if the subsequent assumed role provides additional privileges. Role chaining can also be used as a persistence mechanism as each AssumeRole action results in a refreshed session token with a 1 hour maximum duration. This rule looks for role chaining activity happening within a single account, to eliminate false positives produced by common cross-account behavior. | update | 2 

|<<prebuilt-rule-8-17-4-aws-bedrock-invocations-without-guardrails-detected-by-a-single-user-over-a-session, AWS Bedrock Invocations without Guardrails Detected by a Single User Over a Session>> | Identifies multiple AWS Bedrock executions in a one minute time window without guardrails by the same user in the same account over a session. Multiple consecutive executions implies that a user may be intentionally attempting to bypass security controls, by not routing the requests with the desired guardrail configuration in order to access sensitive information, or possibly exploit a vulnerability in the system. | update | 2 

|<<prebuilt-rule-8-17-4-aws-bedrock-guardrails-detected-multiple-violations-by-a-single-user-over-a-session, AWS Bedrock Guardrails Detected Multiple Violations by a Single User Over a Session>> | Identifies multiple violations of AWS Bedrock guardrails by the same user in the same account over a session. Multiple violations implies that a user may be intentionally attempting to cirvumvent security controls, access sensitive information, or possibly exploit a vulnerability in the system. | update | 5 

|<<prebuilt-rule-8-17-4-aws-bedrock-guardrails-detected-multiple-policy-violations-within-a-single-blocked-request, AWS Bedrock Guardrails Detected Multiple Policy Violations Within a Single Blocked Request>> | Identifies multiple violations of AWS Bedrock guardrails within a single request, resulting in a block action, increasing the likelihood of malicious intent. Multiple violations implies that a user may be intentionally attempting to cirvumvent security controls, access sensitive information, or possibly exploit a vulnerability in the system. | update | 4 

|<<prebuilt-rule-8-17-4-unusual-high-confidence-content-filter-blocks-detected, Unusual High Confidence Content Filter Blocks Detected>> | Detects repeated high-confidence 'BLOCKED' actions coupled with specific 'Content Filter' policy violation having codes such as 'MISCONDUCT', 'HATE', 'SEXUAL', INSULTS', 'PROMPT_ATTACK', 'VIOLENCE' indicating persistent misuse or attempts to probe the model's ethical boundaries. | update | 6 

|<<prebuilt-rule-8-17-4-potential-abuse-of-resources-by-high-token-count-and-large-response-sizes, Potential Abuse of Resources by High Token Count and Large Response Sizes>> | Detects potential resource exhaustion or data breach attempts by monitoring for users who consistently generate high input token counts, submit numerous requests, and receive large responses. This behavior could indicate an attempt to overload the system or extract an unusually large amount of data, possibly revealing sensitive information or causing service disruptions. | update | 4 

|<<prebuilt-rule-8-17-4-aws-bedrock-detected-multiple-attempts-to-use-denied-models-by-a-single-user, AWS Bedrock Detected Multiple Attempts to use Denied Models by a Single User>> | Identifies multiple successive failed attempts to use denied model resources within AWS Bedrock. This could indicated attempts to bypass limitations of other approved models, or to force an impact on the environment by incurring exhorbitant costs. | update | 4 

|<<prebuilt-rule-8-17-4-unusual-high-denied-sensitive-information-policy-blocks-detected, Unusual High Denied Sensitive Information Policy Blocks Detected>> | Detects repeated compliance violation 'BLOCKED' actions coupled with specific policy name such as 'sensitive_information_policy', indicating persistent misuse or attempts to probe the model's denied topics. | update | 2 

|<<prebuilt-rule-8-17-4-unusual-high-denied-topic-blocks-detected, Unusual High Denied Topic Blocks Detected>> | Detects repeated compliance violation 'BLOCKED' actions coupled with specific policy name such as 'topic_policy', indicating persistent misuse or attempts to probe the model's denied topics. | update | 2 

|<<prebuilt-rule-8-17-4-aws-bedrock-detected-multiple-validation-exception-errors-by-a-single-user, AWS Bedrock Detected Multiple Validation Exception Errors by a Single User>> | Identifies multiple validation exeception errors within AWS Bedrock. Validation errors occur when you run the InvokeModel or InvokeModelWithResponseStream APIs on a foundation model that uses an incorrect inference parameter or corresponding value. These errors also occur when you use an inference parameter for one model with a model that doesn't have the same API parameter. This could indicate attempts to bypass limitations of other approved models, or to force an impact on the environment by incurring exhorbitant costs. | update | 4 

|<<prebuilt-rule-8-17-4-unusual-high-word-policy-blocks-detected, Unusual High Word Policy Blocks Detected>> | Detects repeated compliance violation 'BLOCKED' actions coupled with specific policy name such as 'word_policy', indicating persistent misuse or attempts to probe the model's denied topics. | update | 2 

|<<prebuilt-rule-8-17-4-azure-event-hub-authorization-rule-created-or-updated, Azure Event Hub Authorization Rule Created or Updated>> | Identifies when an Event Hub Authorization Rule is created or updated in Azure. An authorization rule is associated with specific rights, and carries a pair of cryptographic keys. When you create an Event Hubs namespace, a policy rule named RootManageSharedAccessKey is created for the namespace. This has manage permissions for the entire namespace and it's recommended that you treat this rule like an administrative root account and don't use it in your application. | update | 104 

|<<prebuilt-rule-8-17-4-azure-entra-mfa-totp-brute-force-attempts, Azure Entra MFA TOTP Brute Force Attempts>> | Identifies brute force attempts against Azure Entra multi-factor authentication (MFA) Time-based One-Time Password (TOTP) verification codes. This rule detects high frequency failed TOTP code attempts for a single user in a short time-span. Adversaries with valid credentials, when attempting to login to Azure portal or other Azure services, may be prompted to provide a TOTP code as part of the MFA process. If successful, adversaries can bypass MFA and gain unauthorized access to Azure resources. | update | 2 

|<<prebuilt-rule-8-17-4-azure-full-network-packet-capture-detected, Azure Full Network Packet Capture Detected>> | Identifies potential full network packet capture in Azure. Packet Capture is an Azure Network Watcher feature that can be used to inspect network traffic. This feature can potentially be abused to read sensitive data from unencrypted internal traffic. | update | 104 

|<<prebuilt-rule-8-17-4-entra-id-device-code-auth-with-broker-client, Entra ID Device Code Auth with Broker Client>> | Identifies device code authentication with an Azure broker client for Entra ID. Adversaries abuse Primary Refresh Tokens (PRTs) to bypass multi-factor authentication (MFA) and gain unauthorized access to Azure resources. PRTs are used in Conditional Access policies to enforce device-based controls. Compromising PRTs allows attackers to bypass these policies and gain unauthorized access. This rule detects successful sign-ins using device code authentication with the Entra ID broker client application ID (29d9ed98-a469-4536-ade2-f981bc1d605e). | update | 2 

|<<prebuilt-rule-8-17-4-azure-entra-sign-in-brute-force-against-microsoft-365-accounts, Azure Entra Sign-in Brute Force against Microsoft 365 Accounts>> | Identifies potential brute-force attempts against Microsoft 365 user accounts by detecting a high number of failed interactive or non-interactive login attempts within a 30-minute window. Attackers may attempt to brute force user accounts to gain unauthorized access to Microsoft 365 services via different services such as Exchange, SharePoint, or Teams. | update | 3 

|<<prebuilt-rule-8-17-4-azure-entra-sign-in-brute-force-microsoft-365-accounts-by-repeat-source, Azure Entra Sign-in Brute Force Microsoft 365 Accounts by Repeat Source>> | Identifies potential brute-force attempts against Microsoft 365 user accounts by detecting a high number of failed interactive or non-interactive login attempts within a 30-minute window from a single source. Attackers may attempt to brute force user accounts to gain unauthorized access to Microsoft 365 services via different services such as Exchange, SharePoint, or Teams. | update | 3 

|<<prebuilt-rule-8-17-4-first-occurrence-of-entra-id-auth-via-devicecode-protocol, First Occurrence of Entra ID Auth via DeviceCode Protocol>> | Identifies when a user is observed for the first time in the last 14 days authenticating using the deviceCode protocol. The device code authentication flow can be abused by attackers to phish users and steal access tokens to impersonate the victim. By its very nature, device code should only be used when logging in to devices without keyboards, where it is difficult to enter emails and passwords. | update | 2 

|<<prebuilt-rule-8-17-4-azure-key-vault-modified, Azure Key Vault Modified>> | Identifies modifications to a Key Vault in Azure. The Key Vault is a service that safeguards encryption keys and secrets like certificates, connection strings, and passwords. Because this data is sensitive and business critical, access to key vaults should be secured to allow only authorized applications and users. | update | 104 

|<<prebuilt-rule-8-17-4-azure-storage-account-key-regenerated, Azure Storage Account Key Regenerated>> | Identifies a rotation to storage account access keys in Azure. Regenerating access keys can affect any applications or Azure services that are dependent on the storage account key. Adversaries may regenerate a key as a means of acquiring credentials to access systems and resources. | update | 103 

|<<prebuilt-rule-8-17-4-azure-application-credential-modification, Azure Application Credential Modification>> | Identifies when a new credential is added to an application in Azure. An application may use a certificate or secret string to prove its identity when requesting a token. Multiple certificates and secrets can be added for an application and an adversary may abuse this by creating an additional authentication method to evade defenses or persist in an environment. | update | 103 

|<<prebuilt-rule-8-17-4-azure-automation-runbook-deleted, Azure Automation Runbook Deleted>> | Identifies when an Azure Automation runbook is deleted. An adversary may delete an Azure Automation runbook in order to disrupt their target's automated business operations or to remove a malicious runbook for defense evasion. | update | 103 

|<<prebuilt-rule-8-17-4-azure-blob-permissions-modification, Azure Blob Permissions Modification>> | Identifies when the Azure role-based access control (Azure RBAC) permissions are modified for an Azure Blob. An adversary may modify the permissions on a blob to weaken their target's security controls or an administrator may inadvertently modify the permissions, which could lead to data exposure or loss. | update | 105 

|<<prebuilt-rule-8-17-4-azure-diagnostic-settings-deletion, Azure Diagnostic Settings Deletion>> | Identifies the deletion of diagnostic settings in Azure, which send platform logs and metrics to different destinations. An adversary may delete diagnostic settings in an attempt to evade defenses. | update | 103 

|<<prebuilt-rule-8-17-4-azure-event-hub-deletion, Azure Event Hub Deletion>> | Identifies an Event Hub deletion in Azure. An Event Hub is an event processing service that ingests and processes large volumes of events and data. An adversary may delete an Event Hub in an attempt to evade detection. | update | 103 

|<<prebuilt-rule-8-17-4-azure-firewall-policy-deletion, Azure Firewall Policy Deletion>> | Identifies the deletion of a firewall policy in Azure. An adversary may delete a firewall policy in an attempt to evade defenses and/or to eliminate barriers to their objective. | update | 103 

|<<prebuilt-rule-8-17-4-azure-frontdoor-web-application-firewall-waf-policy-deleted, Azure Frontdoor Web Application Firewall (WAF) Policy Deleted>> | Identifies the deletion of a Frontdoor Web Application Firewall (WAF) Policy in Azure. An adversary may delete a Frontdoor Web Application Firewall (WAF) Policy in an attempt to evade defenses and/or to eliminate barriers to their objective. | update | 103 

|<<prebuilt-rule-8-17-4-azure-kubernetes-events-deleted, Azure Kubernetes Events Deleted>> | Identifies when events are deleted in Azure Kubernetes. Kubernetes events are objects that log any state changes. Example events are a container creation, an image pull, or a pod scheduling on a node. An adversary may delete events in Azure Kubernetes in an attempt to evade detection. | update | 103 

|<<prebuilt-rule-8-17-4-azure-network-watcher-deletion, Azure Network Watcher Deletion>> | Identifies the deletion of a Network Watcher in Azure. Network Watchers are used to monitor, diagnose, view metrics, and enable or disable logs for resources in an Azure virtual network. An adversary may delete a Network Watcher in an attempt to evade defenses. | update | 103 

|<<prebuilt-rule-8-17-4-azure-alert-suppression-rule-created-or-modified, Azure Alert Suppression Rule Created or Modified>> | Identifies the creation of suppression rules in Azure. Suppression rules are a mechanism used to suppress alerts previously identified as false positives or too noisy to be in production. This mechanism can be abused or mistakenly configured, resulting in defense evasions and loss of security visibility. | update | 103 

|<<prebuilt-rule-8-17-4-azure-blob-container-access-level-modification, Azure Blob Container Access Level Modification>> | Identifies changes to container access levels in Azure. Anonymous public read access to containers and blobs in Azure is a way to share data broadly, but can present a security risk if access to sensitive data is not managed judiciously. | update | 103 

|<<prebuilt-rule-8-17-4-azure-command-execution-on-virtual-machine, Azure Command Execution on Virtual Machine>> | Identifies command execution on a virtual machine (VM) in Azure. A Virtual Machine Contributor role lets you manage virtual machines, but not access them, nor access the virtual network or storage account they’re connected to. However, commands can be run via PowerShell on the VM, which execute as System. Other roles, such as certain Administrator roles may be able to execute commands on a VM as well. | update | 103 

|<<prebuilt-rule-8-17-4-azure-service-principal-credentials-added, Azure Service Principal Credentials Added>> | Identifies when new Service Principal credentials have been added in Azure. In most organizations, credentials will be added to service principals infrequently. Hijacking an application (by adding a rogue secret or certificate) with granted permissions will allow the attacker to access data that is normally protected by MFA requirements. | update | 103 

|<<prebuilt-rule-8-17-4-azure-kubernetes-pods-deleted, Azure Kubernetes Pods Deleted>> | Identifies the deletion of Azure Kubernetes Pods. Adversaries may delete a Kubernetes pod to disrupt the normal behavior of the environment. | update | 103 

|<<prebuilt-rule-8-17-4-azure-resource-group-deletion, Azure Resource Group Deletion>> | Identifies the deletion of a resource group in Azure, which includes all resources within the group. Deletion is permanent and irreversible. An adversary may delete a resource group in an attempt to evade defenses or intentionally destroy data. | update | 103 

|<<prebuilt-rule-8-17-4-azure-virtual-network-device-modified-or-deleted, Azure Virtual Network Device Modified or Deleted>> | Identifies when a virtual network device is modified or deleted. This can be a network virtual appliance, virtual hub, or virtual router. | update | 103 

|<<prebuilt-rule-8-17-4-azure-external-guest-user-invitation, Azure External Guest User Invitation>> | Identifies an invitation to an external user in Azure Active Directory (AD). Azure AD is extended to include collaboration, allowing you to invite people from outside your organization to be guest users in your cloud account. Unless there is a business need to provision guest access, it is best practice avoid creating guest users. Guest users could potentially be overlooked indefinitely leading to a potential vulnerability. | update | 103 

|<<prebuilt-rule-8-17-4-azure-automation-account-created, Azure Automation Account Created>> | Identifies when an Azure Automation account is created. Azure Automation accounts can be used to automate management tasks and orchestrate actions across systems. An adversary may create an Automation account in order to maintain persistence in their target's environment. | update | 103 

|<<prebuilt-rule-8-17-4-azure-automation-runbook-created-or-modified, Azure Automation Runbook Created or Modified>> | Identifies when an Azure Automation runbook is created or modified. An adversary may create or modify an Azure Automation runbook to execute malicious code and maintain persistence in their target's environment. | update | 103 

|<<prebuilt-rule-8-17-4-azure-automation-webhook-created, Azure Automation Webhook Created>> | Identifies when an Azure Automation webhook is created. Azure Automation runbooks can be configured to execute via a webhook. A webhook uses a custom URL passed to Azure Automation along with a data payload specific to the runbook. An adversary may create a webhook in order to trigger a runbook that contains malicious code. | update | 103 

|<<prebuilt-rule-8-17-4-azure-conditional-access-policy-modified, Azure Conditional Access Policy Modified>> | Identifies when an Azure Conditional Access policy is modified. Azure Conditional Access policies control access to resources via if-then statements. For example, if a user wants to access a resource, then they must complete an action such as using multi-factor authentication to access it. An adversary may modify a Conditional Access policy in order to weaken their target's security controls. | update | 103 

|<<prebuilt-rule-8-17-4-azure-ad-global-administrator-role-assigned, Azure AD Global Administrator Role Assigned>> | In Azure Active Directory (Azure AD), permissions to manage resources are assigned using roles. The Global Administrator is a role that enables users to have access to all administrative features in Azure AD and services that use Azure AD identities like the Microsoft 365 Defender portal, the Microsoft 365 compliance center, Exchange, SharePoint Online, and Skype for Business Online. Attackers can add users as Global Administrators to maintain access and manage all subscriptions and their settings and resources. | update | 103 

|<<prebuilt-rule-8-17-4-azure-global-administrator-role-addition-to-pim-user, Azure Global Administrator Role Addition to PIM User>> | Identifies an Azure Active Directory (AD) Global Administrator role addition to a Privileged Identity Management (PIM) user account. PIM is a service that enables you to manage, control, and monitor access to important resources in an organization. Users who are assigned to the Global administrator role can read and modify any administrative setting in your Azure AD organization. | update | 103 

|<<prebuilt-rule-8-17-4-user-added-as-owner-for-azure-application, User Added as Owner for Azure Application>> | Identifies when a user is added as an owner for an Azure application. An adversary may add a user account as an owner for an Azure application in order to grant additional permissions and modify the application's configuration using another account. | update | 103 

|<<prebuilt-rule-8-17-4-user-added-as-owner-for-azure-service-principal, User Added as Owner for Azure Service Principal>> | Identifies when a user is added as an owner for an Azure service principal. The service principal object defines what the application can do in the specific tenant, who can access the application, and what resources the app can access. A service principal object is created when an application is given permission to access resources in a tenant. An adversary may add a user account as an owner for a service principal and use that account in order to define what an application can do in the Azure AD tenant. | update | 103 

|<<prebuilt-rule-8-17-4-azure-kubernetes-rolebindings-created, Azure Kubernetes Rolebindings Created>> | Identifies the creation of role binding or cluster role bindings. You can assign these roles to Kubernetes subjects (users, groups, or service accounts) with role bindings and cluster role bindings. An adversary who has permissions to create bindings and cluster-bindings in the cluster can create a binding to the cluster-admin ClusterRole or to other high privileges roles. | update | 103 

|<<prebuilt-rule-8-17-4-statistical-model-detected-c2-beaconing-activity, Statistical Model Detected C2 Beaconing Activity>> | A statistical model has identified command-and-control (C2) beaconing activity. Beaconing can help attackers maintain stealthy communication with their C2 servers, receive instructions and payloads, exfiltrate data and maintain persistence in a network. | update | 7 

|<<prebuilt-rule-8-17-4-statistical-model-detected-c2-beaconing-activity-with-high-confidence, Statistical Model Detected C2 Beaconing Activity with High Confidence>> | A statistical model has identified command-and-control (C2) beaconing activity with high confidence. Beaconing can help attackers maintain stealthy communication with their C2 servers, receive instructions and payloads, exfiltrate data and maintain persistence in a network. | update | 6 

|<<prebuilt-rule-8-17-4-container-workload-protection, Container Workload Protection>> | Generates a detection alert each time a 'Container Workload Protection' alert is received. Enabling this rule allows you to immediately begin triaging and investigating these alerts. | update | 5 

|<<prebuilt-rule-8-17-4-aws-credentials-searched-for-inside-a-container, AWS Credentials Searched For Inside A Container>> | This rule detects the use of system search utilities like grep and find to search for AWS credentials inside a container. Unauthorized access to these sensitive files could lead to further compromise of the container environment or facilitate a container breakout to the underlying cloud environment. | update | 2 

|<<prebuilt-rule-8-17-4-sensitive-files-compression-inside-a-container, Sensitive Files Compression Inside A Container>> | Identifies the use of a compression utility to collect known files containing sensitive information, such as credentials and system configurations inside a container. | update | 3 

|<<prebuilt-rule-8-17-4-sensitive-keys-or-passwords-searched-for-inside-a-container, Sensitive Keys Or Passwords Searched For Inside A Container>> | This rule detects the use of system search utilities like grep and find to search for private SSH keys or passwords inside a container. Unauthorized access to these sensitive files could lead to further compromise of the container environment or facilitate a container breakout to the underlying host machine. | update | 3 

|<<prebuilt-rule-8-17-4-modification-of-dynamic-linker-preload-shared-object-inside-a-container, Modification of Dynamic Linker Preload Shared Object Inside A Container>> | This rule detects the creation or modification of the dynamic linker preload shared object (ld.so.preload) inside a container. The Linux dynamic linker is used to load libraries needed by a program at runtime. Adversaries may hijack the dynamic linker by modifying the /etc/ld.so.preload file to point to malicious libraries. This behavior can be used to grant unauthorized access to system resources and has been used to evade detection of malicious processes in container environments. | update | 2 

|<<prebuilt-rule-8-17-4-suspicious-network-tool-launched-inside-a-container, Suspicious Network Tool Launched Inside A Container>> | This rule detects commonly abused network utilities running inside a container. Network utilities like nc, nmap, dig, tcpdump, ngrep, telnet, mitmproxy, zmap can be used for malicious purposes such as network reconnaissance, monitoring, or exploitation, and should be monitored closely within a container. | update | 3 

|<<prebuilt-rule-8-17-4-container-management-utility-run-inside-a-container, Container Management Utility Run Inside A Container>> | This rule detects when a container management binary is run from inside a container. These binaries are critical components of many containerized environments, and their presence and execution in unauthorized containers could indicate compromise or a misconfiguration. | update | 3 

|<<prebuilt-rule-8-17-4-file-made-executable-via-chmod-inside-a-container, File Made Executable via Chmod Inside A Container>> | This rule detects when chmod is used to add the execute permission to a file inside a container. Modifying file permissions to make a file executable could indicate malicious activity, as an attacker may attempt to run unauthorized or malicious code inside the container. | update | 3 

|<<prebuilt-rule-8-17-4-interactive-exec-command-launched-against-a-running-container, Interactive Exec Command Launched Against A Running Container>> | This rule detects interactive 'exec' events launched against a container using the 'exec' command. Using the 'exec' command in a pod allows a user to establish a temporary shell session and execute any process/command inside the container. This rule specifically targets higher-risk interactive commands that allow real-time interaction with a container's shell. A malicious actor could use this level of access to further compromise the container environment or attempt a container breakout. | update | 3 

|<<prebuilt-rule-8-17-4-suspicious-interactive-shell-spawned-from-inside-a-container, Suspicious Interactive Shell Spawned From Inside A Container>> | This rule detects when an interactive shell is spawned inside a running container. This could indicate a potential container breakout attempt or an attacker's attempt to gain unauthorized access to the underlying host. | update | 3 

|<<prebuilt-rule-8-17-4-netcat-listener-established-inside-a-container, Netcat Listener Established Inside A Container>> | This rule detects an established netcat listener running inside a container. Netcat is a utility used for reading and writing data across network connections, and it can be used for malicious purposes such as establishing a backdoor for persistence or exfiltrating data. | update | 3 

|<<prebuilt-rule-8-17-4-ssh-connection-established-inside-a-running-container, SSH Connection Established Inside A Running Container>> | This rule detects an incoming SSH connection established inside a running container. Running an ssh daemon inside a container should be avoided and monitored closely if necessary. If an attacker gains valid credentials they can use it to gain initial access or establish persistence within a compromised environment. | update | 3 

|<<prebuilt-rule-8-17-4-ssh-process-launched-from-inside-a-container, SSH Process Launched From Inside A Container>> | This rule detects an SSH or SSHD process executed from inside a container. This includes both the client ssh binary and server ssh daemon process. SSH usage inside a container should be avoided and monitored closely when necessary. With valid credentials an attacker may move laterally to other containers or to the underlying host through container breakout. They may also use valid SSH credentials as a persistence mechanism. | update | 3 

|<<prebuilt-rule-8-17-4-ssh-authorized-keys-file-modified-inside-a-container, SSH Authorized Keys File Modified Inside a Container>> | This rule detects the creation or modification of an authorized_keys or sshd_config file inside a container. The Secure Shell (SSH) authorized_keys file specifies which users are allowed to log into a server using public key authentication. Adversaries may modify it to maintain persistence on a victim host by adding their own public key(s). Unexpected and unauthorized SSH usage inside a container can be an indicator of compromise and should be investigated. | update | 4 

|<<prebuilt-rule-8-17-4-file-system-debugger-launched-inside-a-privileged-container, File System Debugger Launched Inside a Privileged Container>> | This rule detects the use of the built-in Linux DebugFS utility from inside a privileged container. DebugFS is a special file system debugging utility which supports reading and writing directly from a hard drive device. When launched inside a privileged container, a container deployed with all the capabilities of the host machine, an attacker can access sensitive host level files which could be used for further privilege escalation and container escapes to the host machine. | update | 2 

|<<prebuilt-rule-8-17-4-mount-launched-inside-a-privileged-container, Mount Launched Inside a Privileged Container>> | This rule detects the use of the mount utility from inside a privileged container. The mount command is used to make a device or file system accessible to the system, and then to connect its root directory to a specified mount point on the local file system. When launched inside a privileged container--a container deployed with all the capabilities of the host machine-- an attacker can access sensitive host level files which could be used for further privilege escalation and container escapes to the host machine. Any usage of mount inside a running privileged container should be further investigated. | update | 2 

|<<prebuilt-rule-8-17-4-potential-container-escape-via-modified-notify-on-release-file, Potential Container Escape via Modified notify_on_release File>> | This rule detects modification of the cgroup notify_on_release file from inside a container. When the notify_on_release flag is enabled (1) in a cgroup, then whenever the last task in the cgroup exits or attaches to another cgroup, the command specified in the release_agent file is run and invoked from the host. A privileged container with SYS_ADMIN capabilities, enables a threat actor to mount a cgroup directory and modify the notify_on_release flag in order to take advantage of this feature, which could be used for further privilege escalation and container escapes to the host machine. | update | 2 

|<<prebuilt-rule-8-17-4-potential-container-escape-via-modified-release-agent-file, Potential Container Escape via Modified release_agent File>> | This rule detects modification of the CGroup release_agent file from inside a privileged container. The release_agent is a script that is executed at the termination of any process on that CGroup and is invoked from the host. A privileged container with SYS_ADMIN capabilities, enables a threat actor to mount a CGroup directory and modify the release_agent which could be used for further privilege escalation and container escapes to the host machine. | update | 2 

|<<prebuilt-rule-8-17-4-cyberark-privileged-access-security-error, CyberArk Privileged Access Security Error>> | Identifies the occurrence of a CyberArk Privileged Access Security (PAS) error level audit event. The event.code correlates to the CyberArk Vault Audit Action Code. | update | 103 

|<<prebuilt-rule-8-17-4-cyberark-privileged-access-security-recommended-monitor, CyberArk Privileged Access Security Recommended Monitor>> | Identifies the occurrence of a CyberArk Privileged Access Security (PAS) non-error level audit event which is recommended for monitoring by the vendor. The event.code correlates to the CyberArk Vault Audit Action Code. | update | 103 

|<<prebuilt-rule-8-17-4-potential-data-exfiltration-activity-to-an-unusual-iso-code, Potential Data Exfiltration Activity to an Unusual ISO Code>> | A machine learning job has detected data exfiltration to a particular geo-location (by region name). Data transfers to geo-locations that are outside the normal traffic patterns of an organization could indicate exfiltration over command and control channels. | update | 5 

|<<prebuilt-rule-8-17-4-potential-data-exfiltration-activity-to-an-unusual-ip-address, Potential Data Exfiltration Activity to an Unusual IP Address>> | A machine learning job has detected data exfiltration to a particular geo-location (by IP address). Data transfers to geo-locations that are outside the normal traffic patterns of an organization could indicate exfiltration over command and control channels. | update | 5 

|<<prebuilt-rule-8-17-4-potential-data-exfiltration-activity-to-an-unusual-destination-port, Potential Data Exfiltration Activity to an Unusual Destination Port>> | A machine learning job has detected data exfiltration to a particular destination port. Data transfer patterns that are outside the normal traffic patterns of an organization could indicate exfiltration over command and control channels. | update | 5 

|<<prebuilt-rule-8-17-4-potential-data-exfiltration-activity-to-an-unusual-region, Potential Data Exfiltration Activity to an Unusual Region>> | A machine learning job has detected data exfiltration to a particular geo-location (by region name). Data transfers to geo-locations that are outside the normal traffic patterns of an organization could indicate exfiltration over command and control channels. | update | 5 

|<<prebuilt-rule-8-17-4-spike-in-bytes-sent-to-an-external-device, Spike in Bytes Sent to an External Device>> | A machine learning job has detected high bytes of data written to an external device. In a typical operational setting, there is usually a predictable pattern or a certain range of data that is written to external devices. An unusually large amount of data being written is anomalous and can signal illicit data copying or transfer activities. | update | 5 

|<<prebuilt-rule-8-17-4-spike-in-bytes-sent-to-an-external-device-via-airdrop, Spike in Bytes Sent to an External Device via Airdrop>> | A machine learning job has detected high bytes of data written to an external device via Airdrop. In a typical operational setting, there is usually a predictable pattern or a certain range of data that is written to external devices. An unusually large amount of data being written is anomalous and can signal illicit data copying or transfer activities. | update | 5 

|<<prebuilt-rule-8-17-4-unusual-process-writing-data-to-an-external-device, Unusual Process Writing Data to an External Device>> | A machine learning job has detected a rare process writing data to an external device. Malicious actors often use benign-looking processes to mask their data exfiltration activities. The discovery of such a process that has no legitimate reason to write data to external devices can indicate exfiltration. | update | 5 

|<<prebuilt-rule-8-17-4-machine-learning-detected-dga-activity-using-a-known-sunburst-dns-domain, Machine Learning Detected DGA activity using a known SUNBURST DNS domain>> | A supervised machine learning model has identified a DNS question name that used by the SUNBURST malware and is predicted to be the result of a Domain Generation Algorithm. | update | 6 

|<<prebuilt-rule-8-17-4-potential-dga-activity, Potential DGA Activity>> | A population analysis machine learning job detected potential DGA (domain generation algorithm) activity. Such activity is often used by malware command and control (C2) channels. This machine learning job looks for a source IP address making DNS requests that have an aggregate high probability of being DGA activity. | update | 6 

|<<prebuilt-rule-8-17-4-machine-learning-detected-a-dns-request-with-a-high-dga-probability-score, Machine Learning Detected a DNS Request With a High DGA Probability Score>> | A supervised machine learning model has identified a DNS question name with a high probability of sourcing from a Domain Generation Algorithm (DGA), which could indicate command and control network activity. | update | 6 

|<<prebuilt-rule-8-17-4-machine-learning-detected-a-dns-request-predicted-to-be-a-dga-domain, Machine Learning Detected a DNS Request Predicted to be a DGA Domain>> | A supervised machine learning model has identified a DNS question name that is predicted to be the result of a Domain Generation Algorithm (DGA), which could indicate command and control network activity. | update | 6 

|<<prebuilt-rule-8-17-4-memory-threat-detected-elastic-defend, Memory Threat - Detected - Elastic Defend>> | Generates a detection alert each time an Elastic Defend alert for memory signatures are received. Enabling this rule allows you to immediately begin investigating your Endpoint memory signature alerts. This rule identifies Elastic Defend memory signature detections only, and does not include prevention alerts. | update | 2 

|<<prebuilt-rule-8-17-4-memory-threat-prevented-elastic-defend, Memory Threat - Prevented- Elastic Defend>> | Generates a detection alert each time an Elastic Defend alert for memory signatures are received. Enabling this rule allows you to immediately begin investigating your Endpoint memory signature alerts. This rule identifies Elastic Defend memory signature preventions only, and does not include detection only alerts. | update | 2 

|<<prebuilt-rule-8-17-4-endpoint-security-elastic-defend, Endpoint Security (Elastic Defend)>> | Generates a detection alert each time an Elastic Defend alert is received. Enabling this rule allows you to immediately begin investigating your Endpoint alerts. | update | 105 

|<<prebuilt-rule-8-17-4-behavior-detected-elastic-defend, Behavior - Detected - Elastic Defend>> | Generates a detection alert each time an Elastic Defend alert for malicious behavior is received. Enabling this rule allows you to immediately begin investigating your Endpoint behavior alerts. This rule identifies Elastic Defend behavior detections only, and does not include prevention alerts. | update | 2 

|<<prebuilt-rule-8-17-4-behavior-prevented-elastic-defend, Behavior - Prevented - Elastic Defend>> | Generates a detection alert each time an Elastic Defend alert for malicious behavior is received. Enabling this rule allows you to immediately begin investigating your Endpoint behavior alerts. This rule identifies Elastic Defend behavior preventions only, and does not include detection only alerts. | update | 2 

|<<prebuilt-rule-8-17-4-malicious-file-detected-elastic-defend, Malicious File - Detected - Elastic Defend>> | Generates a detection alert each time an Elastic Defend alert for malicious files is received. Enabling this rule allows you to immediately begin investigating your Endpoint malicious file alerts. This rule identifies Elastic Defend malicious file detections only, and does not include prevention alerts. | update | 2 

|<<prebuilt-rule-8-17-4-malicious-file-prevented-elastic-defend, Malicious File - Prevented - Elastic Defend>> | Generates a detection alert each time an Elastic Defend alert for malicious files is received. Enabling this rule allows you to immediately begin investigating your Endpoint malicious file alerts. This rule identifies Elastic Defend malicious file preventions only, and does not include detection only alerts. | update | 2 

|<<prebuilt-rule-8-17-4-ransomware-detected-elastic-defend, Ransomware - Detected - Elastic Defend>> | Generates a detection alert each time an Elastic Defend alert for ransomware are received. Enabling this rule allows you to immediately begin investigating your Endpoint ransomware alerts. This rule identifies Elastic Defend ransomware detections only, and does not include prevention alerts. | update | 2 

|<<prebuilt-rule-8-17-4-ransomware-prevented-elastic-defend, Ransomware - Prevented - Elastic Defend>> | Generates a detection alert each time an Elastic Defend alert for ransomware are received. Enabling this rule allows you to immediately begin investigating your Endpoint ransomware alerts. This rule identifies Elastic Defend ransomware preventions only, and does not include detection only alerts. | update | 2 

|<<prebuilt-rule-8-17-4-potential-persistence-via-file-modification, Potential Persistence via File Modification>> | This rule leverages the File Integrity Monitoring (FIM) integration to detect file modifications of files that are commonly used for persistence on Linux systems. The rule detects modifications to files that are commonly used for cron jobs, systemd services, message-of-the-day (MOTD), SSH configurations, shell configurations, runtime control, init daemon, passwd/sudoers/shadow files, Systemd udevd, and XDG/KDE autostart entries. To leverage this rule, the paths specified in the query need to be added to the FIM policy in the Elastic Security app. | update | 7 

|<<prebuilt-rule-8-17-4-gcp-pub-sub-subscription-creation, GCP Pub/Sub Subscription Creation>> | Identifies the creation of a subscription in Google Cloud Platform (GCP). In GCP, the publisher-subscriber relationship (Pub/Sub) is an asynchronous messaging service that decouples event-producing and event-processing services. A subscription is a named resource representing the stream of messages to be delivered to the subscribing application. | update | 106 

|<<prebuilt-rule-8-17-4-gcp-pub-sub-topic-creation, GCP Pub/Sub Topic Creation>> | Identifies the creation of a topic in Google Cloud Platform (GCP). In GCP, the publisher-subscriber relationship (Pub/Sub) is an asynchronous messaging service that decouples event-producing and event-processing services. A topic is used to forward messages from publishers to subscribers. | update | 106 

|<<prebuilt-rule-8-17-4-gcp-firewall-rule-creation, GCP Firewall Rule Creation>> | Identifies when a firewall rule is created in Google Cloud Platform (GCP) for Virtual Private Cloud (VPC) or App Engine. These firewall rules can be configured to allow or deny connections to or from virtual machine (VM) instances or specific applications. An adversary may create a new firewall rule in order to weaken their target's security controls and allow more permissive ingress or egress traffic flows for their benefit. | update | 105 

|<<prebuilt-rule-8-17-4-gcp-firewall-rule-deletion, GCP Firewall Rule Deletion>> | Identifies when a firewall rule is deleted in Google Cloud Platform (GCP) for Virtual Private Cloud (VPC) or App Engine. These firewall rules can be configured to allow or deny connections to or from virtual machine (VM) instances or specific applications. An adversary may delete a firewall rule in order to weaken their target's security controls. | update | 105 

|<<prebuilt-rule-8-17-4-gcp-firewall-rule-modification, GCP Firewall Rule Modification>> | Identifies when a firewall rule is modified in Google Cloud Platform (GCP) for Virtual Private Cloud (VPC) or App Engine. These firewall rules can be modified to allow or deny connections to or from virtual machine (VM) instances or specific applications. An adversary may modify an existing firewall rule in order to weaken their target's security controls and allow more permissive ingress or egress traffic flows for their benefit. | update | 105 

|<<prebuilt-rule-8-17-4-gcp-logging-bucket-deletion, GCP Logging Bucket Deletion>> | Identifies a Logging bucket deletion in Google Cloud Platform (GCP). Log buckets are containers that store and organize log data. A deleted bucket stays in a pending state for 7 days, and Logging continues to route logs to the bucket during that time. To stop routing logs to a deleted bucket, you can delete the log sinks that have the bucket as their destination, or modify the filter for the sinks to stop it from routing logs to the deleted bucket. An adversary may delete a log bucket to evade detection. | update | 105 

|<<prebuilt-rule-8-17-4-gcp-logging-sink-deletion, GCP Logging Sink Deletion>> | Identifies a Logging sink deletion in Google Cloud Platform (GCP). Every time a log entry arrives, Logging compares the log entry to the sinks in that resource. Each sink whose filter matches the log entry writes a copy of the log entry to the sink's export destination. An adversary may delete a Logging sink to evade detection. | update | 105 

|<<prebuilt-rule-8-17-4-gcp-pub-sub-subscription-deletion, GCP Pub/Sub Subscription Deletion>> | Identifies the deletion of a subscription in Google Cloud Platform (GCP). In GCP, the publisher-subscriber relationship (Pub/Sub) is an asynchronous messaging service that decouples event-producing and event-processing services. A subscription is a named resource representing the stream of messages to be delivered to the subscribing application. | update | 105 

|<<prebuilt-rule-8-17-4-gcp-pub-sub-topic-deletion, GCP Pub/Sub Topic Deletion>> | Identifies the deletion of a topic in Google Cloud Platform (GCP). In GCP, the publisher-subscriber relationship (Pub/Sub) is an asynchronous messaging service that decouples event-producing and event-processing services. A publisher application creates and sends messages to a topic. Deleting a topic can interrupt message flow in the Pub/Sub pipeline. | update | 105 

|<<prebuilt-rule-8-17-4-gcp-storage-bucket-configuration-modification, GCP Storage Bucket Configuration Modification>> | Identifies when the configuration is modified for a storage bucket in Google Cloud Platform (GCP). An adversary may modify the configuration of a storage bucket in order to weaken the security controls of their target's environment. | update | 105 

|<<prebuilt-rule-8-17-4-gcp-storage-bucket-permissions-modification, GCP Storage Bucket Permissions Modification>> | Identifies when the Identity and Access Management (IAM) permissions are modified for a Google Cloud Platform (GCP) storage bucket. An adversary may modify the permissions on a storage bucket to weaken their target's security controls or an administrator may inadvertently modify the permissions, which could lead to data exposure or loss. | update | 105 

|<<prebuilt-rule-8-17-4-gcp-virtual-private-cloud-network-deletion, GCP Virtual Private Cloud Network Deletion>> | Identifies when a Virtual Private Cloud (VPC) network is deleted in Google Cloud Platform (GCP). A VPC network is a virtual version of a physical network within a GCP project. Each VPC network has its own subnets, routes, and firewall, as well as other elements. An adversary may delete a VPC network in order to disrupt their target's network and business operations. | update | 105 

|<<prebuilt-rule-8-17-4-gcp-virtual-private-cloud-route-creation, GCP Virtual Private Cloud Route Creation>> | Identifies when a virtual private cloud (VPC) route is created in Google Cloud Platform (GCP). Google Cloud routes define the paths that network traffic takes from a virtual machine (VM) instance to other destinations. These destinations can be inside a Google VPC network or outside it. An adversary may create a route in order to impact the flow of network traffic in their target's cloud environment. | update | 105 

|<<prebuilt-rule-8-17-4-gcp-virtual-private-cloud-route-deletion, GCP Virtual Private Cloud Route Deletion>> | Identifies when a Virtual Private Cloud (VPC) route is deleted in Google Cloud Platform (GCP). Google Cloud routes define the paths that network traffic takes from a virtual machine (VM) instance to other destinations. These destinations can be inside a Google VPC network or outside it. An adversary may delete a route in order to impact the flow of network traffic in their target's cloud environment. | update | 105 

|<<prebuilt-rule-8-17-4-gcp-logging-sink-modification, GCP Logging Sink Modification>> | Identifies a modification to a Logging sink in Google Cloud Platform (GCP). Logging compares the log entry to the sinks in that resource. Each sink whose filter matches the log entry writes a copy of the log entry to the sink's export destination. An adversary may update a Logging sink to exfiltrate logs to a different export destination. | update | 105 

|<<prebuilt-rule-8-17-4-gcp-iam-role-deletion, GCP IAM Role Deletion>> | Identifies an Identity and Access Management (IAM) role deletion in Google Cloud Platform (GCP). A role contains a set of permissions that allows you to perform specific actions on Google Cloud resources. An adversary may delete an IAM role to inhibit access to accounts utilized by legitimate users. | update | 105 

|<<prebuilt-rule-8-17-4-gcp-service-account-deletion, GCP Service Account Deletion>> | Identifies when a service account is deleted in Google Cloud Platform (GCP). A service account is a special type of account used by an application or a virtual machine (VM) instance, not a person. Applications use service accounts to make authorized API calls, authorized as either the service account itself, or as G Suite or Cloud Identity users through domain-wide delegation. An adversary may delete a service account in order to disrupt their target's business operations. | update | 105 

|<<prebuilt-rule-8-17-4-gcp-service-account-disabled, GCP Service Account Disabled>> | Identifies when a service account is disabled in Google Cloud Platform (GCP). A service account is a special type of account used by an application or a virtual machine (VM) instance, not a person. Applications use service accounts to make authorized API calls, authorized as either the service account itself, or as G Suite or Cloud Identity users through domain-wide delegation. An adversary may disable a service account in order to disrupt to disrupt their target's business operations. | update | 105 

|<<prebuilt-rule-8-17-4-gcp-storage-bucket-deletion, GCP Storage Bucket Deletion>> | Identifies when a Google Cloud Platform (GCP) storage bucket is deleted. An adversary may delete a storage bucket in order to disrupt their target's business operations. | update | 105 

|<<prebuilt-rule-8-17-4-gcp-iam-custom-role-creation, GCP IAM Custom Role Creation>> | Identifies an Identity and Access Management (IAM) custom role creation in Google Cloud Platform (GCP). Custom roles are user-defined, and allow for the bundling of one or more supported permissions to meet specific needs. Custom roles will not be updated automatically and could lead to privilege creep if not carefully scrutinized. | update | 105 

|<<prebuilt-rule-8-17-4-gcp-iam-service-account-key-deletion, GCP IAM Service Account Key Deletion>> | Identifies the deletion of an Identity and Access Management (IAM) service account key in Google Cloud Platform (GCP). Each service account is associated with two sets of public/private RSA key pairs that are used to authenticate. If a key is deleted, the application will no longer be able to access Google Cloud resources using that key. A security best practice is to rotate your service account keys regularly. | update | 105 

|<<prebuilt-rule-8-17-4-gcp-service-account-key-creation, GCP Service Account Key Creation>> | Identifies when a new key is created for a service account in Google Cloud Platform (GCP). A service account is a special type of account used by an application or a virtual machine (VM) instance, not a person. Applications use service accounts to make authorized API calls, authorized as either the service account itself, or as G Suite or Cloud Identity users through domain-wide delegation. If private keys are not tracked and managed properly, they can present a security risk. An adversary may create a new key for a service account in order to attempt to abuse the permissions assigned to that account and evade detection. | update | 105 

|<<prebuilt-rule-8-17-4-gcp-service-account-creation, GCP Service Account Creation>> | Identifies when a new service account is created in Google Cloud Platform (GCP). A service account is a special type of account used by an application or a virtual machine (VM) instance, not a person. Applications use service accounts to make authorized API calls, authorized as either the service account itself, or as G Suite or Cloud Identity users through domain-wide delegation. If service accounts are not tracked and managed properly, they can present a security risk. An adversary may create a new service account to use during their operations in order to avoid using a standard user account and attempt to evade detection. | update | 105 

|<<prebuilt-rule-8-17-4-github-protected-branch-settings-changed, GitHub Protected Branch Settings Changed>> | This rule detects setting modifications for protected branches of a GitHub repository. Branch protection rules can be used to enforce certain workflows or requirements before a contributor can push changes to a branch in your repository. Changes to these protected branch settings should be investigated and verified as legitimate activity. Unauthorized changes could be used to lower your organization's security posture and leave you exposed for future attacks. | update | 207 

|<<prebuilt-rule-8-17-4-github-app-deleted, GitHub App Deleted>> | Detects the deletion of a GitHub app either from a repo or an organization. | update | 205 

|<<prebuilt-rule-8-17-4-high-number-of-cloned-github-repos-from-pat, High Number of Cloned GitHub Repos From PAT>> | Detects a high number of unique private repo clone events originating from a single personal access token within a short time period. | update | 205 

|<<prebuilt-rule-8-17-4-github-ueba-multiple-alerts-from-a-github-account, GitHub UEBA - Multiple Alerts from a GitHub Account>> | This rule is part of the "GitHub UEBA - Unusual Activity from Account Pack", and leverages alert data to determine when multiple alerts are executed by the same user in a timespan of one hour. Analysts can use this to prioritize triage and response, as these alerts are a higher indicator of compromised user accounts or PATs. | update | 102 

|<<prebuilt-rule-8-17-4-new-github-app-installed, New GitHub App Installed>> | This rule detects when a new GitHub App has been installed in your organization account. GitHub Apps extend GitHub's functionality both within and outside of GitHub. When an app is installed it is granted permissions to read or modify your repository and organization data. Only trusted apps should be installed and any newly installed apps should be investigated to verify their legitimacy. Unauthorized app installation could lower your organization's security posture and leave you exposed for future attacks. | update | 205 

|<<prebuilt-rule-8-17-4-github-repository-deleted, GitHub Repository Deleted>> | This rule detects when a GitHub repository is deleted within your organization. Repositories are a critical component used within an organization to manage work, collaborate with others and release products to the public. Any delete action against a repository should be investigated to determine it's validity. Unauthorized deletion of organization repositories could cause irreversible loss of intellectual property and indicate compromise within your organization. | update | 204 

|<<prebuilt-rule-8-17-4-new-github-owner-added, New GitHub Owner Added>> | Detects when a new member is added to a GitHub organization as an owner. This role provides admin level privileges. Any new owner roles should be investigated to determine it's validity. Unauthorized owner roles could indicate compromise within your organization and provide unlimited access to data and settings. | update | 207 

|<<prebuilt-rule-8-17-4-github-owner-role-granted-to-user, GitHub Owner Role Granted To User>> | This rule detects when a member is granted the organization owner role of a GitHub organization. This role provides admin level privileges. Any new owner role should be investigated to determine its validity. Unauthorized owner roles could indicate compromise within your organization and provide unlimited access to data and settings. | update | 207 

|<<prebuilt-rule-8-17-4-google-workspace-drive-encryption-key-s-accessed-from-anonymous-user, Google Workspace Drive Encryption Key(s) Accessed from Anonymous User>> | Detects when an external (anonymous) user has viewed, copied or downloaded an encryption key file from a Google Workspace drive. Adversaries may gain access to encryption keys stored in private drives from rogue access links that do not have an expiration. Access to encryption keys may allow adversaries to access sensitive data or authenticate on behalf of users. | update | 5 

|<<prebuilt-rule-8-17-4-first-time-seen-google-workspace-oauth-login-from-third-party-application, First Time Seen Google Workspace OAuth Login from Third-Party Application>> | Detects the first time a third-party application logs in and authenticated with OAuth. OAuth is used to grant permissions to specific resources and services in Google Workspace. Compromised credentials or service accounts could allow an adversary to authenticate to Google Workspace as a valid user and inherit their privileges. | update | 6 

|<<prebuilt-rule-8-17-4-forwarded-google-workspace-security-alert, Forwarded Google Workspace Security Alert>> | Identifies the occurrence of a security alert from the Google Workspace alerts center. Google Workspace's security alert center provides an overview of actionable alerts that may be affecting an organization's domain. An alert is a warning of a potential security issue that Google has detected. | update | 4 

|<<prebuilt-rule-8-17-4-google-workspace-suspended-user-account-renewed, Google Workspace Suspended User Account Renewed>> | Detects when a previously suspended user's account is renewed in Google Workspace. An adversary may renew a suspended user account to maintain access to the Google Workspace organization with a valid account. | update | 4 

|<<prebuilt-rule-8-17-4-kubernetes-denied-service-account-request, Kubernetes Denied Service Account Request>> | This rule detects when a service account makes an unauthorized request for resources from the API server. Service accounts follow a very predictable pattern of behavior. A service account should never send an unauthorized request to the API server. This behavior is likely an indicator of compromise or of a problem within the cluster. An adversary may have gained access to credentials/tokens and this could be an attempt to access or create resources to facilitate further movement or execution within the cluster. | update | 6 

|<<prebuilt-rule-8-17-4-kubernetes-suspicious-self-subject-review, Kubernetes Suspicious Self-Subject Review>> | This rule detects when a service account or node attempts to enumerate their own permissions via the selfsubjectaccessreview or selfsubjectrulesreview APIs. This is highly unusual behavior for non-human identities like service accounts and nodes. An adversary may have gained access to credentials/tokens and this could be an attempt to determine what privileges they have to facilitate further movement or execution within the cluster. | update | 204 

|<<prebuilt-rule-8-17-4-kubernetes-user-exec-into-pod, Kubernetes User Exec into Pod>> | This rule detects a user attempt to establish a shell session into a pod using the 'exec' command. Using the 'exec' command in a pod allows a user to establish a temporary shell session and execute any process/commands in the pod. An adversary may call bash to gain a persistent interactive shell which will allow access to any data the pod has permissions to, including secrets. | update | 204 

|<<prebuilt-rule-8-17-4-kubernetes-anonymous-request-authorized, Kubernetes Anonymous Request Authorized>> | This rule detects when an unauthenticated user request is authorized within the cluster. Attackers may attempt to use anonymous accounts to gain initial access to the cluster or to avoid attribution of their activities within the cluster. This rule excludes the /healthz, /livez and /readyz endpoints which are commonly accessed anonymously. | update | 7 

|<<prebuilt-rule-8-17-4-kubernetes-exposed-service-created-with-type-nodeport, Kubernetes Exposed Service Created With Type NodePort>> | This rule detects an attempt to create or modify a service as type NodePort. The NodePort service allows a user to externally expose a set of labeled pods to the internet. This creates an open port on every worker node in the cluster that has a pod for that service. When external traffic is received on that open port, it directs it to the specific pod through the service representing it. A malicious user can configure a service as type Nodeport in order to intercept traffic from other pods or nodes, bypassing firewalls and other network security measures configured for load balancers within a cluster. This creates a direct method of communication between the cluster and the outside world, which could be used for more malicious behavior and certainly widens the attack surface of your cluster. | update | 204 

|<<prebuilt-rule-8-17-4-kubernetes-container-created-with-excessive-linux-capabilities, Kubernetes Container Created with Excessive Linux Capabilities>> | This rule detects a container deployed with one or more dangerously permissive Linux capabilities. An attacker with the ability to deploy a container with added capabilities could use this for further execution, lateral movement, or privilege escalation within a cluster. The capabilities detected in this rule have been used in container escapes to the host machine. | update | 6 

|<<prebuilt-rule-8-17-4-kubernetes-pod-created-with-hostipc, Kubernetes Pod Created With HostIPC>> | This rule detects an attempt to create or modify a pod using the host IPC namespace. This gives access to data used by any pod that also use the hosts IPC namespace. If any process on the host or any processes in a pod uses the hosts inter-process communication mechanisms (shared memory, semaphore arrays, message queues, etc.), an attacker can read/write to those same mechanisms. They may look for files in /dev/shm or use ipcs to check for any IPC facilities being used. | update | 205 

|<<prebuilt-rule-8-17-4-kubernetes-pod-created-with-hostnetwork, Kubernetes Pod Created With HostNetwork>> | This rules detects an attempt to create or modify a pod attached to the host network. HostNetwork allows a pod to use the node network namespace. Doing so gives the pod access to any service running on localhost of the host. An attacker could use this access to snoop on network activity of other pods on the same node or bypass restrictive network policies applied to its given namespace. | update | 205 

|<<prebuilt-rule-8-17-4-kubernetes-pod-created-with-hostpid, Kubernetes Pod Created With HostPID>> | This rule detects an attempt to create or modify a pod attached to the host PID namespace. HostPID allows a pod to access all the processes running on the host and could allow an attacker to take malicious action. When paired with ptrace this can be used to escalate privileges outside of the container. When paired with a privileged container, the pod can see all of the processes on the host. An attacker can enter the init system (PID 1) on the host. From there, they could execute a shell and continue to escalate privileges to root. | update | 205 

|<<prebuilt-rule-8-17-4-kubernetes-pod-created-with-a-sensitive-hostpath-volume, Kubernetes Pod created with a Sensitive hostPath Volume>> | This rule detects when a pod is created with a sensitive volume of type hostPath. A hostPath volume type mounts a sensitive file or folder from the node to the container. If the container gets compromised, the attacker can use this mount for gaining access to the node. There are many ways a container with unrestricted access to the host filesystem can escalate privileges, including reading data from other containers, and accessing tokens of more privileged pods. | update | 205 

|<<prebuilt-rule-8-17-4-kubernetes-privileged-pod-created, Kubernetes Privileged Pod Created>> | This rule detects when a user creates a pod/container running in privileged mode. A highly privileged container has access to the node's resources and breaks the isolation between containers. If compromised, an attacker can use the privileged container to gain access to the underlying host. Gaining access to the host may provide the adversary with the opportunity to achieve follow-on objectives, such as establishing persistence, moving laterally within the environment, or setting up a command and control channel on the host. | update | 205 

|<<prebuilt-rule-8-17-4-kubernetes-suspicious-assignment-of-controller-service-account, Kubernetes Suspicious Assignment of Controller Service Account>> | This rule detects a request to attach a controller service account to an existing or new pod running in the kube-system namespace. By default, controllers running as part of the API Server utilize admin-equivalent service accounts hosted in the kube-system namespace. Controller service accounts aren't normally assigned to running pods and could indicate adversary behavior within the cluster. An attacker that can create or modify pods or pod controllers in the kube-system namespace, can assign one of these admin-equivalent service accounts to a pod and abuse their powerful token to escalate privileges and gain complete cluster control. | update | 7 

|<<prebuilt-rule-8-17-4-high-mean-of-process-arguments-in-an-rdp-session, High Mean of Process Arguments in an RDP Session>> | A machine learning job has detected unusually high number of process arguments in an RDP session. Executing sophisticated attacks such as lateral movement can involve the use of complex commands, obfuscation mechanisms, redirection and piping, which in turn increases the number of arguments in a command. | update | 5 

|<<prebuilt-rule-8-17-4-high-mean-of-rdp-session-duration, High Mean of RDP Session Duration>> | A machine learning job has detected unusually high mean of RDP session duration. Long RDP sessions can be used to evade detection mechanisms via session persistence, and might be used to perform tasks such as lateral movement, that might require uninterrupted access to a compromised machine. | update | 5 

|<<prebuilt-rule-8-17-4-unusual-remote-file-size, Unusual Remote File Size>> | A machine learning job has detected an unusually high file size shared by a remote host indicating potential lateral movement activity. One of the primary goals of attackers after gaining access to a network is to locate and exfiltrate valuable information. Instead of multiple small transfers that can raise alarms, attackers might choose to bundle data into a single large file transfer. | update | 5 

|<<prebuilt-rule-8-17-4-high-variance-in-rdp-session-duration, High Variance in RDP Session Duration>> | A machine learning job has detected unusually high variance of RDP session duration. Long RDP sessions can be used to evade detection mechanisms via session persistence, and might be used to perform tasks such as lateral movement, that might require uninterrupted access to a compromised machine. | update | 5 

|<<prebuilt-rule-8-17-4-unusual-remote-file-directory, Unusual Remote File Directory>> | An anomaly detection job has detected a remote file transfer on an unusual directory indicating a potential lateral movement activity on the host. Many Security solutions monitor well-known directories for suspicious activities, so attackers might use less common directories to bypass monitoring. | update | 5 

|<<prebuilt-rule-8-17-4-unusual-remote-file-extension, Unusual Remote File Extension>> | An anomaly detection job has detected a remote file transfer with a rare extension, which could indicate potential lateral movement activity on the host. | update | 5 

|<<prebuilt-rule-8-17-4-spike-in-number-of-connections-made-from-a-source-ip, Spike in Number of Connections Made from a Source IP>> | A machine learning job has detected a high count of destination IPs establishing an RDP connection with a single source IP. Once an attacker has gained access to one system, they might attempt to access more in the network in search of valuable assets, data, or further access points. | update | 5 

|<<prebuilt-rule-8-17-4-spike-in-number-of-connections-made-to-a-destination-ip, Spike in Number of Connections Made to a Destination IP>> | A machine learning job has detected a high count of source IPs establishing an RDP connection with a single destination IP. Attackers might use multiple compromised systems to attack a target to ensure redundancy in case a source IP gets detected and blocked. | update | 5 

|<<prebuilt-rule-8-17-4-spike-in-number-of-processes-in-an-rdp-session, Spike in Number of Processes in an RDP Session>> | A machine learning job has detected unusually high number of processes started in a single RDP session. Executing a large number of processes remotely on other machines can be an indicator of lateral movement activity. | update | 5 

|<<prebuilt-rule-8-17-4-spike-in-remote-file-transfers, Spike in Remote File Transfers>> | A machine learning job has detected an abnormal volume of remote files shared on the host indicating potential lateral movement activity. One of the primary goals of attackers after gaining access to a network is to locate and exfiltrate valuable information. Attackers might perform multiple small transfers to match normal egress activity in the network, to evade detection. | update | 5 

|<<prebuilt-rule-8-17-4-unusual-time-or-day-for-an-rdp-session, Unusual Time or Day for an RDP Session>> | A machine learning job has detected an RDP session started at an usual time or weekday. An RDP session at an unusual time could be followed by other suspicious activities, so catching this is a good first step in detecting a larger attack. | update | 5 

|<<prebuilt-rule-8-17-4-microsoft-365-inbox-forwarding-rule-created, Microsoft 365 Inbox Forwarding Rule Created>> | Identifies when a new Inbox forwarding rule is created in Microsoft 365. Inbox rules process messages in the Inbox based on conditions and take actions. In this case, the rules will forward the emails to a defined address. Attackers can abuse Inbox Rules to intercept and exfiltrate email data without making organization-wide configuration changes or having the corresponding privileges. | update | 207 

|<<prebuilt-rule-8-17-4-attempts-to-brute-force-a-microsoft-365-user-account, Attempts to Brute Force a Microsoft 365 User Account>> | Identifies potential brute-force attempts against Microsoft 365 user accounts by detecting a high number of failed login attempts or login sources within a 30-minute window. Attackers may attempt to brute force user accounts to gain unauthorized access to Microsoft 365 services. | update | 312 

|<<prebuilt-rule-8-17-4-o365-excessive-single-sign-on-logon-errors, O365 Excessive Single Sign-On Logon Errors>> | Identifies accounts with a high number of single sign-on (SSO) logon errors. Excessive logon errors may indicate an attempt to brute force a password or SSO token. | update | 208 

|<<prebuilt-rule-8-17-4-microsoft-365-exchange-dlp-policy-removed, Microsoft 365 Exchange DLP Policy Removed>> | Identifies when a Data Loss Prevention (DLP) policy is removed in Microsoft 365. An adversary may remove a DLP policy to evade existing DLP monitoring. | update | 207 

|<<prebuilt-rule-8-17-4-microsoft-365-exchange-malware-filter-policy-deletion, Microsoft 365 Exchange Malware Filter Policy Deletion>> | Identifies when a malware filter policy has been deleted in Microsoft 365. A malware filter policy is used to alert administrators that an internal user sent a message that contained malware. This may indicate an account or machine compromise that would need to be investigated. Deletion of a malware filter policy may be done to evade detection. | update | 207 

|<<prebuilt-rule-8-17-4-microsoft-365-exchange-malware-filter-rule-modification, Microsoft 365 Exchange Malware Filter Rule Modification>> | Identifies when a malware filter rule has been deleted or disabled in Microsoft 365. An adversary or insider threat may want to modify a malware filter rule to evade detection. | update | 207 

|<<prebuilt-rule-8-17-4-microsoft-365-exchange-safe-attachment-rule-disabled, Microsoft 365 Exchange Safe Attachment Rule Disabled>> | Identifies when a safe attachment rule is disabled in Microsoft 365. Safe attachment rules can extend malware protections to include routing all messages and attachments without a known malware signature to a special hypervisor environment. An adversary or insider threat may disable a safe attachment rule to exfiltrate data or evade defenses. | update | 207 

|<<prebuilt-rule-8-17-4-o365-mailbox-audit-logging-bypass, O365 Mailbox Audit Logging Bypass>> | Detects the occurrence of mailbox audit bypass associations. The mailbox audit is responsible for logging specified mailbox events (like accessing a folder or a message or permanently deleting a message). However, actions taken by some authorized accounts, such as accounts used by third-party tools or accounts used for lawful monitoring, can create a large number of mailbox audit log entries and may not be of interest to your organization. Because of this, administrators can create bypass associations, allowing certain accounts to perform their tasks without being logged. Attackers can abuse this allowlist mechanism to conceal actions taken, as the mailbox audit will log no activity done by the account. | update | 207 

|<<prebuilt-rule-8-17-4-microsoft-365-exchange-transport-rule-creation, Microsoft 365 Exchange Transport Rule Creation>> | Identifies a transport rule creation in Microsoft 365. As a best practice, Exchange Online mail transport rules should not be set to forward email to domains outside of your organization. An adversary may create transport rules to exfiltrate data. | update | 207 

|<<prebuilt-rule-8-17-4-microsoft-365-exchange-transport-rule-modification, Microsoft 365 Exchange Transport Rule Modification>> | Identifies when a transport rule has been disabled or deleted in Microsoft 365. Mail flow rules (also known as transport rules) are used to identify and take action on messages that flow through your organization. An adversary or insider threat may modify a transport rule to exfiltrate data or evade defenses. | update | 207 

|<<prebuilt-rule-8-17-4-microsoft-365-potential-ransomware-activity, Microsoft 365 Potential ransomware activity>> | Identifies when Microsoft Cloud App Security reports that a user has uploaded files to the cloud that might be infected with ransomware. | update | 207 

|<<prebuilt-rule-8-17-4-microsoft-365-unusual-volume-of-file-deletion, Microsoft 365 Unusual Volume of File Deletion>> | Identifies that a user has deleted an unusually large volume of files as reported by Microsoft Cloud App Security. | update | 207 

|<<prebuilt-rule-8-17-4-suspicious-microsoft-365-mail-access-by-clientappid, Suspicious Microsoft 365 Mail Access by ClientAppId>> | Identifies when a Microsoft 365 Mailbox is accessed by a ClientAppId that was observed for the fist time during the last 10 days. | update | 108 

|<<prebuilt-rule-8-17-4-microsoft-365-exchange-anti-phish-policy-deletion, Microsoft 365 Exchange Anti-Phish Policy Deletion>> | Identifies the deletion of an anti-phishing policy in Microsoft 365. By default, Microsoft 365 includes built-in features that help protect users from phishing attacks. Anti-phishing polices increase this protection by refining settings to better detect and prevent attacks. | update | 207 

|<<prebuilt-rule-8-17-4-microsoft-365-exchange-anti-phish-rule-modification, Microsoft 365 Exchange Anti-Phish Rule Modification>> | Identifies the modification of an anti-phishing rule in Microsoft 365. By default, Microsoft 365 includes built-in features that help protect users from phishing attacks. Anti-phishing rules increase this protection by refining settings to better detect and prevent attacks. | update | 207 

|<<prebuilt-rule-8-17-4-microsoft-365-exchange-safe-link-policy-disabled, Microsoft 365 Exchange Safe Link Policy Disabled>> | Identifies when a Safe Link policy is disabled in Microsoft 365. Safe Link policies for Office applications extend phishing protection to documents that contain hyperlinks, even after they have been delivered to a user. | update | 207 

|<<prebuilt-rule-8-17-4-microsoft-365-portal-logins-from-impossible-travel-locations, Microsoft 365 Portal Logins from Impossible Travel Locations>> | Detects successful Microsoft 365 portal logins from impossible travel locations. Impossible travel locations are defined as two different countries within a short time frame. This behavior may indicate an adversary attempting to access a Microsoft 365 account from a compromised account or a malicious actor attempting to access a Microsoft 365 account from a different location. | update | 3 

|<<prebuilt-rule-8-17-4-microsoft-365-portal-login-from-rare-location, Microsoft 365 Portal Login from Rare Location>> | Detects successful Microsoft 365 portal logins from rare locations. Rare locations are defined as locations that are not commonly associated with the user's account. This behavior may indicate an adversary attempting to access a Microsoft 365 account from an unusual location or behind a VPN. | update | 3 

|<<prebuilt-rule-8-17-4-microsoft-365-user-restricted-from-sending-email, Microsoft 365 User Restricted from Sending Email>> | Identifies when a user has been restricted from sending email due to exceeding sending limits of the service policies per the Security Compliance Center. | update | 207 

|<<prebuilt-rule-8-17-4-o365-email-reported-by-user-as-malware-or-phish, O365 Email Reported by User as Malware or Phish>> | Detects the occurrence of emails reported as Phishing or Malware by Users. Security Awareness training is essential to stay ahead of scammers and threat actors, as security products can be bypassed, and the user can still receive a malicious message. Educating users to report suspicious messages can help identify gaps in security controls and prevent malware infections and Business Email Compromise attacks. | update | 207 

|<<prebuilt-rule-8-17-4-onedrive-malware-file-upload, OneDrive Malware File Upload>> | Identifies the occurence of files uploaded to OneDrive being detected as Malware by the file scanning engine. Attackers can use File Sharing and Organization Repositories to spread laterally within the company and amplify their access. Users can inadvertently share these files without knowing their maliciousness, giving adversaries opportunity to gain initial access to other endpoints in the environment. | update | 207 

|<<prebuilt-rule-8-17-4-sharepoint-malware-file-upload, SharePoint Malware File Upload>> | Identifies the occurence of files uploaded to SharePoint being detected as Malware by the file scanning engine. Attackers can use File Sharing and Organization Repositories to spread laterally within the company and amplify their access. Users can inadvertently share these files without knowing their maliciousness, giving adversaries opportunities to gain initial access to other endpoints in the environment. | update | 207 

|<<prebuilt-rule-8-17-4-o365-exchange-suspicious-mailbox-right-delegation, O365 Exchange Suspicious Mailbox Right Delegation>> | Identifies the assignment of rights to access content from another mailbox. An adversary may use the compromised account to send messages to other accounts in the network of the target organization while creating inbox rules, so messages can evade spam/phishing detection mechanisms. | update | 207 

|<<prebuilt-rule-8-17-4-microsoft-365-exchange-dkim-signing-configuration-disabled, Microsoft 365 Exchange DKIM Signing Configuration Disabled>> | Identifies when a DomainKeys Identified Mail (DKIM) signing configuration is disabled in Microsoft 365. With DKIM in Microsoft 365, messages that are sent from Exchange Online will be cryptographically signed. This will allow the receiving email system to validate that the messages were generated by a server that the organization authorized and were not spoofed. | update | 207 

|<<prebuilt-rule-8-17-4-microsoft-365-exchange-management-group-role-assignment, Microsoft 365 Exchange Management Group Role Assignment>> | Identifies when a new role is assigned to a management group in Microsoft 365. An adversary may attempt to add a role in order to maintain persistence in an environment. | update | 207 

|<<prebuilt-rule-8-17-4-microsoft-365-global-administrator-role-assigned, Microsoft 365 Global Administrator Role Assigned>> | In Azure Active Directory (Azure AD), permissions to manage resources are assigned using roles. The Global Administrator is a role that enables users to have access to all administrative features in Azure AD and services that use Azure AD identities like the Microsoft 365 Defender portal, the Microsoft 365 compliance center, Exchange, SharePoint Online, and Skype for Business Online. Attackers can add users as Global Administrators to maintain access and manage all subscriptions and their settings and resources. | update | 207 

|<<prebuilt-rule-8-17-4-microsoft-365-teams-custom-application-interaction-allowed, Microsoft 365 Teams Custom Application Interaction Allowed>> | Identifies when custom applications are allowed in Microsoft Teams. If an organization requires applications other than those available in the Teams app store, custom applications can be developed as packages and uploaded. An adversary may abuse this behavior to establish persistence in an environment. | update | 208 

|<<prebuilt-rule-8-17-4-microsoft-365-teams-external-access-enabled, Microsoft 365 Teams External Access Enabled>> | Identifies when external access is enabled in Microsoft Teams. External access lets Teams and Skype for Business users communicate with other users that are outside their organization. An adversary may enable external access or add an allowed domain to exfiltrate data or maintain persistence in an environment. | update | 207 

|<<prebuilt-rule-8-17-4-microsoft-365-teams-guest-access-enabled, Microsoft 365 Teams Guest Access Enabled>> | Identifies when guest access is enabled in Microsoft Teams. Guest access in Teams allows people outside the organization to access teams and channels. An adversary may enable guest access to maintain persistence in an environment. | update | 207 

|<<prebuilt-rule-8-17-4-new-or-modified-federation-domain, New or Modified Federation Domain>> | Identifies a new or modified federation domain, which can be used to create a trust between O365 and an external identity provider. | update | 208 

|<<prebuilt-rule-8-17-4-attempted-bypass-of-okta-mfa, Attempted Bypass of Okta MFA>> | Detects attempts to bypass Okta multi-factor authentication (MFA). An adversary may attempt to bypass the Okta MFA policies configured for an organization in order to obtain unauthorized access to an application. | update | 412 

|<<prebuilt-rule-8-17-4-attempts-to-brute-force-an-okta-user-account, Attempts to Brute Force an Okta User Account>> | Identifies when an Okta user account is locked out 3 times within a 3 hour window. An adversary may attempt a brute force or password spraying attack to obtain unauthorized access to user accounts. The default Okta authentication policy ensures that a user account is locked out after 10 failed authentication attempts. | update | 413 

|<<prebuilt-rule-8-17-4-multiple-okta-user-auth-events-with-same-device-token-hash-behind-a-proxy, Multiple Okta User Auth Events with Same Device Token Hash Behind a Proxy>> | Detects when Okta user authentication events are reported for multiple users with the same device token hash behind a proxy. | update | 207 

|<<prebuilt-rule-8-17-4-multiple-device-token-hashes-for-single-okta-session, Multiple Device Token Hashes for Single Okta Session>> | This rule detects when a specific Okta actor has multiple device token hashes for a single Okta session. This may indicate an authenticated session has been hijacked or is being used by multiple devices. Adversaries may hijack a session to gain unauthorized access to Okta admin console, applications, tenants, or other resources. | update | 305 

|<<prebuilt-rule-8-17-4-multiple-okta-user-authentication-events-with-client-address, Multiple Okta User Authentication Events with Client Address>> | Detects when a certain threshold of Okta user authentication events are reported for multiple users from the same client address. Adversaries may attempt to launch a credential stuffing or password spraying attack from the same device by using a list of known usernames and passwords to gain unauthorized access to user accounts. | update | 204 

|<<prebuilt-rule-8-17-4-multiple-okta-user-authentication-events-with-same-device-token-hash, Multiple Okta User Authentication Events with Same Device Token Hash>> | Detects when a high number of Okta user authentication events are reported for multiple users in a short time frame. Adversaries may attempt to launch a credential stuffing or password spraying attack from the same device by using a list of known usernames and passwords to gain unauthorized access to user accounts. | update | 204 

|<<prebuilt-rule-8-17-4-okta-brute-force-or-password-spraying-attack, Okta Brute Force or Password Spraying Attack>> | Identifies a high number of failed Okta user authentication attempts from a single IP address, which could be indicative of a brute force or password spraying attack. An adversary may attempt a brute force or password spraying attack to obtain unauthorized access to user accounts. | update | 413 

|<<prebuilt-rule-8-17-4-potential-okta-mfa-bombing-via-push-notifications, Potential Okta MFA Bombing via Push Notifications>> | Detects when an attacker abuses the Multi-Factor authentication mechanism by repeatedly issuing login requests until the user eventually accepts the Okta push notification. An adversary may attempt to bypass the Okta MFA policies configured for an organization to obtain unauthorized access. | update | 208 

|<<prebuilt-rule-8-17-4-high-number-of-okta-device-token-cookies-generated-for-authentication, High Number of Okta Device Token Cookies Generated for Authentication>> | Detects when an Okta client address has a certain threshold of Okta user authentication events with multiple device token hashes generated for single user authentication. Adversaries may attempt to launch a credential stuffing or password spraying attack from the same device by using a list of known usernames and passwords to gain unauthorized access to user accounts. | update | 204 

|<<prebuilt-rule-8-17-4-potentially-successful-mfa-bombing-via-push-notifications, Potentially Successful MFA Bombing via Push Notifications>> | Detects when an attacker abuses the Multi-Factor authentication mechanism by repeatedly issuing login requests until the user eventually accepts the Okta push notification. An adversary may attempt to bypass the Okta MFA policies configured for an organization to obtain unauthorized access. | update | 414 

|<<prebuilt-rule-8-17-4-okta-user-session-impersonation, Okta User Session Impersonation>> | A user has initiated a session impersonation granting them access to the environment with the permissions of the user they are impersonating. This would likely indicate Okta administrative access and should only ever occur if requested and expected. | update | 412 

|<<prebuilt-rule-8-17-4-attempt-to-deactivate-an-okta-network-zone, Attempt to Deactivate an Okta Network Zone>> | Detects attempts to deactivate an Okta network zone. Okta network zones can be configured to limit or restrict access to a network based on IP addresses or geolocations. An adversary may attempt to modify, delete, or deactivate an Okta network zone in order to remove or weaken an organization's security controls. | update | 411 

|<<prebuilt-rule-8-17-4-attempt-to-delete-an-okta-network-zone, Attempt to Delete an Okta Network Zone>> | Detects attempts to delete an Okta network zone. Okta network zones can be configured to limit or restrict access to a network based on IP addresses or geolocations. An adversary may attempt to modify, delete, or deactivate an Okta network zone in order to remove or weaken an organization's security controls. | update | 411 

|<<prebuilt-rule-8-17-4-unauthorized-scope-for-public-app-oauth2-token-grant-with-client-credentials, Unauthorized Scope for Public App OAuth2 Token Grant with Client Credentials>> | Identifies a failed OAuth 2.0 token grant attempt for a public client app using client credentials. This event is generated when a public client app attempts to exchange a client credentials grant for an OAuth 2.0 access token, but the request is denied due to the lack of required scopes. This could indicate compromised client credentials in which an adversary is attempting to obtain an access token for unauthorized scopes. This is a [New Terms](https://www.elastic.co/guide/en/security/current/rules-ui-create.html#create-new-terms-rule) rule where the `okta.actor.display_name` field value has not been seen in the last 14 days regarding this event. | update | 206 

|<<prebuilt-rule-8-17-4-attempt-to-deactivate-an-okta-policy, Attempt to Deactivate an Okta Policy>> | Detects attempts to deactivate an Okta policy. An adversary may attempt to deactivate an Okta policy in order to weaken an organization's security controls. For example, an adversary may attempt to deactivate an Okta multi-factor authentication (MFA) policy in order to weaken the authentication requirements for user accounts. | update | 411 

|<<prebuilt-rule-8-17-4-attempt-to-deactivate-an-okta-policy-rule, Attempt to Deactivate an Okta Policy Rule>> | Detects attempts to deactivate a rule within an Okta policy. An adversary may attempt to deactivate a rule within an Okta policy in order to remove or weaken an organization's security controls. | update | 412 

|<<prebuilt-rule-8-17-4-attempt-to-delete-an-okta-policy, Attempt to Delete an Okta Policy>> | Detects attempts to delete an Okta policy. An adversary may attempt to delete an Okta policy in order to weaken an organization's security controls. For example, an adversary may attempt to delete an Okta multi-factor authentication (MFA) policy in order to weaken the authentication requirements for user accounts. | update | 411 

|<<prebuilt-rule-8-17-4-attempt-to-delete-an-okta-policy-rule, Attempt to Delete an Okta Policy Rule>> | Detects attempts to delete a rule within an Okta policy. An adversary may attempt to delete an Okta policy rule in order to weaken an organization's security controls. | update | 411 

|<<prebuilt-rule-8-17-4-attempt-to-modify-an-okta-network-zone, Attempt to Modify an Okta Network Zone>> | Detects attempts to modify an Okta network zone. Okta network zones can be configured to limit or restrict access to a network based on IP addresses or geolocations. An adversary may attempt to modify, delete, or deactivate an Okta network zone in order to remove or weaken an organization's security controls. | update | 411 

|<<prebuilt-rule-8-17-4-attempt-to-modify-an-okta-policy, Attempt to Modify an Okta Policy>> | Detects attempts to modify an Okta policy. An adversary may attempt to modify an Okta policy in order to weaken an organization's security controls. For example, an adversary may attempt to modify an Okta multi-factor authentication (MFA) policy in order to weaken the authentication requirements for user accounts. | update | 411 

|<<prebuilt-rule-8-17-4-attempt-to-modify-an-okta-policy-rule, Attempt to Modify an Okta Policy Rule>> | Detects attempts to modify a rule within an Okta policy. An adversary may attempt to modify an Okta policy rule in order to weaken an organization's security controls. | update | 412 

|<<prebuilt-rule-8-17-4-high-number-of-okta-user-password-reset-or-unlock-attempts, High Number of Okta User Password Reset or Unlock Attempts>> | Identifies a high number of Okta user password reset or account unlock attempts. An adversary may attempt to obtain unauthorized access to Okta user accounts using these methods and attempt to blend in with normal activity in their target's environment and evade detection. | update | 413 

|<<prebuilt-rule-8-17-4-attempt-to-revoke-okta-api-token, Attempt to Revoke Okta API Token>> | Identifies attempts to revoke an Okta API token. An adversary may attempt to revoke or delete an Okta API token to disrupt an organization's business operations. | update | 411 

|<<prebuilt-rule-8-17-4-attempt-to-deactivate-an-okta-application, Attempt to Deactivate an Okta Application>> | Detects attempts to deactivate an Okta application. An adversary may attempt to modify, deactivate, or delete an Okta application in order to weaken an organization's security controls or disrupt their business operations. | update | 411 

|<<prebuilt-rule-8-17-4-attempt-to-delete-an-okta-application, Attempt to Delete an Okta Application>> | Detects attempts to delete an Okta application. An adversary may attempt to modify, deactivate, or delete an Okta application in order to weaken an organization's security controls or disrupt their business operations. | update | 410 

|<<prebuilt-rule-8-17-4-attempt-to-modify-an-okta-application, Attempt to Modify an Okta Application>> | Detects attempts to modify an Okta application. An adversary may attempt to modify, deactivate, or delete an Okta application in order to weaken an organization's security controls or disrupt their business operations. | update | 410 

|<<prebuilt-rule-8-17-4-possible-okta-dos-attack, Possible Okta DoS Attack>> | Detects possible Denial of Service (DoS) attacks against an Okta organization. An adversary may attempt to disrupt an organization's business operations by performing a DoS attack against its Okta service. | update | 410 

|<<prebuilt-rule-8-17-4-first-occurrence-of-okta-user-session-started-via-proxy, First Occurrence of Okta User Session Started via Proxy>> | Identifies the first occurrence of an Okta user session started via a proxy. | update | 206 

|<<prebuilt-rule-8-17-4-new-okta-authentication-behavior-detected, New Okta Authentication Behavior Detected>> | Detects events where Okta behavior detection has identified a new authentication behavior. | update | 207 

|<<prebuilt-rule-8-17-4-okta-fastpass-phishing-detection, Okta FastPass Phishing Detection>> | Detects when Okta FastPass prevents a user from authenticating to a phishing website. | update | 308 

|<<prebuilt-rule-8-17-4-unauthorized-access-to-an-okta-application, Unauthorized Access to an Okta Application>> | Identifies unauthorized access attempts to Okta applications. | update | 411 

|<<prebuilt-rule-8-17-4-okta-user-sessions-started-from-different-geolocations, Okta User Sessions Started from Different Geolocations>> | Detects when a specific Okta actor has multiple sessions started from different geolocations. Adversaries may attempt to launch an attack by using a list of known usernames and passwords to gain unauthorized access to user accounts from different locations. | update | 304 

|<<prebuilt-rule-8-17-4-okta-sign-in-events-via-third-party-idp, Okta Sign-In Events via Third-Party IdP>> | Detects sign-in events where authentication is carried out via a third-party Identity Provider (IdP). | update | 207 

|<<prebuilt-rule-8-17-4-successful-application-sso-from-rare-unknown-client-device, Successful Application SSO from Rare Unknown Client Device>> | Detects successful single sign-on (SSO) events to Okta applications from an unrecognized or "unknown" client device, as identified by the user-agent string. This activity may be indicative of exploitation of a vulnerability in Okta's Classic Engine, which could allow an attacker to bypass application-specific sign-on policies, such as device or network restrictions. The vulnerability potentially enables unauthorized access to applications using only valid, stolen credentials, without requiring additional authentication factors. | update | 205 

|<<prebuilt-rule-8-17-4-suspicious-activity-reported-by-okta-user, Suspicious Activity Reported by Okta User>> | Detects when a user reports suspicious activity for their Okta account. These events should be investigated, as they can help security teams identify when an adversary is attempting to gain access to their network. | update | 410 

|<<prebuilt-rule-8-17-4-multiple-okta-sessions-detected-for-a-single-user, Multiple Okta Sessions Detected for a Single User>> | Detects when a user has started multiple Okta sessions with the same user account and different session IDs. This may indicate that an attacker has stolen the user's session cookie and is using it to access the user's account from a different location. | update | 208 

|<<prebuilt-rule-8-17-4-okta-threatinsight-threat-suspected-promotion, Okta ThreatInsight Threat Suspected Promotion>> | Okta ThreatInsight is a feature that provides valuable debug data regarding authentication and authorization processes, which is logged in the system. Within this data, there is a specific field called threat_suspected, which represents Okta's internal evaluation of the authentication or authorization workflow. When this field is set to True, it suggests the presence of potential credential access techniques, such as password-spraying, brute-forcing, replay attacks, and other similar threats. | update | 410 

|<<prebuilt-rule-8-17-4-administrator-privileges-assigned-to-an-okta-group, Administrator Privileges Assigned to an Okta Group>> | Detects when an administrator role is assigned to an Okta group. An adversary may attempt to assign administrator privileges to an Okta group in order to assign additional permissions to compromised user accounts and maintain access to their target organization. | update | 410 

|<<prebuilt-rule-8-17-4-administrator-role-assigned-to-an-okta-user, Administrator Role Assigned to an Okta User>> | Identifies when an administrator role is assigned to an Okta user. An adversary may attempt to assign an administrator role to an Okta user in order to assign additional permissions to a user account and maintain access to their target's environment. | update | 410 

|<<prebuilt-rule-8-17-4-attempt-to-create-okta-api-token, Attempt to Create Okta API Token>> | Detects attempts to create an Okta API token. An adversary may create an Okta API token to maintain access to an organization's network while they work to achieve their objectives. An attacker may abuse an API token to execute techniques such as creating user accounts or disabling security rules or policies. | update | 410 

|<<prebuilt-rule-8-17-4-attempt-to-reset-mfa-factors-for-an-okta-user-account, Attempt to Reset MFA Factors for an Okta User Account>> | Detects attempts to reset an Okta user's enrolled multi-factor authentication (MFA) factors. An adversary may attempt to reset the MFA factors for an Okta user's account in order to register new MFA factors and abuse the account to blend in with normal activity in the victim's environment. | update | 411 

|<<prebuilt-rule-8-17-4-mfa-deactivation-with-no-re-activation-for-okta-user-account, MFA Deactivation with no Re-Activation for Okta User Account>> | Detects multi-factor authentication (MFA) deactivation with no subsequent re-activation for an Okta user account. An adversary may deactivate MFA for an Okta user account in order to weaken the authentication requirements for the account. | update | 413 

|<<prebuilt-rule-8-17-4-new-okta-identity-provider-idp-added-by-admin, New Okta Identity Provider (IdP) Added by Admin>> | Detects the creation of a new Identity Provider (IdP) by a Super Administrator or Organization Administrator within Okta. | update | 206 

|<<prebuilt-rule-8-17-4-modification-or-removal-of-an-okta-application-sign-on-policy, Modification or Removal of an Okta Application Sign-On Policy>> | Detects attempts to modify or delete a sign on policy for an Okta application. An adversary may attempt to modify or delete the sign on policy for an Okta application in order to remove or weaken an organization's security controls. | update | 411 

|<<prebuilt-rule-8-17-4-stolen-credentials-used-to-login-to-okta-account-after-mfa-reset, Stolen Credentials Used to Login to Okta Account After MFA Reset>> | Detects a sequence of suspicious activities on Windows hosts indicative of credential compromise, followed by efforts to undermine multi-factor authentication (MFA) and single sign-on (SSO) mechanisms for an Okta user account. | update | 206 

|<<prebuilt-rule-8-17-4-unusual-process-spawned-by-a-host, Unusual Process Spawned by a Host>> | A machine learning job has detected a suspicious Windows process. This process has been classified as suspicious in two ways. It was predicted to be suspicious by the ProblemChild supervised ML model, and it was found to be an unusual process, on a host that does not commonly manifest malicious activity. Such a process may be an instance of suspicious or malicious activity, possibly involving LOLbins, that may be resistant to detection using conventional search rules. | update | 108 

|<<prebuilt-rule-8-17-4-unusual-process-spawned-by-a-parent-process, Unusual Process Spawned by a Parent Process>> | A machine learning job has detected a suspicious Windows process. This process has been classified as malicious in two ways. It was predicted to be malicious by the ProblemChild supervised ML model, and it was found to be an unusual child process name, for the parent process, by an unsupervised ML model. Such a process may be an instance of suspicious or malicious activity, possibly involving LOLbins, that may be resistant to detection using conventional search rules. | update | 108 

|<<prebuilt-rule-8-17-4-unusual-process-spawned-by-a-user, Unusual Process Spawned by a User>> | A machine learning job has detected a suspicious Windows process. This process has been classified as malicious in two ways. It was predicted to be malicious by the ProblemChild supervised ML model, and it was found to be suspicious given that its user context is unusual and does not commonly manifest malicious activity,by an unsupervised ML model. Such a process may be an instance of suspicious or malicious activity, possibly involving LOLbins, that may be resistant to detection using conventional search rules. | update | 108 

|<<prebuilt-rule-8-17-4-machine-learning-detected-a-suspicious-windows-event-with-a-high-malicious-probability-score, Machine Learning Detected a Suspicious Windows Event with a High Malicious Probability Score>> | A supervised machine learning model (ProblemChild) has identified a suspicious Windows process event with high probability of it being malicious activity. Alternatively, the model's blocklist identified the event as being malicious. | update | 111 

|<<prebuilt-rule-8-17-4-machine-learning-detected-a-suspicious-windows-event-with-a-low-malicious-probability-score, Machine Learning Detected a Suspicious Windows Event with a Low Malicious Probability Score>> | A supervised machine learning model (ProblemChild) has identified a suspicious Windows process event with low probability of it being malicious activity. Alternatively, the model's blocklist identified the event as being malicious. | update | 9 

|<<prebuilt-rule-8-17-4-suspicious-windows-process-cluster-spawned-by-a-host, Suspicious Windows Process Cluster Spawned by a Host>> | A machine learning job combination has detected a set of one or more suspicious Windows processes with unusually high scores for malicious probability. These process(es) have been classified as malicious in several ways. The process(es) were predicted to be malicious by the ProblemChild supervised ML model. If the anomaly contains a cluster of suspicious processes, each process has the same host name, and the aggregate score of the event cluster was calculated to be unusually high by an unsupervised ML model. Such a cluster often contains suspicious or malicious activity, possibly involving LOLbins, that may be resistant to detection using conventional search rules. | update | 108 

|<<prebuilt-rule-8-17-4-suspicious-windows-process-cluster-spawned-by-a-parent-process, Suspicious Windows Process Cluster Spawned by a Parent Process>> | A machine learning job combination has detected a set of one or more suspicious Windows processes with unusually high scores for malicious probability. These process(es) have been classified as malicious in several ways. The process(es) were predicted to be malicious by the ProblemChild supervised ML model. If the anomaly contains a cluster of suspicious processes, each process has the same parent process name, and the aggregate score of the event cluster was calculated to be unusually high by an unsupervised ML model. Such a cluster often contains suspicious or malicious activity, possibly involving LOLbins, that may be resistant to detection using conventional search rules. | update | 108 

|<<prebuilt-rule-8-17-4-suspicious-windows-process-cluster-spawned-by-a-user, Suspicious Windows Process Cluster Spawned by a User>> | A machine learning job combination has detected a set of one or more suspicious Windows processes with unusually high scores for malicious probability. These process(es) have been classified as malicious in several ways. The process(es) were predicted to be malicious by the ProblemChild supervised ML model. If the anomaly contains a cluster of suspicious processes, each process has the same user name, and the aggregate score of the event cluster was calculated to be unusually high by an unsupervised ML model. Such a cluster often contains suspicious or malicious activity, possibly involving LOLbins, that may be resistant to detection using conventional search rules. | update | 108 

|<<prebuilt-rule-8-17-4-linux-clipboard-activity-detected, Linux Clipboard Activity Detected>> | This rule monitors for the usage of the most common clipboard utilities on unix systems by an uncommon process group leader. Adversaries may collect data stored in the clipboard from users copying information within or between applications. | update | 6 

|<<prebuilt-rule-8-17-4-aws-cli-command-with-custom-endpoint-url, AWS CLI Command with Custom Endpoint URL>> | Detects the use of the AWS CLI with the `--endpoint-url` argument, which allows users to specify a custom endpoint URL for AWS services. This can be leveraged by adversaries to redirect API requests to non-standard or malicious endpoints, potentially bypassing typical security controls and logging mechanisms. This behavior may indicate an attempt to interact with unauthorized or compromised infrastructure, exfiltrate data, or perform other malicious activities under the guise of legitimate AWS operations. | update | 2 

|<<prebuilt-rule-8-17-4-network-activity-detected-via-cat, Network Activity Detected via cat>> | This rule monitors for the execution of the cat command, followed by a connection attempt by the same process. Cat is capable of transfering data via tcp/udp channels by redirecting its read output to a /dev/tcp or /dev/udp channel. This activity is highly suspicious, and should be investigated. Attackers may leverage this capability to transfer tools or files to another host in the network or exfiltrate data while attempting to evade detection in the process. | update | 7 

|<<prebuilt-rule-8-17-4-network-connection-by-cups-or-foomatic-rip-child, Network Connection by Cups or Foomatic-rip Child>> | This detection rule addresses multiple vulnerabilities in the CUPS printing system, including CVE-2024-47176, CVE-2024-47076, CVE-2024-47175, and CVE-2024-47177. Specifically, this rule detects network connections initiated by a child processes of foomatic-rip. These flaws impact components like cups-browsed, libcupsfilters, libppd, and foomatic-rip, allowing remote unauthenticated attackers to manipulate IPP URLs or inject malicious data through crafted UDP packets or network spoofing. This can result in arbitrary command execution when a print job is initiated. | update | 2 

|<<prebuilt-rule-8-17-4-curl-socks-proxy-activity-from-unusual-parent, Curl SOCKS Proxy Activity from Unusual Parent>> | This rule detects the use of the `curl` command-line tool with SOCKS proxy options, launched from an unusual parent process. Attackers may use `curl` to establish a SOCKS proxy connection to bypass network restrictions and exfiltrate data or communicate with C2 servers. | update | 2 

|<<prebuilt-rule-8-17-4-ipv4-ipv6-forwarding-activity, IPv4/IPv6 Forwarding Activity>> | This rule monitors for the execution of commands that enable IPv4 and IPv6 forwarding on Linux systems. Enabling IP forwarding can be used to route network traffic between different network interfaces, potentially allowing attackers to pivot between networks, exfiltrate data, or establish command and control channels. | update | 102 

|<<prebuilt-rule-8-17-4-potential-protocol-tunneling-via-chisel-client, Potential Protocol Tunneling via Chisel Client>> | This rule monitors for common command line flags leveraged by the Chisel client utility followed by a connection attempt. Chisel is a command-line utility used for creating and managing TCP and UDP tunnels, enabling port forwarding and secure communication between machines. Attackers can abuse the Chisel utility to establish covert communication channels, bypass network restrictions, and carry out malicious activities by creating tunnels that allow unauthorized access to internal systems. | update | 7 

|<<prebuilt-rule-8-17-4-potential-protocol-tunneling-via-chisel-server, Potential Protocol Tunneling via Chisel Server>> | This rule monitors for common command line flags leveraged by the Chisel server utility followed by a received connection within a timespan of 1 minute. Chisel is a command-line utility used for creating and managing TCP and UDP tunnels, enabling port forwarding and secure communication between machines. Attackers can abuse the Chisel utility to establish covert communication channels, bypass network restrictions, and carry out malicious activities by creating tunnels that allow unauthorized access to internal systems. | update | 7 

|<<prebuilt-rule-8-17-4-network-activity-detected-via-kworker, Network Activity Detected via Kworker>> | This rule monitors for network connections from a kworker process. kworker, or kernel worker, processes are part of the kernel's workqueue mechanism. They are responsible for executing work that has been scheduled to be done in kernel space, which might include tasks like handling interrupts, background activities, and other kernel-related tasks. Attackers may attempt to evade detection by masquerading as a kernel worker process. | update | 7 

|<<prebuilt-rule-8-17-4-proxychains-activity, ProxyChains Activity>> | This rule monitors for the execution of the ProxyChains utility. ProxyChains is a command-line tool that enables the routing of network connections through intermediary proxies, enhancing anonymity and enabling access to restricted resources. Attackers can exploit the ProxyChains utility to hide their true source IP address, evade detection, and perform malicious activities through a chain of proxy servers, potentially masking their identity and intentions. | update | 105 

|<<prebuilt-rule-8-17-4-linux-ssh-x11-forwarding, Linux SSH X11 Forwarding>> | This rule monitors for X11 forwarding via SSH. X11 forwarding is a feature that allows users to run graphical applications on a remote server and display the application's graphical user interface on their local machine. Attackers can abuse X11 forwarding for tunneling their GUI-based tools, pivot through compromised systems, and create covert communication channels, enabling lateral movement and facilitating remote control of systems within a network. | update | 105 

|<<prebuilt-rule-8-17-4-suspicious-utility-launched-via-proxychains, Suspicious Utility Launched via ProxyChains>> | This rule monitors for the execution of suspicious linux tools through ProxyChains. ProxyChains is a command-line tool that enables the routing of network connections through intermediary proxies, enhancing anonymity and enabling access to restricted resources. Attackers can exploit the ProxyChains utility to hide their true source IP address, evade detection, and perform malicious activities through a chain of proxy servers, potentially masking their identity and intentions. | update | 108 

|<<prebuilt-rule-8-17-4-potential-linux-tunneling-and-or-port-forwarding, Potential Linux Tunneling and/or Port Forwarding>> | This rule monitors for a set of Linux utilities that can be used for tunneling and port forwarding. Attackers can leverage tunneling and port forwarding techniques to bypass network defenses, establish hidden communication channels, and gain unauthorized access to internal resources, facilitating data exfiltration, lateral movement, and remote control. | update | 108 

|<<prebuilt-rule-8-17-4-suspicious-network-activity-to-the-internet-by-previously-unknown-executable, Suspicious Network Activity to the Internet by Previously Unknown Executable>> | This rule monitors for network connectivity to the internet from a previously unknown executable located in a suspicious directory. An alert from this rule can indicate the presence of potentially malicious activity, such as the execution of unauthorized or suspicious processes attempting to establish connections to unknown or suspicious destinations such as a command and control server. Detecting and investigating such behavior can help identify and mitigate potential security threats, protecting the system and its data from potential compromise. | update | 12 

|<<prebuilt-rule-8-17-4-potential-protocol-tunneling-via-earthworm, Potential Protocol Tunneling via EarthWorm>> | Identifies the execution of the EarthWorm tunneler. Adversaries may tunnel network communications to and from a victim system within a separate protocol to avoid detection and network filtering, or to enable access to otherwise unreachable systems. | update | 211 

|<<prebuilt-rule-8-17-4-sensitive-files-compression, Sensitive Files Compression>> | Identifies the use of a compression utility to collect known files containing sensitive information, such as credentials and system configurations. | update | 209 

|<<prebuilt-rule-8-17-4-potential-linux-credential-dumping-via-unshadow, Potential Linux Credential Dumping via Unshadow>> | Identifies the execution of the unshadow utility which is part of John the Ripper, a password-cracking tool on the host machine. Malicious actors can use the utility to retrieve the combined contents of the '/etc/shadow' and '/etc/password' files. Using the combined file generated from the utility, the malicious threat actors can use them as input for password-cracking utilities or prepare themselves for future operations by gathering credential information of the victim. | update | 109 

|<<prebuilt-rule-8-17-4-linux-init-pid-1-secret-dump-via-gdb, Linux init (PID 1) Secret Dump via GDB>> | This rule monitors for the potential memory dump of the init process (PID 1) through gdb. Attackers may leverage memory dumping techniques to attempt secret extraction from privileged processes. Tools that display this behavior include "truffleproc" and "bash-memory-dump". This behavior should not happen by default, and should be investigated thoroughly. | update | 107 

|<<prebuilt-rule-8-17-4-linux-process-hooking-via-gdb, Linux Process Hooking via GDB>> | This rule monitors for potential memory dumping through gdb. Attackers may leverage memory dumping techniques to attempt secret extraction from privileged processes. Tools that display this behavior include "truffleproc" and "bash-memory-dump". This behavior should not happen by default, and should be investigated thoroughly. | update | 104 

|<<prebuilt-rule-8-17-4-potential-linux-local-account-brute-force-detected, Potential Linux Local Account Brute Force Detected>> | Identifies multiple consecutive login attempts executed by one process targeting a local linux user account within a short time interval. Adversaries might brute force login attempts across different users with a default wordlist or a set of customly crafted passwords in an attempt to gain access to these accounts. | update | 8 

|<<prebuilt-rule-8-17-4-potential-external-linux-ssh-brute-force-detected, Potential External Linux SSH Brute Force Detected>> | Identifies multiple external consecutive login failures targeting a user account from the same source address within a short time interval. Adversaries will often brute force login attempts across multiple users with a common or known password, in an attempt to gain access to these accounts. | update | 8 

|<<prebuilt-rule-8-17-4-potential-internal-linux-ssh-brute-force-detected, Potential Internal Linux SSH Brute Force Detected>> | Identifies multiple internal consecutive login failures targeting a user account from the same source address within a short time interval. Adversaries will often brute force login attempts across multiple users with a common or known password, in an attempt to gain access to these accounts. | update | 12 

|<<prebuilt-rule-8-17-4-potential-successful-linux-ftp-brute-force-attack-detected, Potential Successful Linux FTP Brute Force Attack Detected>> | An FTP (file transfer protocol) brute force attack is a method where an attacker systematically tries different combinations of usernames and passwords to gain unauthorized access to an FTP server, and if successful, the impact can include unauthorized data access, manipulation, or theft, compromising the security and integrity of the server and potentially exposing sensitive information. This rule identifies multiple consecutive authentication failures targeting a specific user account from the same source address and within a short time interval, followed by a successful authentication. | update | 8 

|<<prebuilt-rule-8-17-4-potential-successful-linux-rdp-brute-force-attack-detected, Potential Successful Linux RDP Brute Force Attack Detected>> | An RDP (Remote Desktop Protocol) brute force attack involves an attacker repeatedly attempting various username and password combinations to gain unauthorized access to a remote computer via RDP, and if successful, the potential impact can include unauthorized control over the compromised system, data theft, or the ability to launch further attacks within the network, jeopardizing the security and confidentiality of the targeted system and potentially compromising the entire network infrastructure. This rule identifies multiple consecutive authentication failures targeting a specific user account within a short time interval, followed by a successful authentication. | update | 8 

|<<prebuilt-rule-8-17-4-potential-successful-ssh-brute-force-attack, Potential Successful SSH Brute Force Attack>> | Identifies multiple SSH login failures followed by a successful one from the same source address. Adversaries can attempt to login into multiple users with a common or known password to gain access to accounts. | update | 12 

|<<prebuilt-rule-8-17-4-potential-linux-credential-dumping-via-proc-filesystem, Potential Linux Credential Dumping via Proc Filesystem>> | Identifies the execution of the mimipenguin exploit script which is linux adaptation of Windows tool mimikatz. Mimipenguin exploit script is used to dump clear text passwords from a currently logged-in user. The tool exploits a known vulnerability CVE-2018-20781. Malicious actors can exploit the cleartext credentials in memory by dumping the process and extracting lines that have a high probability of containing cleartext passwords. | update | 108 

|<<prebuilt-rule-8-17-4-potential-openssh-backdoor-logging-activity, Potential OpenSSH Backdoor Logging Activity>> | Identifies a Secure Shell (SSH) client or server process creating or writing to a known SSH backdoor log file. Adversaries may modify SSH related binaries for persistence or credential access via patching sensitive functions to enable unauthorized access or to log SSH credentials for exfiltration. | update | 211 

|<<prebuilt-rule-8-17-4-unusual-instance-metadata-service-imds-api-request, Unusual Instance Metadata Service (IMDS) API Request>> | This rule identifies potentially malicious processes attempting to access the cloud service provider's instance metadata service (IMDS) API endpoint, which can be used to retrieve sensitive instance-specific information such as instance ID, public IP address, and even temporary security credentials if role's are assumed by that instance. The rule monitors for various tools and scripts like curl, wget, python, and perl that might be used to interact with the metadata API. | update | 3 

|<<prebuilt-rule-8-17-4-access-control-list-modification-via-setfacl, Access Control List Modification via setfacl>> | This rule detects Linux Access Control List (ACL) modification via the setfacl command. | update | 103 

|<<prebuilt-rule-8-17-4-attempt-to-disable-auditd-service, Attempt to Disable Auditd Service>> | Adversaries may attempt to disable the Auditd service to evade detection. Auditd is a Linux service that provides system auditing and logging. Disabling the Auditd service can prevent the system from logging important security events, which can be used to detect malicious activity. | update | 102 

|<<prebuilt-rule-8-17-4-attempt-to-disable-iptables-or-firewall, Attempt to Disable IPTables or Firewall>> | Adversaries may attempt to disable the iptables or firewall service in an attempt to affect how a host is allowed to receive or send network traffic. | update | 110 

|<<prebuilt-rule-8-17-4-attempt-to-disable-syslog-service, Attempt to Disable Syslog Service>> | Adversaries may attempt to disable the syslog service in an attempt to an attempt to disrupt event logging and evade detection by security controls. | update | 211 

|<<prebuilt-rule-8-17-4-base16-or-base32-encoding-decoding-activity, Base16 or Base32 Encoding/Decoding Activity>> | Adversaries may encode/decode data in an attempt to evade detection by host- or network-based security controls. | update | 211 

|<<prebuilt-rule-8-17-4-system-binary-moved-or-copied, System Binary Moved or Copied>> | This rule monitors for the copying or moving of a system binary. Adversaries may copy/move and rename system binaries to evade detection. Copying a system binary to a different location should not occur often, so if it does, the activity should be investigated. | update | 14 

|<<prebuilt-rule-8-17-4-file-made-immutable-by-chattr, File made Immutable by Chattr>> | Detects a file being made immutable using the chattr binary. Making a file immutable means it cannot be deleted or renamed, no link can be created to this file, most of the file's metadata can not be modified, and the file can not be opened in write mode. Threat actors will commonly utilize this to prevent tampering or modification of their malicious files or any system files they have modified for purposes of persistence (e.g .ssh, /etc/passwd, etc.). | update | 213 

|<<prebuilt-rule-8-17-4-attempt-to-clear-kernel-ring-buffer, Attempt to Clear Kernel Ring Buffer>> | Monitors for the deletion of the kernel ring buffer events through dmesg. Attackers may clear kernel ring buffer events to evade detection after installing a Linux kernel module (LKM). | update | 106 

|<<prebuilt-rule-8-17-4-hidden-files-and-directories-via-hidden-flag, Hidden Files and Directories via Hidden Flag>> | Identify activity related where adversaries can add the 'hidden' flag to files to hide them from the user in an attempt to evade detection. | update | 104 

|<<prebuilt-rule-8-17-4-directory-creation-in-bin-directory, Directory Creation in /bin directory>> | This rule identifies the creation of directories in the /bin directory. The /bin directory contains essential binary files that are required for the system to function properly. The creation of directories in this location could be an attempt to hide malicious files or executables, as these /bin directories usually just contain binaries. | update | 102 

|<<prebuilt-rule-8-17-4-potential-disabling-of-apparmor, Potential Disabling of AppArmor>> | This rule monitors for potential attempts to disable AppArmor. AppArmor is a Linux security module that enforces fine-grained access control policies to restrict the actions and resources that specific applications and processes can access. Adversaries may disable security tools to avoid possible detection of their tools and activities. | update | 108 

|<<prebuilt-rule-8-17-4-potential-disabling-of-selinux, Potential Disabling of SELinux>> | Identifies potential attempts to disable Security-Enhanced Linux (SELinux), which is a Linux kernel security feature to support access control policies. Adversaries may disable security tools to avoid possible detection of their tools and activities. | update | 211 

|<<prebuilt-rule-8-17-4-potential-defense-evasion-via-doas, Potential Defense Evasion via Doas>> | This rule detects the creation or rename of the Doas configuration file on a Linux system. Adversaries may create or modify the Doas configuration file to elevate privileges and execute commands as other users while attempting to evade detection. | update | 102 

|<<prebuilt-rule-8-17-4-dynamic-linker-creation-or-modification, Dynamic Linker Creation or Modification>> | Detects the creation or modification of files related to the dynamic linker on Linux systems. The dynamic linker is a shared library that is used by the Linux kernel to load and execute programs. Attackers may attempt to hijack the execution flow of a program by modifying the dynamic linker configuration files. | update | 3 

|<<prebuilt-rule-8-17-4-esxi-timestomping-using-touch-command, ESXI Timestomping using Touch Command>> | Identifies instances where the 'touch' command is executed on a Linux system with the "-r" flag, which is used to modify the timestamp of a file based on another file's timestamp. The rule targets specific VM-related paths, such as "/etc/vmware/", "/usr/lib/vmware/", or "/vmfs/*". These paths are associated with VMware virtualization software, and their presence in the touch command arguments may indicate that a threat actor is attempting to tamper with timestamps of VM-related files and configurations on the system. | update | 109 

|<<prebuilt-rule-8-17-4-file-deletion-via-shred, File Deletion via Shred>> | Malware or other files dropped or created on a system by an adversary may leave traces behind as to what was done within a network and how. Adversaries may remove these files over the course of an intrusion to keep their footprint low or remove them at the end as part of the post-intrusion cleanup process. | update | 210 

|<<prebuilt-rule-8-17-4-file-permission-modification-in-writable-directory, File Permission Modification in Writable Directory>> | Identifies file permission modifications in common writable directories by a non-root user. Adversaries often drop files or payloads into a writable directory and change permissions prior to execution. | update | 212 

|<<prebuilt-rule-8-17-4-potential-hex-payload-execution, Potential Hex Payload Execution>> | This rule detects potential hex payload execution on Linux systems. Adversaries may use hex encoding to obfuscate payloads and evade detection mechanisms. | update | 102 

|<<prebuilt-rule-8-17-4-hidden-directory-creation-via-unusual-parent, Hidden Directory Creation via Unusual Parent>> | This rule detects the creation of a hidden directory via an unusual parent executable. Hidden directories are directories that are not visible to the user by default. They are often used by attackers to hide malicious files or tools. | update | 102 

|<<prebuilt-rule-8-17-4-creation-of-hidden-files-and-directories-via-commandline, Creation of Hidden Files and Directories via CommandLine>> | Users can mark specific files as hidden simply by putting a "." as the first character in the file or folder name. Adversaries can use this to their advantage to hide files and folders on the system for persistence and defense evasion. This rule looks for hidden files or folders in common writable directories. | update | 112 

|<<prebuilt-rule-8-17-4-creation-of-hidden-shared-object-file, Creation of Hidden Shared Object File>> | Identifies the creation of a hidden shared object (.so) file. Users can mark specific files as hidden simply by putting a "." as the first character in the file or folder name. Adversaries can use this to their advantage to hide files and folders on the system for persistence and defense evasion. | update | 211 

|<<prebuilt-rule-8-17-4-unusual-interactive-shell-launched-from-system-user, Unusual Interactive Shell Launched from System User>> | This rule detects interactive shells launched from system users. System users typically do not require interactive shells, and their presence may indicate malicious activity. | update | 2 

|<<prebuilt-rule-8-17-4-kernel-module-removal, Kernel Module Removal>> | Kernel modules are pieces of code that can be loaded and unloaded into the kernel upon demand. They extend the functionality of the kernel without the need to reboot the system. This rule identifies attempts to remove a kernel module. | update | 211 

|<<prebuilt-rule-8-17-4-executable-masquerading-as-kernel-process, Executable Masquerading as Kernel Process>> | Monitors for kernel processes with associated process executable fields that are not empty. Unix kernel processes such as kthreadd and kworker typically do not have process.executable fields associated to them. Attackers may attempt to hide their malicious programs by masquerading as legitimate kernel processes. | update | 104 

|<<prebuilt-rule-8-17-4-dynamic-linker-ld-so-creation, Dynamic Linker (ld.so) Creation>> | This rule detects the creation of the dynamic linker (ld.so) file. The dynamic linker is used to load shared libraries needed by an executable. Attackers may attempt to replace the dynamic linker with a malicious version to execute arbitrary code. | update | 102 

|<<prebuilt-rule-8-17-4-system-log-file-deletion, System Log File Deletion>> | Identifies the deletion of sensitive Linux system logs. This may indicate an attempt to evade detection or destroy forensic evidence on a system. | update | 213 

|<<prebuilt-rule-8-17-4-potential-hidden-process-via-mount-hidepid, Potential Hidden Process via Mount Hidepid>> | Identifies the execution of mount process with hidepid parameter, which can make processes invisible to other users from the system. Adversaries using Linux kernel version 3.2+ (or RHEL/CentOS v6.5+ above) can hide the process from other users. When hidepid=2 option is executed to mount the /proc filesystem, only the root user can see all processes and the logged-in user can only see their own process. This provides a defense evasion mechanism for the adversaries to hide their process executions from all other commands such as ps, top, pgrep and more. With the Linux kernel hardening hidepid option all the user has to do is remount the /proc filesystem with the option, which can now be monitored and detected. | update | 110 

|<<prebuilt-rule-8-17-4-potential-defense-evasion-via-proot, Potential Defense Evasion via PRoot>> | Identifies the execution of the PRoot utility, an open-source tool for user-space implementation of chroot, mount --bind, and binfmt_misc. Adversaries can leverage an open-source tool PRoot to expand the scope of their operations to multiple Linux distributions and simplify their necessary efforts. In a normal threat scenario, the scope of an attack is limited by the varying configurations of each Linux distribution. With PRoot, it provides an attacker with a consistent operational environment across different Linux distributions, such as Ubuntu, Fedora, and Alpine. PRoot also provides emulation capabilities that allow for malware built on other architectures, such as ARM, to be run.The post-exploitation technique called bring your own filesystem (BYOF), can be used by the threat actors to execute malicious payload or elevate privileges or perform network scans or orchestrate another attack on the environment. Although PRoot was originally not developed with malicious intent it can be easily tuned to work for one. | update | 108 

|<<prebuilt-rule-8-17-4-potential-process-name-stomping-with-prctl, Potential Process Name Stomping with Prctl>> | This rule leverages Auditd data to detect the use of the `prctl` syscall to potentially hide a process by changing its name. The `prctl` syscall is used to control various process attributes. Attackers can use this syscall to change the name of a process to a hidden directory or file, making it harder to detect. The query looks for the `prctl` syscall with the `PR_SET_NAME` argument set to `f` (PR_SET_NAME is used to set the name of a process). | update | 2 

|<<prebuilt-rule-8-17-4-suspicious-renaming-of-esxi-files, Suspicious Renaming of ESXI Files>> | Identifies instances where VMware-related files, such as those with extensions like ".vmdk", ".vmx", ".vmxf", ".vmsd", ".vmsn", ".vswp", ".vmss", ".nvram", and ".vmem", are renamed on a Linux system. The rule monitors for the "rename" event action associated with these file types, which could indicate malicious activity. | update | 7 

|<<prebuilt-rule-8-17-4-suspicious-renaming-of-esxi-index-html-file, Suspicious Renaming of ESXI index.html File>> | Identifies instances where the "index.html" file within the "/usr/lib/vmware/*" directory is renamed on a Linux system. The rule monitors for the "rename" event action associated with this specific file and path, which could indicate malicious activity. | update | 7 

|<<prebuilt-rule-8-17-4-root-certificate-installation, Root Certificate Installation>> | This rule detects the installation of root certificates on a Linux system. Adversaries may install a root certificate on a compromised system to avoid warnings when connecting to their command and control servers. Root certificates are used in public key cryptography to identify a root certificate authority (CA). When a root certificate is installed, the system or application will trust certificates in the root's chain of trust that have been signed by the root certificate. | update | 103 

|<<prebuilt-rule-8-17-4-selinux-configuration-creation-or-renaming, SELinux Configuration Creation or Renaming>> | This rule detects the creation or renaming of the SELinux configuration file. SELinux is a security module that provides access control security policies. Modifications to the SELinux configuration file may indicate an attempt to impair defenses by disabling or modifying security tools. | update | 102 

|<<prebuilt-rule-8-17-4-ssl-certificate-deletion, SSL Certificate Deletion>> | This rule detects the deletion of SSL certificates on a Linux system. Adversaries may delete SSL certificates to subvert trust controls and negatively impact the system. | update | 102 

|<<prebuilt-rule-8-17-4-potentially-suspicious-process-started-via-tmux-or-screen, Potentially Suspicious Process Started via tmux or screen>> | This rule monitors for the execution of suspicious commands via screen and tmux. When launching a command and detaching directly, the commands will be executed in the background via its parent process. Attackers may leverage screen or tmux to execute commands while attempting to evade detection. | update | 106 

|<<prebuilt-rule-8-17-4-unusual-preload-environment-variable-process-execution, Unusual Preload Environment Variable Process Execution>> | This rule detects processes that are executed with environment variables that are not commonly used. This could indicate an attacker is attempting to hijack the execution flow of a process by loading malicious libraries or binaries into the process memory space. | update | 2 

|<<prebuilt-rule-8-17-4-suspicious-dynamic-linker-discovery-via-od, Suspicious Dynamic Linker Discovery via od>> | Monitors for dynamic linker discovery via the od utility. od (octal dump) is a command-line utility in Unix operating systems used for displaying data in various formats, including octal, hexadecimal, decimal, and ASCII, primarily used for examining and debugging binary files or data streams. Attackers can leverage od to analyze the dynamic linker by identifying injection points and craft exploits based on the observed behaviors and structures within these files. | update | 103 

|<<prebuilt-rule-8-17-4-esxi-discovery-via-find, ESXI Discovery via Find>> | Identifies instances where the 'find' command is started on a Linux system with arguments targeting specific VM-related paths, such as "/etc/vmware/", "/usr/lib/vmware/", or "/vmfs/*". These paths are associated with VMware virtualization software, and their presence in the find command arguments may indicate that a threat actor is attempting to search for, analyze, or manipulate VM-related files and configurations on the system. | update | 108 

|<<prebuilt-rule-8-17-4-esxi-discovery-via-grep, ESXI Discovery via Grep>> | Identifies instances where a process named 'grep', 'egrep', or 'pgrep' is started on a Linux system with arguments related to virtual machine (VM) files, such as "vmdk", "vmx", "vmxf", "vmsd", "vmsn", "vswp", "vmss", "nvram", or "vmem". These file extensions are associated with VM-related file formats, and their presence in grep command arguments may indicate that a threat actor is attempting to search for, analyze, or manipulate VM files on the system. | update | 108 

|<<prebuilt-rule-8-17-4-enumeration-of-kernel-modules, Enumeration of Kernel Modules>> | Loadable Kernel Modules (or LKMs) are pieces of code that can be loaded and unloaded into the kernel upon demand. They extend the functionality of the kernel without the need to reboot the system. This identifies attempts to enumerate information about a kernel module. | update | 211 

|<<prebuilt-rule-8-17-4-kernel-seeking-activity, Kernel Seeking Activity>> | This rule detects kernel seeking activity through several built-in Linux utilities. Attackers may use these utilities to search the Linux kernel for available symbols, functions, and other information that can be used to exploit the kernel. | update | 2 

|<<prebuilt-rule-8-17-4-kernel-unpacking-activity, Kernel Unpacking Activity>> | This rule detects kernel unpacking activity through several built-in Linux utilities. Attackers may use these utilities to unpack kernel images and modules to search for vulnerabilities or to modify the kernel. | update | 2 

|<<prebuilt-rule-8-17-4-hping-process-activity, Hping Process Activity>> | Hping ran on a Linux host. Hping is a FOSS command-line packet analyzer and has the ability to construct network packets for a wide variety of network security testing applications, including scanning and firewall auditing. | update | 209 

|<<prebuilt-rule-8-17-4-nping-process-activity, Nping Process Activity>> | Nping ran on a Linux host. Nping is part of the Nmap tool suite and has the ability to construct raw packets for a wide variety of security testing applications, including denial of service testing. | update | 209 

|<<prebuilt-rule-8-17-4-pluggable-authentication-module-pam-version-discovery, Pluggable Authentication Module (PAM) Version Discovery>> | This rule detects PAM version discovery activity on Linux systems. PAM version discovery can be an indication of an attacker attempting to backdoor the authentication process through malicious PAM modules. | update | 102 

|<<prebuilt-rule-8-17-4-potential-network-scan-executed-from-host, Potential Network Scan Executed From Host>> | This threshold rule monitors for the rapid execution of unix utilities that are capable of conducting network scans. Adversaries may leverage built-in tools such as ping, netcat or socat to execute ping sweeps across the network while attempting to evade detection or due to the lack of network mapping tools available on the compromised host. | update | 4 

|<<prebuilt-rule-8-17-4-polkit-version-discovery, Polkit Version Discovery>> | This rule detects Polkit version discovery activity on Linux systems. Polkit version discovery can be an indication of an attacker attempting to exploit misconfigurations or vulnerabilities in the Polkit service. | update | 2 

|<<prebuilt-rule-8-17-4-private-key-searching-activity, Private Key Searching Activity>> | This rule detects private key searching activity on Linux systems. Searching for private keys can be an indication of an attacker attempting to escalate privileges or exfiltrate sensitive information. | update | 102 

|<<prebuilt-rule-8-17-4-suspicious-proc-maps-discovery, Suspicious /proc/maps Discovery>> | Monitors for /proc/*/maps file reads. The /proc/*/maps file in Linux provides a memory map for a specific process, detailing the memory segments, permissions, and what files are mapped to these segments. Attackers may read a process's memory map to identify memory addresses for code injection or process hijacking. | update | 3 

|<<prebuilt-rule-8-17-4-process-capability-enumeration, Process Capability Enumeration>> | Identifies recursive process capability enumeration of the entire filesystem through the getcap command. Malicious users may manipulate identified capabilities to gain root privileges. | update | 4 

|<<prebuilt-rule-8-17-4-potential-pspy-process-monitoring-detected, Potential Pspy Process Monitoring Detected>> | This rule leverages auditd to monitor for processes scanning different processes within the /proc directory using the openat syscall. This is a strong indication for the usage of the pspy utility. Attackers may leverage the pspy process monitoring utility to monitor system processes without requiring root permissions, in order to find potential privilege escalation vectors. | update | 9 

|<<prebuilt-rule-8-17-4-security-file-access-via-common-utilities, Security File Access via Common Utilities>> | This rule detects sensitive security file access via common utilities on Linux systems. Adversaries may attempt to read from sensitive files using common utilities to gather information about the system and its security configuration. | update | 102 

|<<prebuilt-rule-8-17-4-sudo-command-enumeration-detected, Sudo Command Enumeration Detected>> | This rule monitors for the usage of the sudo -l command, which is used to list the allowed and forbidden commands for the invoking user. Attackers may execute this command to enumerate commands allowed to be executed with sudo permissions, potentially allowing to escalate privileges to root. | update | 107 

|<<prebuilt-rule-8-17-4-suid-sguid-enumeration-detected, SUID/SGUID Enumeration Detected>> | This rule monitors for the usage of the "find" command in conjunction with SUID and SGUID permission arguments. SUID (Set User ID) and SGID (Set Group ID) are special permissions in Linux that allow a program to execute with the privileges of the file owner or group, respectively, rather than the privileges of the user running the program. In case an attacker is able to enumerate and find a binary that is misconfigured, they might be able to leverage this misconfiguration to escalate privileges by exploiting vulnerabilities or built-in features in the privileged program. | update | 7 

|<<prebuilt-rule-8-17-4-suspicious-memory-grep-activity, Suspicious Memory grep Activity>> | Monitors for grep activity related to memory mapping. The /proc/*/maps file in Linux provides a memory map for a specific process, detailing the memory segments, permissions, and what files are mapped to these segments. Attackers may read a process's memory map to identify memory addresses for code injection or process hijacking. | update | 104 

|<<prebuilt-rule-8-17-4-suspicious-which-enumeration, Suspicious which Enumeration>> | This rule monitors for the usage of the which command with an unusual amount of process arguments. Attackers may leverage the which command to enumerate the system for useful installed utilities that may be used after compromising a system to escalate privileges or move latteraly across the network. | update | 108 

|<<prebuilt-rule-8-17-4-unusual-user-privilege-enumeration-via-id, Unusual User Privilege Enumeration via id>> | This rule monitors for a sequence of 20 "id" command executions within 1 second by the same parent process. This behavior is unusual, and may be indicative of the execution of an enumeration script such as LinPEAS or LinEnum. These scripts leverage the "id" command to enumerate the privileges of all users present on the system. | update | 5 

|<<prebuilt-rule-8-17-4-virtual-machine-fingerprinting, Virtual Machine Fingerprinting>> | An adversary may attempt to get detailed information about the operating system and hardware. This rule identifies common locations used to discover virtual machine hardware by a non-root user. This technique has been used by the Pupy RAT and other malware. | update | 109 

|<<prebuilt-rule-8-17-4-yum-dnf-plugin-status-discovery, Yum/DNF Plugin Status Discovery>> | This rule detects the execution of the `grep` command with the `plugins` argument on Linux systems. This command is used to search for YUM/DNF configurations and/or plugins with an enabled state. This behavior may indicate an attacker is attempting to establish persistence in a YUM or DNF plugin. | update | 103 

|<<prebuilt-rule-8-17-4-abnormal-process-id-or-lock-file-created, Abnormal Process ID or Lock File Created>> | Identifies the creation of a Process ID (PID), lock or reboot file created in temporary file storage paradigm (tmpfs) directory /var/run. On Linux, the PID files typically hold the process ID to track previous copies running and manage other tasks. Certain Linux malware use the /var/run directory for holding data, executables and other tasks, disguising itself or these files as legitimate PID files. | update | 215 

|<<prebuilt-rule-8-17-4-file-creation-by-cups-or-foomatic-rip-child, File Creation by Cups or Foomatic-rip Child>> | This detection rule addresses multiple vulnerabilities in the CUPS printing system, including CVE-2024-47176, CVE-2024-47076, CVE-2024-47175, and CVE-2024-47177. Specifically, this rule detects suspicious file creation events executed by child processes of foomatic-rip. These flaws impact components like cups-browsed, libcupsfilters, libppd, and foomatic-rip, allowing remote unauthenticated attackers to manipulate IPP URLs or inject malicious data through crafted UDP packets or network spoofing. This can result in arbitrary command execution when a print job is initiated. | update | 102 

|<<prebuilt-rule-8-17-4-printer-user-lp-shell-execution, Printer User (lp) Shell Execution>> | This detection rule addresses multiple vulnerabilities in the CUPS printing system, including CVE-2024-47176, CVE-2024-47076, CVE-2024-47175, and CVE-2024-47177. Specifically, this rule detects shell executions from the foomatic-rip parent process through the default printer user (lp). These flaws impact components like cups-browsed, libcupsfilters, libppd, and foomatic-rip, allowing remote unauthenticated attackers to manipulate IPP URLs or inject malicious data through crafted UDP packets or network spoofing. This can result in arbitrary command execution when a print job is initiated. | update | 4 

|<<prebuilt-rule-8-17-4-cupsd-or-foomatic-rip-shell-execution, Cupsd or Foomatic-rip Shell Execution>> | This detection rule addresses multiple vulnerabilities in the CUPS printing system, including CVE-2024-47176, CVE-2024-47076, CVE-2024-47175, and CVE-2024-47177. Specifically, this rule detects shell executions from the foomatic-rip parent process. These flaws impact components like cups-browsed, libcupsfilters, libppd, and foomatic-rip, allowing remote unauthenticated attackers to manipulate IPP URLs or inject malicious data through crafted UDP packets or network spoofing. This can result in arbitrary command execution when a print job is initiated. | update | 103 

|<<prebuilt-rule-8-17-4-suspicious-execution-from-foomatic-rip-or-cupsd-parent, Suspicious Execution from Foomatic-rip or Cupsd Parent>> | This detection rule addresses multiple vulnerabilities in the CUPS printing system, including CVE-2024-47176, CVE-2024-47076, CVE-2024-47175, and CVE-2024-47177. Specifically, this rule detects suspicious process command lines executed by child processes of foomatic-rip and cupsd. These flaws impact components like cups-browsed, libcupsfilters, libppd, and foomatic-rip, allowing remote unauthenticated attackers to manipulate IPP URLs or inject malicious data through crafted UDP packets or network spoofing. This can result in arbitrary command execution when a print job is initiated. | update | 103 

|<<prebuilt-rule-8-17-4-potential-curl-cve-2023-38545-exploitation, Potential curl CVE-2023-38545 Exploitation>> | Detects potential exploitation of curl CVE-2023-38545 by monitoring for vulnerable command line arguments in conjunction with an unusual command line length. A flaw in curl version <= 8.3 makes curl vulnerable to a heap based buffer overflow during the SOCKS5 proxy handshake. Upgrade to curl version >= 8.4 to patch this vulnerability. This exploit can be executed with and without the use of environment variables. For increased visibility, enable the collection of http_proxy, HTTPS_PROXY and ALL_PROXY environment variables based on the instructions provided in the setup guide of this rule. | update | 7 

|<<prebuilt-rule-8-17-4-egress-connection-from-entrypoint-in-container, Egress Connection from Entrypoint in Container>> | This rule identifies a sequence of events where a process named `entrypoint.sh` is started in a container, followed by a network connection attempt. This sequence indicates a potential egress connection from an entrypoint in a container. An entrypoint is a command or script specified in the Dockerfile and executed when the container starts. Attackers can use this technique to establish a foothold in the environment, escape from a container to the host, or establish persistence. | update | 2 

|<<prebuilt-rule-8-17-4-process-started-with-executable-stack, Process Started with Executable Stack>> | This rule monitors the syslog log file for messages related to instances of processes that are started with an executable stack. This can be an indicator of a process that is attempting to execute code from the stack, which can be a security risk. | update | 2 

|<<prebuilt-rule-8-17-4-file-creation-execution-and-self-deletion-in-suspicious-directory, File Creation, Execution and Self-Deletion in Suspicious Directory>> | This rule monitors for the creation of a file, followed by its execution and self-deletion in a short timespan within a directory often used for malicious purposes by threat actors. This behavior is often used by malware to execute malicious code and delete itself to hide its tracks. | update | 6 

|<<prebuilt-rule-8-17-4-file-transfer-or-listener-established-via-netcat, File Transfer or Listener Established via Netcat>> | A netcat process is engaging in network activity on a Linux host. Netcat is often used as a persistence mechanism by exporting a reverse shell or by serving a shell on a listening port. Netcat is also sometimes used for data exfiltration. | update | 211 

|<<prebuilt-rule-8-17-4-potential-upgrade-of-non-interactive-shell, Potential Upgrade of Non-interactive Shell>> | Identifies when a non-interactive terminal (tty) is being upgraded to a fully interactive shell. Attackers may upgrade a simple reverse shell to a fully interactive tty after obtaining initial access to a host, in order to obtain a more stable connection. | update | 104 

|<<prebuilt-rule-8-17-4-netcat-listener-established-via-rlwrap, Netcat Listener Established via rlwrap>> | Monitors for the execution of a netcat listener via rlwrap. rlwrap is a 'readline wrapper', a small utility that uses the GNU Readline library to allow the editing of keyboard input for any command. This utility can be used in conjunction with netcat to gain a more stable reverse shell. | update | 104 

|<<prebuilt-rule-8-17-4-network-connection-from-binary-with-rwx-memory-region, Network Connection from Binary with RWX Memory Region>> | Monitors for the execution of a unix binary with read, write and execute memory region permissions, followed by a network connection. The mprotect() system call is used to change the access protections on a region of memory that has already been allocated. This syscall allows a process to modify the permissions of pages in its virtual address space, enabling or disabling permissions such as read, write, and execute for those pages. RWX permissions on memory is in many cases overly permissive, and should (especially in conjunction with an outbound network connection) be analyzed thoroughly. | update | 4 

|<<prebuilt-rule-8-17-4-network-connection-via-recently-compiled-executable, Network Connection via Recently Compiled Executable>> | This rule monitors a sequence involving a program compilation event followed by its execution and a subsequent network connection event. This behavior can indicate the set up of a reverse tcp connection to a command-and-control server. Attackers may spawn reverse shells to establish persistence onto a target system. | update | 7 

|<<prebuilt-rule-8-17-4-interactive-terminal-spawned-via-perl, Interactive Terminal Spawned via Perl>> | Identifies when a terminal (tty) is spawned via Perl. Attackers may upgrade a simple reverse shell to a fully interactive tty after obtaining initial access to a host. | update | 109 

|<<prebuilt-rule-8-17-4-potential-linux-hack-tool-launched, Potential Linux Hack Tool Launched>> | Monitors for the execution of different processes that might be used by attackers for malicious intent. An alert from this rule should be investigated further, as hack tools are commonly used by blue teamers and system administrators as well. | update | 105 

|<<prebuilt-rule-8-17-4-privileged-docker-container-creation, Privileged Docker Container Creation>> | This rule leverages the new_terms rule type to identify the creation of a potentially unsafe docker container from an unusual parent process. Attackers can use the `--privileged` flag to create containers with escalated privileges, which can lead to trivial privilege escalation, docker escaping and persistence. access. | update | 3 

|<<prebuilt-rule-8-17-4-process-started-from-process-id-pid-file, Process Started from Process ID (PID) File>> | Identifies a new process starting from a process ID (PID), lock or reboot file within the temporary file storage paradigm (tmpfs) directory /var/run directory. On Linux, the PID files typically hold the process ID to track previous copies running and manage other tasks. Certain Linux malware use the /var/run directory for holding data, executables and other tasks, disguising itself or these files as legitimate PID files. | update | 111 

|<<prebuilt-rule-8-17-4-binary-executed-from-shared-memory-directory, Binary Executed from Shared Memory Directory>> | Identifies the execution of a binary by root in Linux shared memory directories: (/dev/shm/, /run/shm/, /var/run/, /var/lock/). This activity is to be considered highly abnormal and should be investigated. Threat actors have placed executables used for persistence on high-uptime servers in these directories as system backdoors. | update | 111 

|<<prebuilt-rule-8-17-4-interactive-terminal-spawned-via-python, Interactive Terminal Spawned via Python>> | Identifies when a terminal (tty) is spawned via Python. Attackers may upgrade a simple reverse shell to a fully interactive tty after obtaining initial access to a host. | update | 211 

|<<prebuilt-rule-8-17-4-web-server-spawned-via-python, Web Server Spawned via Python>> | This rule identifies when a web server is spawned via Python. Attackers may use Python to spawn a web server to exfiltrate/infiltrate data or to move laterally within a network. | update | 102 

|<<prebuilt-rule-8-17-4-potential-code-execution-via-postgresql, Potential Code Execution via Postgresql>> | This rule monitors for suspicious activities that may indicate an attacker attempting to execute arbitrary code within a PostgreSQL environment. Attackers can execute code via PostgreSQL as a result of gaining unauthorized access to a public facing PostgreSQL database or exploiting vulnerabilities, such as remote command execution and SQL injection attacks, which can result in unauthorized access and malicious actions, and facilitate post-exploitation activities for unauthorized access and malicious actions. | update | 8 

|<<prebuilt-rule-8-17-4-linux-restricted-shell-breakout-via-linux-binary-s, Linux Restricted Shell Breakout via Linux Binary(s)>> | Identifies the abuse of a Linux binary to break out of a restricted shell or environment by spawning an interactive system shell. The activity of spawning a shell from a binary is not common behavior for a user or system administrator, and may indicate an attempt to evade detection, increase capabilities or enhance the stability of an adversary. | update | 114 

|<<prebuilt-rule-8-17-4-openssl-client-or-server-activity, Openssl Client or Server Activity>> | This rule identifies when the openssl client or server is used to establish a connection. Attackers may use openssl to establish a secure connection to a remote server or to create a secure server to receive connections. This activity may be used to exfiltrate data or establish a command and control channel. | update | 103 

|<<prebuilt-rule-8-17-4-potential-reverse-shell-via-background-process, Potential Reverse Shell via Background Process>> | Monitors for the execution of background processes with process arguments capable of opening a socket in the /dev/tcp channel. This may indicate the creation of a backdoor reverse connection, and should be investigated further. | update | 105 

|<<prebuilt-rule-8-17-4-potential-reverse-shell-via-child, Potential Reverse Shell via Child>> | This detection rule identifies suspicious network traffic patterns associated with TCP reverse shell activity. This activity consists of a network event that is followed by the creation of a shell process with suspicious command line arguments. An attacker may establish a Linux TCP reverse shell to gain remote access to a target system. | update | 4 

|<<prebuilt-rule-8-17-4-potential-reverse-shell-via-java, Potential Reverse Shell via Java>> | This detection rule identifies the execution of a Linux shell process from a Java JAR application post an incoming network connection. This behavior may indicate reverse shell activity via a Java application. | update | 9 

|<<prebuilt-rule-8-17-4-potential-reverse-shell-via-suspicious-child-process, Potential Reverse Shell via Suspicious Child Process>> | This detection rule detects the creation of a shell through a suspicious process chain. Any reverse shells spawned by the specified utilities that are initialized from a single process followed by a network connection attempt will be captured through this rule. Attackers may spawn reverse shells to establish persistence onto a target system. | update | 10 

|<<prebuilt-rule-8-17-4-potential-meterpreter-reverse-shell, Potential Meterpreter Reverse Shell>> | This detection rule identifies a sample of suspicious Linux system file reads used for system fingerprinting, leveraged by the Metasploit Meterpreter shell to gather information about the target that it is executing its shell on. Detecting this pattern is indicative of a successful meterpreter shell connection. | update | 8 

|<<prebuilt-rule-8-17-4-potential-reverse-shell-via-suspicious-binary, Potential Reverse Shell via Suspicious Binary>> | This detection rule detects the creation of a shell through a chain consisting of the execution of a suspicious binary (located in a commonly abused location or executed manually) followed by a network event and ending with a shell being spawned. Stageless reverse tcp shells display this behaviour. Attackers may spawn reverse shells to establish persistence onto a target system. | update | 8 

|<<prebuilt-rule-8-17-4-potential-reverse-shell, Potential Reverse Shell>> | This detection rule identifies suspicious network traffic patterns associated with TCP reverse shell activity. This activity consists of a parent-child relationship where a network event is followed by the creation of a shell process. An attacker may establish a Linux TCP reverse shell to gain remote access to a target system. | update | 10 

|<<prebuilt-rule-8-17-4-potential-reverse-shell-via-udp, Potential Reverse Shell via UDP>> | This detection rule identifies suspicious network traffic patterns associated with UDP reverse shell activity. This activity consists of a sample of an execve, socket and connect syscall executed by the same process, where the auditd.data.a0-1 indicate a UDP connection, ending with an egress connection event. An attacker may establish a Linux UDP reverse shell to bypass traditional firewall restrictions and gain remote access to a target system covertly. | update | 8 

|<<prebuilt-rule-8-17-4-suspicious-content-extracted-or-decompressed-via-funzip, Suspicious Content Extracted or Decompressed via Funzip>> | Identifies when suspicious content is extracted from a file and subsequently decompressed using the funzip utility. Malware may execute the tail utility using the "-c" option to read a sequence of bytes from the end of a file. The output from tail can be piped to funzip in order to decompress malicious code before it is executed. This behavior is consistent with malware families such as Bundlore. | update | 106 

|<<prebuilt-rule-8-17-4-suspicious-system-commands-executed-by-previously-unknown-executable, Suspicious System Commands Executed by Previously Unknown Executable>> | This rule monitors for the execution of several commonly used system commands executed by a previously unknown executable located in commonly abused directories. An alert from this rule can indicate the presence of potentially malicious activity, such as the execution of unauthorized or suspicious processes attempting to run malicious code. Detecting and investigating such behavior can help identify and mitigate potential security threats, protecting the system and its data from potential compromise. | update | 108 

|<<prebuilt-rule-8-17-4-suspicious-mining-process-creation-event, Suspicious Mining Process Creation Event>> | Identifies service creation events of common mining services, possibly indicating the infection of a system with a cryptominer. | update | 107 

|<<prebuilt-rule-8-17-4-system-binary-path-file-permission-modification, System Binary Path File Permission Modification>> | This rule identifies file permission modification events on files located in common system binary paths. Adversaries may attempt to hide their payloads in the default Linux system directories, and modify the file permissions of these payloads prior to execution. | update | 2 

|<<prebuilt-rule-8-17-4-bpf-filter-applied-using-tc, BPF filter applied using TC>> | Detects when the tc (transmission control) binary is utilized to set a BPF (Berkeley Packet Filter) on a network interface. Tc is used to configure Traffic Control in the Linux kernel. It can shape, schedule, police and drop traffic. A threat actor can utilize tc to set a bpf filter on an interface for the purpose of manipulating the incoming traffic. This technique is not at all common and should indicate abnormal, suspicious or malicious activity. | update | 209 

|<<prebuilt-rule-8-17-4-unix-socket-connection, Unix Socket Connection>> | This rule monitors for inter-process communication via Unix sockets. Adversaries may attempt to communicate with local Unix sockets to enumerate application details, find vulnerabilities/configuration mistakes and potentially escalate privileges or set up malicious communication channels via Unix sockets for inter-process communication to attempt to evade detection. | update | 104 

|<<prebuilt-rule-8-17-4-unknown-execution-of-binary-with-rwx-memory-region, Unknown Execution of Binary with RWX Memory Region>> | Monitors for the execution of a previously unknown unix binary with read, write and execute memory region permissions. The mprotect() system call is used to change the access protections on a region of memory that has already been allocated. This syscall allows a process to modify the permissions of pages in its virtual address space, enabling or disabling permissions such as read, write, and execute for those pages. RWX permissions on memory is in many cases overly permissive, and should be analyzed thoroughly. | update | 4 

|<<prebuilt-rule-8-17-4-suspicious-path-invocation-from-command-line, Suspicious Path Invocation from Command Line>> | This rule detects the execution of a PATH variable in a command line invocation by a shell process. This behavior is unusual and may indicate an attempt to execute a command from a non-standard location. This technique may be used to evade detection or perform unauthorized actions on the system. | update | 2 

|<<prebuilt-rule-8-17-4-unusual-pkexec-execution, Unusual Pkexec Execution>> | This rule detects the execution of the `pkexec` command by a shell process. The `pkexec` command is used to execute programs as another user, typically as the superuser. Through the `new_terms` rule type, unusual executions of `pkexec` are identified, and may indicate an attempt to escalate privileges or perform unauthorized actions on the system. | update | 103 

|<<prebuilt-rule-8-17-4-potential-data-splitting-detected, Potential Data Splitting Detected>> | This rule looks for the usage of common data splitting utilities with specific arguments that indicate data splitting for exfiltration on Linux systems. Data splitting is a technique used by adversaries to split data into smaller parts to avoid detection and exfiltrate data. | update | 102 

|<<prebuilt-rule-8-17-4-suspicious-data-encryption-via-openssl-utility, Suspicious Data Encryption via OpenSSL Utility>> | Identifies when the openssl command-line utility is used to encrypt multiple files on a host within a short time window. Adversaries may encrypt data on a single or multiple systems in order to disrupt the availability of their target's data and may attempt to hold the organization's data to ransom for the purposes of extortion. | update | 7 

|<<prebuilt-rule-8-17-4-suspicious-termination-of-esxi-process, Suspicious Termination of ESXI Process>> | Identifies instances where VMware processes, such as "vmware-vmx" or "vmx," are terminated on a Linux system by a "kill" command. The rule monitors for the "end" event type, which signifies the termination of a process. The presence of a "kill" command as the parent process for terminating VMware processes may indicate that a threat actor is attempting to interfere with the virtualized environment on the targeted system. | update | 7 

|<<prebuilt-rule-8-17-4-memory-swap-modification, Memory Swap Modification>> | This rule detects memory swap modification events on Linux systems. Memory swap modification can be used to manipulate the system's memory and potentially impact the system's performance. This behavior is commonly observed in malware that deploys miner software such as XMRig. | update | 102 

|<<prebuilt-rule-8-17-4-potential-linux-ransomware-note-creation-detected, Potential Linux Ransomware Note Creation Detected>> | This rule identifies a sequence of a mass file encryption event in conjunction with the creation of a .txt file with a file name containing ransomware keywords executed by the same process in a 1 second timespan. Ransomware is a type of malware that encrypts a victim's files or systems and demands payment (usually in cryptocurrency) in exchange for the decryption key. One important indicator of a ransomware attack is the mass encryption of the file system, after which a new file extension is added to the file. | update | 11 

|<<prebuilt-rule-8-17-4-potential-ssh-it-ssh-worm-downloaded, Potential SSH-IT SSH Worm Downloaded>> | Identifies processes that are capable of downloading files with command line arguments containing URLs to SSH-IT's autonomous SSH worm. This worm intercepts outgoing SSH connections every time a user uses ssh. | update | 104 

|<<prebuilt-rule-8-17-4-connection-to-external-network-via-telnet, Connection to External Network via Telnet>> | Telnet provides a command line interface for communication with a remote device or server. This rule identifies Telnet network connections to publicly routable IP addresses. | update | 208 

|<<prebuilt-rule-8-17-4-connection-to-internal-network-via-telnet, Connection to Internal Network via Telnet>> | Telnet provides a command line interface for communication with a remote device or server. This rule identifies Telnet network connections to non-publicly routable IP addresses. | update | 208 

|<<prebuilt-rule-8-17-4-suspicious-apt-package-manager-execution, Suspicious APT Package Manager Execution>> | Detects suspicious process events executed by the APT package manager, potentially indicating persistence through an APT backdoor. In Linux, APT (Advanced Package Tool) is a command-line utility used for handling packages on Debian-based systems, providing functions for installing, updating, upgrading, and removing software along with managing package repositories. Attackers can backdoor APT to gain persistence by injecting malicious code into scripts that APT runs, thereby ensuring continued unauthorized access or control each time APT is used for package management. | update | 105 

|<<prebuilt-rule-8-17-4-apt-package-manager-configuration-file-creation, APT Package Manager Configuration File Creation>> | Detects file creation events in the configuration directory for the APT package manager. In Linux, APT (Advanced Package Tool) is a command-line utility used for handling packages on (by default) Debian-based systems, providing functions for installing, updating, upgrading, and removing software along with managing package repositories. Attackers can backdoor APT to gain persistence by injecting malicious code into scripts that APT runs, thereby ensuring continued unauthorized access or control each time APT is used for package management. | update | 5 

|<<prebuilt-rule-8-17-4-suspicious-apt-package-manager-network-connection, Suspicious APT Package Manager Network Connection>> | Detects suspicious network events executed by the APT package manager, potentially indicating persistence through an APT backdoor. In Linux, APT (Advanced Package Tool) is a command-line utility used for handling packages on Debian-based systems, providing functions for installing, updating, upgrading, and removing software along with managing package repositories. Attackers can backdoor APT to gain persistence by injecting malicious code into scripts that APT runs, thereby ensuring continued unauthorized access or control each time APT is used for package management. | update | 5 

|<<prebuilt-rule-8-17-4-at-job-created-or-modified, At Job Created or Modified>> | This rule monitors for at jobs being created or renamed. Linux at jobs are scheduled tasks that can be leveraged by system administrators to set up scheduled tasks, but may be abused by malicious actors for persistence, privilege escalation and command execution. By creating or modifying cron job configurations, attackers can execute malicious commands or scripts at predefined intervals, ensuring their continued presence and enabling unauthorized activities. | update | 3 

|<<prebuilt-rule-8-17-4-boot-file-copy, Boot File Copy>> | This rule detects the process of copying or moving files from or to the `/boot` directory on Linux systems. The `/boot` directory contains files that are essential for the system to boot, such as the kernel and initramfs images. Attackers may copy or move files to the `/boot` directory to modify the boot process, which can be leveraged to maintain access to the system. | update | 2 

|<<prebuilt-rule-8-17-4-chkconfig-service-add, Chkconfig Service Add>> | Detects the use of the chkconfig binary to manually add a service for management by chkconfig. Threat actors may utilize this technique to maintain persistence on a system. When a new service is added, chkconfig ensures that the service has either a start or a kill entry in every runlevel and when the system is rebooted the service file added will run providing long-term persistence. | update | 214 

|<<prebuilt-rule-8-17-4-modification-of-openssh-binaries, Modification of OpenSSH Binaries>> | Adversaries may modify SSH related binaries for persistence or credential access by patching sensitive functions to enable unauthorized access or by logging SSH credentials for exfiltration. | update | 111 

|<<prebuilt-rule-8-17-4-cron-job-created-or-modified, Cron Job Created or Modified>> | This rule monitors for (ana)cron jobs being created or renamed. Linux cron jobs are scheduled tasks that can be leveraged by system administrators to set up scheduled tasks, but may be abused by malicious actors for persistence, privilege escalation and command execution. By creating or modifying cron job configurations, attackers can execute malicious commands or scripts at predefined intervals, ensuring their continued presence and enabling unauthorized activities. | update | 15 

|<<prebuilt-rule-8-17-4-d-bus-service-created, D-Bus Service Created>> | This rule detects the creation of D-Bus service files on Linux systems. D-Bus is a message bus system that provides a way for applications to talk to one another. D-Bus services are defined in service files that are typically located in default directories. The rule looks for the creation of service files that are not associated with known package managers or system services. Attackers may create malicious D-Bus services to establish persistence or escalate privileges on a system. | update | 2 

|<<prebuilt-rule-8-17-4-unusual-d-bus-daemon-child-process, Unusual D-Bus Daemon Child Process>> | This rule detects when an unusual child process is spawned from the `dbus-daemon` parent process. The `dbus-daemon` process is a message bus system that provides a way for applications to talk to each other. Attackers may abuse this process to execute malicious code or escalate privileges. | update | 2 

|<<prebuilt-rule-8-17-4-dnf-package-manager-plugin-file-creation, DNF Package Manager Plugin File Creation>> | Detects file creation events in the plugin directories for the Yum package manager. In Linux, DNF (Dandified YUM) is a command-line utility used for handling packages on Fedora-based systems, providing functions for installing, updating, upgrading, and removing software along with managing package repositories. Attackers can backdoor DNF to gain persistence by injecting malicious code into plugins that DNF runs, thereby ensuring continued unauthorized access or control each time DNF is used for package management. | update | 104 

|<<prebuilt-rule-8-17-4-dpkg-package-installed-by-unusual-parent-process, DPKG Package Installed by Unusual Parent Process>> | This rule detects the installation of a Debian package (dpkg) by an unusual parent process. The dpkg command is used to install, remove, and manage Debian packages on a Linux system. Attackers can abuse the dpkg command to install malicious packages on a system. | update | 3 

|<<prebuilt-rule-8-17-4-unusual-dpkg-execution, Unusual DPKG Execution>> | This rule detects the execution of the DPKG command by processes not associated with the DPKG package manager. The DPKG command is used to install, remove, and manage Debian packages on a Linux system. Attackers can abuse the DPKG command to install malicious packages on a system. | update | 3 

|<<prebuilt-rule-8-17-4-dracut-module-creation, Dracut Module Creation>> | This rule detects the creation of Dracut module files on Linux systems. Dracut is a tool used to generate an initramfs image that is used to boot the system. Dracut modules are scripts that are executed during the initramfs image generation process. Attackers may create malicious Dracut modules to execute arbitrary code at boot time, which can be leveraged to maintain persistence on a Linux system. | update | 2 

|<<prebuilt-rule-8-17-4-dynamic-linker-copy, Dynamic Linker Copy>> | Detects the copying of the Linux dynamic loader binary and subsequent file creation for the purpose of creating a backup copy. This technique was seen recently being utilized by Linux malware prior to patching the dynamic loader in order to inject and preload a malicious shared object file. This activity should never occur and if it does then it should be considered highly suspicious or malicious. | update | 210 

|<<prebuilt-rule-8-17-4-deprecated-suspicious-file-creation-in-etc-for-persistence, Deprecated - Suspicious File Creation in /etc for Persistence>> | Detects the manual creation of files in specific etc directories, via user root, used by Linux malware to persist and elevate privileges on compromised systems. File creation in these directories should not be entirely common and could indicate a malicious binary or script installing persistence mechanisms for long term access. | update | 117 

|<<prebuilt-rule-8-17-4-initramfs-extraction-via-cpio, Initramfs Extraction via CPIO>> | This rule detects the extraction of an initramfs image using the `cpio` command on Linux systems. The `cpio` command is used to create or extract cpio archives. Attackers may extract the initramfs image to modify the contents or add malicious files, which can be leveraged to maintain persistence on the system. | update | 2 

|<<prebuilt-rule-8-17-4-git-hook-command-execution, Git Hook Command Execution>> | This rule detects the execution of a potentially malicious process from a Git hook. Git hooks are scripts that Git executes before or after events such as: commit, push, and receive. An attacker can abuse Git hooks to execute arbitrary commands on the system and establish persistence. | update | 103 

|<<prebuilt-rule-8-17-4-git-hook-created-or-modified, Git Hook Created or Modified>> | This rule detects the creation or modification of a Git hook file on a Linux system. Git hooks are scripts that Git executes before or after events such as commit, push, and receive. They are used to automate tasks, enforce policies, and customize Git's behavior. Attackers can abuse Git hooks to maintain persistence on a system by executing malicious code whenever a specific Git event occurs. | update | 104 

|<<prebuilt-rule-8-17-4-git-hook-egress-network-connection, Git Hook Egress Network Connection>> | This rule detects a suspicious egress network connection attempt from a Git hook script. Git hooks are scripts that Git executes before or after events such as: commit, push, and receive. An attacker can abuse these features to execute arbitrary commands on the system, establish persistence or to initialize a network connection to a remote server and exfiltrate data or download additional payloads. | update | 3 

|<<prebuilt-rule-8-17-4-git-hook-child-process, Git Hook Child Process>> | This rule detects child processes spawned by Git hooks. Git hooks are scripts that Git executes before or after events such as commit, push, and receive. The rule identifies child processes spawned by Git hooks that are not typically spawned by the Git process itself. This behavior may indicate an attacker attempting to hide malicious activity by leveraging the legitimate Git process to execute unauthorized commands. | update | 103 

|<<prebuilt-rule-8-17-4-grub-configuration-file-creation, GRUB Configuration File Creation>> | This rule detects the creation of GRUB configuration files on Linux systems. The GRUB configuration file is used to configure the boot loader, which is responsible for loading the operating system. Attackers may create malicious GRUB configuration files to execute arbitrary code or escalate privileges during the boot process, which can be leveraged to maintain persistence on the system. | update | 2 

|<<prebuilt-rule-8-17-4-grub-configuration-generation-through-built-in-utilities, GRUB Configuration Generation through Built-in Utilities>> | This rule detects the generation of a new GRUB configuration file using built-in Linux commands. The GRUB configuration file is used to configure the GRUB bootloader, which is responsible for loading the Linux kernel and initramfs image during the boot process. Attackers may use these built-in utilities to generate a new GRUB configuration file that includes malicious kernel parameters or boot options, which can be leveraged to maintain persistence on the system. | update | 2 

|<<prebuilt-rule-8-17-4-system-v-init-script-created, System V Init Script Created>> | Files that are placed in the /etc/init.d/ directory in Unix can be used to start custom applications, services, scripts or commands during start-up. Init.d has been mostly replaced in favor of Systemd. However, the "systemd-sysv-generator" can convert init.d files to service unit files that run at boot. Adversaries may add or alter files located in the /etc/init.d/ directory to execute malicious code upon boot in order to gain persistence on the system. | update | 114 

|<<prebuilt-rule-8-17-4-kernel-module-load-via-insmod, Kernel Module Load via insmod>> | Detects the use of the insmod binary to load a Linux kernel object file. Threat actors can use this binary, given they have root privileges, to load a rootkit on a system providing them with complete control and the ability to hide from security products. Manually loading a kernel module in this manner should not be at all common and can indicate suspcious or malicious behavior. | update | 211 

|<<prebuilt-rule-8-17-4-persistence-via-kde-autostart-script-or-desktop-file-modification, Persistence via KDE AutoStart Script or Desktop File Modification>> | Identifies the creation or modification of a K Desktop Environment (KDE) AutoStart script or desktop file that will execute upon each user logon. Adversaries may abuse this method for persistence. | update | 215 

|<<prebuilt-rule-8-17-4-kernel-driver-load, Kernel Driver Load>> | Detects the loading of a Linux kernel module through system calls. Threat actors may leverage Linux kernel modules to load a rootkit on a system providing them with complete control and the ability to hide from security products. As other rules monitor for the addition of Linux kernel modules through system utilities or .ko files, this rule covers the gap that evasive rootkits leverage by monitoring for kernel module additions on the lowest level through auditd_manager. | update | 5 

|<<prebuilt-rule-8-17-4-kernel-driver-load-by-non-root-user, Kernel Driver Load by non-root User>> | Detects the loading of a Linux kernel module by a non-root user through system calls. Threat actors may leverage Linux kernel modules to load a rootkit on a system providing them with complete control and the ability to hide from security products. As other rules monitor for the addition of Linux kernel modules through system utilities or .ko files, this rule covers the gap that evasive rootkits leverage by monitoring for kernel module additions on the lowest level through auditd_manager. | update | 4 

|<<prebuilt-rule-8-17-4-kernel-object-file-creation, Kernel Object File Creation>> | This rule detects the creation of a Linux kernel object file (.ko) on a system. Threat actors may leverage Linux kernel object files to load a rootkit or other type of malware on a system providing them with complete control and the ability to hide from security products. | update | 2 

|<<prebuilt-rule-8-17-4-suspicious-file-creation-via-kworker, Suspicious File Creation via Kworker>> | This rule monitors for a file creation event originating from a kworker parent process. kworker, or kernel worker, processes are part of the kernel's workqueue mechanism. They are responsible for executing work that has been scheduled to be done in kernel space, which might include tasks like handling interrupts, background activities, and other kernel-related tasks. Attackers may attempt to evade detection by masquerading as a kernel worker process. | update | 106 

|<<prebuilt-rule-8-17-4-potential-linux-backdoor-user-account-creation, Potential Linux Backdoor User Account Creation>> | Identifies the attempt to create a new backdoor user by setting the user's UID to 0. Attackers may alter a user's UID to 0 to establish persistence on a system. | update | 109 

|<<prebuilt-rule-8-17-4-linux-group-creation, Linux Group Creation>> | Identifies attempts to create a new group. Attackers may create new groups to establish persistence on a system. | update | 7 

|<<prebuilt-rule-8-17-4-potential-remote-code-execution-via-web-server, Potential Remote Code Execution via Web Server>> | Identifies suspicious commands executed via a web server, which may suggest a vulnerability and remote shell access. Attackers may exploit a vulnerability in a web application to execute commands via a web server, or place a backdoor file that can be abused to gain code execution as a mechanism for persistence. | update | 108 

|<<prebuilt-rule-8-17-4-linux-user-account-creation, Linux User Account Creation>> | Identifies attempts to create new users. Attackers may add new users to establish persistence on a system. | update | 7 

|<<prebuilt-rule-8-17-4-linux-user-added-to-privileged-group, Linux User Added to Privileged Group>> | Identifies attempts to add a user to a privileged group. Attackers may add users to a privileged group in order to establish persistence on a system. | update | 109 

|<<prebuilt-rule-8-17-4-loadable-kernel-module-configuration-file-creation, Loadable Kernel Module Configuration File Creation>> | This rule detects the creation of Loadable Kernel Module (LKM) configuration files. Attackers may create or modify these files to allow their LKMs to be loaded upon reboot, ensuring persistence on a compromised system. | update | 2 

|<<prebuilt-rule-8-17-4-manual-dracut-execution, Manual Dracut Execution>> | This rule detects manual execution of the `dracut` command on Linux systems. Dracut is a tool used to generate an initramfs image that is used to boot the system. Attackers may use `dracut` to create a custom initramfs image that includes malicious code or backdoors, allowing them to maintain persistence on the system. | update | 2 

|<<prebuilt-rule-8-17-4-message-of-the-day-motd-file-creation, Message-of-the-Day (MOTD) File Creation>> | This rule detects the creation of potentially malicious files within the default MOTD file directories. Message of the day (MOTD) is the message that is presented to the user when a user connects to a Linux server via SSH or a serial connection. Linux systems contain several default MOTD files located in the "/etc/update-motd.d/" directory. These scripts run as the root user every time a user connects over SSH or a serial connection. Adversaries may create malicious MOTD files that grant them persistence onto the target every time a user connects to the system by executing a backdoor script or command. | update | 13 

|<<prebuilt-rule-8-17-4-process-spawned-from-message-of-the-day-motd, Process Spawned from Message-of-the-Day (MOTD)>> | Message of the day (MOTD) is the message that is presented to the user when a user connects to a Linux server via SSH or a serial connection. Linux systems contain several default MOTD files located in the "/etc/update-motd.d/" directory. These scripts run as the root user every time a user connects over SSH or a serial connection. Adversaries may create malicious MOTD files that grant them persistence onto the target every time a user connects to the system by executing a backdoor script or command. This rule detects the execution of potentially malicious processes through the MOTD utility. | update | 111 

|<<prebuilt-rule-8-17-4-networkmanager-dispatcher-script-creation, NetworkManager Dispatcher Script Creation>> | This rule detects the creation of a NetworkManager dispatcher script on a Linux system. NetworkManager dispatcher scripts are shell scripts that NetworkManager executes when network interfaces change state. Attackers can abuse NetworkManager dispatcher scripts to maintain persistence on a system by executing malicious code whenever a network event occurs. | update | 2 

|<<prebuilt-rule-8-17-4-openssl-password-hash-generation, OpenSSL Password Hash Generation>> | This rule detects the usage of the `openssl` binary to generate password hashes on Linux systems. The `openssl` command is a cryptographic utility that can be used to generate password hashes. Attackers may use `openssl` to generate password hashes for new user accounts or to change the password of existing accounts, which can be leveraged to maintain persistence on a Linux system. | update | 2 

|<<prebuilt-rule-8-17-4-creation-or-modification-of-pluggable-authentication-module-or-configuration, Creation or Modification of Pluggable Authentication Module or Configuration>> | This rule monitors for the creation or modification of Pluggable Authentication Module (PAM) shared object files or configuration files. Attackers may create or modify these files to maintain persistence on a compromised system, or harvest account credentials. | update | 4 

|<<prebuilt-rule-8-17-4-pluggable-authentication-module-pam-creation-in-unusual-directory, Pluggable Authentication Module (PAM) Creation in Unusual Directory>> | This rule detects the creation of Pluggable Authentication Module (PAM) shared object files in unusual directories. Attackers may compile PAM shared object files in temporary directories, to move them to system directories later, potentially allowing them to maintain persistence on a compromised system, or harvest account credentials. | update | 102 

|<<prebuilt-rule-8-17-4-pluggable-authentication-module-pam-source-download, Pluggable Authentication Module (PAM) Source Download>> | This rule detects the usage of `curl` or `wget` to download the source code of a Pluggable Authentication Module (PAM) shared object file. Attackers may download the source code of a PAM shared object file to create a backdoor in the authentication process. | update | 2 

|<<prebuilt-rule-8-17-4-polkit-policy-creation, Polkit Policy Creation>> | This rule monitors for the creation of Polkit policy files on Linux systems. Polkit policy files are used to define the permissions for system-wide services and applications. The creation of new Polkit policy files may indicate an attempt to modify the authentication process, which could be used for persistence by an adversary. | update | 103 

|<<prebuilt-rule-8-17-4-executable-bit-set-for-potential-persistence-script, Executable Bit Set for Potential Persistence Script>> | This rule monitors for the addition of an executable bit for scripts that are located in directories which are commonly abused for persistence. An alert of this rule is an indicator that a persistence mechanism is being set up within your environment. Adversaries may create these scripts to execute malicious code at start-up, or at a set interval to gain persistence onto the system. | update | 105 

|<<prebuilt-rule-8-17-4-process-capability-set-via-setcap-utility, Process Capability Set via setcap Utility>> | This rule detects the use of the setcap utility to set capabilities on a process. The setcap utility is used to set the capabilities of a binary to allow it to perform privileged operations without needing to run as root. This can be used by attackers to establish persistence by creating a backdoor, or escalate privileges by abusing a misconfiguration on a system. | update | 102 

|<<prebuilt-rule-8-17-4-suspicious-rc-local-error-message, Suspicious rc.local Error Message>> | This rule monitors the syslog log file for error messages related to the rc.local process. The rc.local file is a script that is executed during the boot process on Linux systems. Attackers may attempt to modify the rc.local file to execute malicious commands or scripts during system startup. This rule detects error messages such as "Connection refused," "No such file or directory," or "command not found" in the syslog log file, which may indicate that the rc.local file has been tampered with. | update | 3 

|<<prebuilt-rule-8-17-4-potential-execution-of-rc-local-script, Potential Execution of rc.local Script>> | This rule detects the potential execution of the `/etc/rc.local` script through the `already_running` event action created by the `rc-local.service` systemd service. The `/etc/rc.local` script is a legacy initialization script that is executed at the end of the boot process. The `/etc/rc.local` script is not enabled by default on most Linux distributions. The `/etc/rc.local` script can be used by attackers to persistently execute malicious commands or scripts on a compromised system at reboot. As the rc.local file is executed prior to the initialization of Elastic Defend, the execution event is not ingested, and therefore the `already_running` event is leveraged to provide insight into the potential execution of `rc.local`. | update | 3 

|<<prebuilt-rule-8-17-4-rc-local-rc-common-file-creation, rc.local/rc.common File Creation>> | This rule monitors the creation/alteration of the rc.local/rc.common file. The /etc/rc.local file is used to start custom applications, services, scripts or commands during start-up. The rc.local file has mostly been replaced by Systemd. However, through the "systemd-rc-local-generator", rc.local files can be converted to services that run at boot. Adversaries may alter rc.local/rc.common to execute malicious code at start-up, and gain persistence onto the system. | update | 115 

|<<prebuilt-rule-8-17-4-rpm-package-installed-by-unusual-parent-process, RPM Package Installed by Unusual Parent Process>> | This rule leverages the new_terms rule type to identify the installation of RPM packages by an unusual parent process. RPM is a package management system used in Linux systems such as Red Hat, CentOS and Fedora. Attacks may backdoor RPM packages to gain initial access or install malicious RPM packages to maintain persistence. | update | 3 

|<<prebuilt-rule-8-17-4-setcap-setuid-setgid-capability-set, Setcap setuid/setgid Capability Set>> | This rule monitors for the addition of the cap_setuid+ep or cap_setgid+ep capabilities via setcap. Setuid (Set User ID) and setgid (Set Group ID) are Unix-like OS features that enable processes to run with elevated privileges, based on the file owner or group. Threat actors can exploit these attributes to achieve persistence by creating malicious binaries, allowing them to maintain control over a compromised system with elevated permissions. | update | 107 

|<<prebuilt-rule-8-17-4-shadow-file-modification-by-unusual-process, Shadow File Modification by Unusual Process>> | This rule monitors for Linux Shadow file modifications. These modifications are indicative of a potential password change or user addition event. Threat actors may attempt to create new users or change the password of a user account to maintain access to a system. | update | 3 

|<<prebuilt-rule-8-17-4-shared-object-created-or-changed-by-previously-unknown-process, Shared Object Created or Changed by Previously Unknown Process>> | This rule monitors the creation of shared object files by previously unknown processes. The creation of a shared object file involves compiling code into a dynamically linked library that can be loaded by other programs at runtime. While this process is typically used for legitimate purposes, malicious actors can leverage shared object files to execute unauthorized code, inject malicious functionality into legitimate processes, or bypass security controls. This allows malware to persist on the system, evade detection, and potentially compromise the integrity and confidentiality of the affected system and its data. | update | 10 

|<<prebuilt-rule-8-17-4-shell-configuration-creation-or-modification, Shell Configuration Creation or Modification>> | This rule monitors the creation/alteration of a shell configuration file. Unix systems use shell configuration files to set environment variables, create aliases, and customize the user's environment. Adversaries may modify or add a shell configuration file to execute malicious code and gain persistence in the system. This behavior is consistent with the Kaiji malware family. | update | 6 

|<<prebuilt-rule-8-17-4-simple-http-web-server-connection, Simple HTTP Web Server Connection>> | This rule detects connections accepted by a simple HTTP web server in Python and PHP built-in modules. Adversaries may create simple HTTP web servers to establish persistence on a compromised system by uploading a reverse or command shell payload to the server web root, allowing them to regain remote access to the system if lost. This event may occur when an attacker requests the server to execute a command or script via a potential backdoor. | update | 2 

|<<prebuilt-rule-8-17-4-simple-http-web-server-creation, Simple HTTP Web Server Creation>> | This rule detects the creation of a simple HTTP web server using PHP or Python built-in modules. Adversaries may create simple HTTP web servers to establish persistence on a compromised system by uploading a reverse or command shell payload to the server web root, allowing them to regain remote access to the system if lost. | update | 102 

|<<prebuilt-rule-8-17-4-ssh-key-generated-via-ssh-keygen, SSH Key Generated via ssh-keygen>> | This rule identifies the creation of SSH keys using the ssh-keygen tool, which is the standard utility for generating SSH keys. Users often create SSH keys for authentication with remote services. However, threat actors can exploit this tool to move laterally across a network or maintain persistence by generating unauthorized SSH keys, granting them SSH access to systems. | update | 104 

|<<prebuilt-rule-8-17-4-network-connection-initiated-by-sshd-child-process, Network Connection Initiated by SSHD Child Process>> | This rule identifies an egress internet connection initiated by an SSH Daemon child process. This behavior is indicative of the alteration of a shell configuration file or other mechanism that launches a process when a new SSH login occurs. Attackers can also backdoor the SSH daemon to allow for persistence, call out to a C2 or to steal credentials. | update | 4 

|<<prebuilt-rule-8-17-4-login-via-unusual-system-user, Login via Unusual System User>> | This rule identifies successful logins by system users that are uncommon to authenticate. These users have `nologin` set by default, and must be modified to allow SSH access. Adversaries may backdoor these users to gain unauthorized access to the system. | update | 2 

|<<prebuilt-rule-8-17-4-potential-suspicious-file-edit, Potential Suspicious File Edit>> | This rule monitors for the potential edit of a suspicious file. In Linux, when editing a file through an editor, a temporary .swp file is created. By monitoring for the creation of this .swp file, we can detect potential file edits of suspicious files. The execution of this rule is not a clear sign of the file being edited, as just opening the file through an editor will trigger this event. Attackers may alter any of the files added in this rule to establish persistence, escalate privileges or perform reconnaisance on the system. | update | 106 

|<<prebuilt-rule-8-17-4-potential-execution-via-xzbackdoor, Potential Execution via XZBackdoor>> | It identifies potential malicious shell executions through remote SSH and detects cases where the sshd service suddenly terminates soon after successful execution, suggesting suspicious behavior similar to the XZ backdoor. | update | 5 

|<<prebuilt-rule-8-17-4-systemd-generator-created, Systemd Generator Created>> | This rule detects the creation of a systemd generator file. Generators are small executables executed by systemd at bootup and during configuration reloads. Their main role is to convert non-native configuration and execution parameters into dynamically generated unit files, symlinks, or drop-ins, extending the unit file hierarchy for the service manager. Systemd generators can be used to execute arbitrary code at boot time, which can be leveraged by attackers to maintain persistence on a Linux system. | update | 4 

|<<prebuilt-rule-8-17-4-suspicious-network-connection-via-systemd, Suspicious Network Connection via systemd>> | Detects suspicious network events executed by systemd, potentially indicating persistence through a systemd backdoor. Systemd is a system and service manager for Linux operating systems, used to initialize and manage system processes. Attackers can backdoor systemd for persistence by creating or modifying systemd unit files to execute malicious scripts or commands, or by replacing legitimate systemd binaries with compromised ones, ensuring that their malicious code is automatically executed at system startup or during certain system events. | update | 4 

|<<prebuilt-rule-8-17-4-systemd-timer-created, Systemd Timer Created>> | Detects the creation of a systemd timer within any of the default systemd timer directories. Systemd timers can be used by an attacker to gain persistence, by scheduling the execution of a command or script. Similarly to cron/at, systemd timers can be set up to execute on boot time, or on a specific point in time, which allows attackers to regain access in case the connection to the infected asset was lost. | update | 16 

|<<prebuilt-rule-8-17-4-systemd-service-created, Systemd Service Created>> | This rule detects the creation or renaming of a new Systemd file in all of the common Systemd service locations for both root and regular users. Systemd service files are configuration files in Linux systems used to define and manage system services. Malicious actors can leverage systemd service files to achieve persistence by creating or modifying services to execute malicious commands or payloads during system startup or at a predefined interval by adding a systemd timer. This allows them to maintain unauthorized access, execute additional malicious activities, or evade detection. | update | 16 

|<<prebuilt-rule-8-17-4-systemd-service-started-by-unusual-parent-process, Systemd Service Started by Unusual Parent Process>> | Systemctl is a process used in Linux systems to manage systemd processes through service configuration files. Malicious actors can leverage systemd services to achieve persistence by creating or modifying service files to execute malicious commands or payloads during system startup. This allows them to maintain unauthorized access, execute additional malicious activities, or evade detection. | update | 4 

|<<prebuilt-rule-8-17-4-systemd-shell-execution-during-boot, Systemd Shell Execution During Boot>> | This rule detects the execution of shell commands by systemd during the boot process on Linux systems. Systemd is a system and service manager for Linux operating systems. Attackers may execute shell commands during the boot process to maintain persistence on the system. This may be a sign of malicious systemd services, initramfs or GRUB bootloader manipulation, or other persistence mechanisms. | update | 2 

|<<prebuilt-rule-8-17-4-tainted-kernel-module-load, Tainted Kernel Module Load>> | This rule monitors the syslog log file for messages related to instances of a tainted kernel module load. Rootkits often leverage kernel modules as their main defense evasion technique. Detecting tainted kernel module loads is crucial for ensuring system security and integrity, as malicious or unauthorized modules can compromise the kernel and lead to system vulnerabilities or unauthorized access. | update | 5 

|<<prebuilt-rule-8-17-4-tainted-out-of-tree-kernel-module-load, Tainted Out-Of-Tree Kernel Module Load>> | This rule monitors the syslog log file for messages related to instances of a out-of-tree kernel module load, indicating the taining of the kernel. Rootkits often leverage kernel modules as their main defense evasion technique. Detecting tainted kernel module loads is crucial for ensuring system security and integrity, as malicious or unauthorized modules can compromise the kernel and lead to system vulnerabilities or unauthorized access. | update | 3 

|<<prebuilt-rule-8-17-4-systemd-udevd-rule-file-creation, Systemd-udevd Rule File Creation>> | Monitors for the creation of rule files that are used by systemd-udevd to manage device nodes and handle kernel device events in the Linux operating system. Systemd-udevd can be exploited for persistence by adversaries by creating malicious udev rules that trigger on specific events, executing arbitrary commands or payloads whenever a certain device is plugged in or recognized by the system. | update | 8 

|<<prebuilt-rule-8-17-4-initramfs-unpacking-via-unmkinitramfs, Initramfs Unpacking via unmkinitramfs>> | This rule detects the unpacking of an initramfs image using the `unmkinitramfs` command on Linux systems. The `unmkinitramfs` command is used to extract the contents of an initramfs image, which is used to boot the system. Attackers may use `unmkinitramfs` to unpack an initramfs image and modify its contents to include malicious code or backdoors, allowing them to maintain persistence on the system. | update | 2 

|<<prebuilt-rule-8-17-4-authentication-via-unusual-pam-grantor, Authentication via Unusual PAM Grantor>> | This rule detects successful authentications via PAM grantors that are not commonly used. This could indicate an attacker is attempting to escalate privileges or maintain persistence on the system by modifying the default PAM configuration. | update | 2 

|<<prebuilt-rule-8-17-4-unusual-sshd-child-process, Unusual SSHD Child Process>> | This rule detects the creation of an unusual SSHD child process through the usage of the `new_terms` rule type. Attackers may abuse SSH to maintain persistence on a compromised system, or to establish a backdoor for remote access, potentially resulting in an unusual SSHD child process being created. | update | 2 

|<<prebuilt-rule-8-17-4-user-or-group-creation-modification, User or Group Creation/Modification>> | This rule leverages the `auditd_manager` integration to detect user or group creation or modification events on Linux systems. Threat actors may attempt to create or modify users or groups to establish persistence on the system. | update | 4 

|<<prebuilt-rule-8-17-4-network-connections-initiated-through-xdg-autostart-entry, Network Connections Initiated Through XDG Autostart Entry>> | Detects network connections initiated through Cross-Desktop Group (XDG) autostart entries for GNOME and XFCE-based Linux distributions. XDG Autostart entries can be used to execute arbitrary commands or scripts when a user logs in. This rule helps to identify potential malicious activity where an attacker may have modified XDG autostart scripts to establish persistence on the system. | update | 4 

|<<prebuilt-rule-8-17-4-yum-package-manager-plugin-file-creation, Yum Package Manager Plugin File Creation>> | Detects file creation events in the plugin directories for the Yum package manager. In Linux, Yum (Yellowdog Updater, Modified) is a command-line utility used for handling packages on (by default) Fedora-based systems, providing functions for installing, updating, upgrading, and removing software along with managing package repositories. Attackers can backdoor Yum to gain persistence by injecting malicious code into plugins that Yum runs, thereby ensuring continued unauthorized access or control each time Yum is used for package management. | update | 5 

|<<prebuilt-rule-8-17-4-potential-unauthorized-access-via-wildcard-injection-detected, Potential Unauthorized Access via Wildcard Injection Detected>> | This rule monitors for the execution of the "chown" and "chmod" commands with command line flags that could indicate a wildcard injection attack. Linux wildcard injection is a type of security vulnerability where attackers manipulate commands or input containing wildcards (e.g., *, ?, []) to execute unintended operations or access sensitive data by tricking the system into interpreting the wildcard characters in unexpected ways. | update | 106 

|<<prebuilt-rule-8-17-4-potential-privilege-escalation-via-container-misconfiguration, Potential Privilege Escalation via Container Misconfiguration>> | This rule monitors for the execution of processes that interact with Linux containers through an interactive shell without root permissions. Utilities such as runc and ctr are universal command-line utilities leveraged to interact with containers via root permissions. On systems where the access to these utilities are misconfigured, attackers might be able to create and run a container that mounts the root folder or spawn a privileged container vulnerable to a container escape attack, which might allow them to escalate privileges and gain further access onto the host file system. | update | 6 

|<<prebuilt-rule-8-17-4-potential-privilege-escalation-via-linux-dac-permissions, Potential Privilege Escalation via Linux DAC permissions>> | Identifies potential privilege escalation exploitation of DAC (Discretionary access control) file permissions. The rule identifies exploitation of DAC checks on sensitive file paths via suspicious processes whose capabilities include CAP_DAC_OVERRIDE (where a process can bypass all read write and execution checks) or CAP_DAC_READ_SEARCH (where a process can read any file or perform any executable permission on the directories). | update | 4 

|<<prebuilt-rule-8-17-4-docker-escape-via-nsenter, Docker Escape via Nsenter>> | This rule identifies a UID change event via `nsenter`. The `nsenter` command is used to enter a namespace, which is a way to isolate processes and resources. Attackers can use `nsenter` to escape from a container to the host, which can lead to privilege escalation and lateral movement. | update | 2 

|<<prebuilt-rule-8-17-4-potential-chroot-container-escape-via-mount, Potential Chroot Container Escape via Mount>> | Monitors for the execution of a file system mount followed by a chroot execution. Given enough permissions, a user within a container is capable of mounting the root file system of the host, and leveraging chroot to escape its containarized environment. This behavior pattern is very uncommon and should be investigated. | update | 103 

|<<prebuilt-rule-8-17-4-potential-privilege-escalation-via-enlightenment, Potential Privilege Escalation via Enlightenment>> | Identifies an attempt to exploit a local privilege escalation CVE-2022-37706 via a flaw in Linux window manager package Enlightenment. enlightenment_sys in Enlightenment before 0.25.4 allows local users to gain privileges because it is setuid root, and the system library function mishandles pathnames that begin with a /dev/.. substring. | update | 3 

|<<prebuilt-rule-8-17-4-privilege-escalation-via-gdb-cap-sys-ptrace, Privilege Escalation via GDB CAP_SYS_PTRACE>> | Identifies instances where GDB (granted the CAP_SYS_PTRACE capability) is executed, after which the user's access is elevated to UID/GID 0 (root). In Linux, the CAP_SYS_PTRACE capability grants a process the ability to use the ptrace system call, which is typically used for debugging and allows the process to trace and control other processes. Attackers may leverage this capability to hook and inject into a process that is running with root permissions in order to escalate their privileges to root. | update | 3 

|<<prebuilt-rule-8-17-4-root-network-connection-via-gdb-cap-sys-ptrace, Root Network Connection via GDB CAP_SYS_PTRACE>> | Identifies instances where GDB (granted the CAP_SYS_PTRACE capability) is executed, after which an outbound network connection is initiated by UID/GID 0 (root). In Linux, the CAP_SYS_PTRACE capability grants a process the ability to use the ptrace system call, which is typically used for debugging and allows the process to trace and control other processes. Attackers may leverage this capability to hook and inject into a process that is running with root permissions in order to execute shell code and gain a reverse shell with root privileges. | update | 3 

|<<prebuilt-rule-8-17-4-suspicious-kworker-uid-elevation, Suspicious Kworker UID Elevation>> | Monitors for the elevation of regular user permissions to root permissions through the kworker process. kworker, or kernel worker, processes are part of the kernel's workqueue mechanism. They are responsible for executing work that has been scheduled to be done in kernel space, which might include tasks like handling interrupts, background activities, and other kernel-related tasks. Attackers may attempt to evade detection by masquerading as a kernel worker process, and hijack the execution flow by hooking certain functions/syscalls through a rootkit in order to provide easy access to root via a special modified command. | update | 3 

|<<prebuilt-rule-8-17-4-modification-of-dynamic-linker-preload-shared-object, Modification of Dynamic Linker Preload Shared Object>> | Identifies modification of the dynamic linker preload shared object (ld.so.preload). Adversaries may execute malicious payloads by hijacking the dynamic linker used to load libraries. | update | 210 

|<<prebuilt-rule-8-17-4-suspicious-symbolic-link-created, Suspicious Symbolic Link Created>> | Identifies the creation of a symbolic link to a suspicious file or location. A symbolic link is a reference to a file or directory that acts as a pointer or shortcut, allowing users to access the target file or directory from a different location in the file system. An attacker can potentially leverage symbolic links for privilege escalation by tricking a privileged process into following the symbolic link to a sensitive file, giving the attacker access to data or capabilities they would not normally have. | update | 7 

|<<prebuilt-rule-8-17-4-potential-privilege-escalation-via-uid-int-max-bug-detected, Potential Privilege Escalation via UID INT_MAX Bug Detected>> | This rule monitors for the execution of the systemd-run command by a user with a UID that is larger than the maximum allowed UID size (INT_MAX). Some older Linux versions were affected by a bug which allows user accounts with a UID greater than INT_MAX to escalate privileges by spawning a shell through systemd-run. | update | 7 

|<<prebuilt-rule-8-17-4-kernel-load-or-unload-via-kexec-detected, Kernel Load or Unload via Kexec Detected>> | This detection rule identifies the usage of kexec, helping to uncover unauthorized kernel replacements and potential compromise of the system's integrity. Kexec is a Linux feature that enables the loading and execution of a different kernel without going through the typical boot process. Malicious actors can abuse kexec to bypass security measures, escalate privileges, establish persistence or hide their activities by loading a malicious kernel, enabling them to tamper with the system's trusted state, allowing e.g. a VM Escape. | update | 108 

|<<prebuilt-rule-8-17-4-potential-privilege-escalation-via-cve-2023-4911, Potential Privilege Escalation via CVE-2023-4911>> | This rule detects potential privilege escalation attempts through Looney Tunables (CVE-2023-4911). Looney Tunables is a buffer overflow vulnerability in GNU C Library's dynamic loader's processing of the GLIBC_TUNABLES environment variable. | update | 5 

|<<prebuilt-rule-8-17-4-network-connection-via-sudo-binary, Network Connection via Sudo Binary>> | Detects network connections initiated by the "sudo" binary. This behavior is uncommon and may occur in instances where reverse shell shellcode is injected into a process run with elevated permissions via "sudo". Attackers may attempt to inject shellcode into processes running as root, to escalate privileges. | update | 4 

|<<prebuilt-rule-8-17-4-potential-privilege-escalation-via-overlayfs, Potential Privilege Escalation via OverlayFS>> | Identifies an attempt to exploit a local privilege escalation (CVE-2023-2640 and CVE-2023-32629) via a flaw in Ubuntu's modifications to OverlayFS. These flaws allow the creation of specialized executables, which, upon execution, grant the ability to escalate privileges to root on the affected machine. | update | 6 

|<<prebuilt-rule-8-17-4-potential-privilege-escalation-via-pkexec, Potential Privilege Escalation via PKEXEC>> | Identifies an attempt to exploit a local privilege escalation in polkit pkexec (CVE-2021-4034) via unsecure environment variable injection. Successful exploitation allows an unprivileged user to escalate to the root user. | update | 209 

|<<prebuilt-rule-8-17-4-potential-buffer-overflow-attack-detected, Potential Buffer Overflow Attack Detected>> | Detects potential buffer overflow attacks by querying the "Segfault Detected" pre-built rule signal index, through a threshold rule, with a minimum number of 100 segfault alerts in a short timespan. A large amount of segfaults in a short time interval could indicate application exploitation attempts. | update | 4 

|<<prebuilt-rule-8-17-4-privilege-escalation-via-suid-sgid, Privilege Escalation via SUID/SGID>> | Identifies instances where a process is executed with user/group ID 0 (root), and a real user/group ID that is not 0. This is indicative of a process that has been granted SUID/SGID permissions, allowing it to run with elevated privileges. Attackers may leverage a misconfiguration for exploitation in order to escalate their privileges to root, or establish a backdoor for persistence. | update | 106 

|<<prebuilt-rule-8-17-4-potential-shell-via-wildcard-injection-detected, Potential Shell via Wildcard Injection Detected>> | This rule monitors for the execution of a set of linux binaries, that are potentially vulnerable to wildcard injection, with suspicious command line flags followed by a shell spawn event. Linux wildcard injection is a type of security vulnerability where attackers manipulate commands or input containing wildcards (e.g., *, ?, []) to execute unintended operations or access sensitive data by tricking the system into interpreting the wildcard characters in unexpected ways. | update | 107 

|<<prebuilt-rule-8-17-4-potential-suspicious-debugfs-root-device-access, Potential Suspicious DebugFS Root Device Access>> | This rule monitors for the usage of the built-in Linux DebugFS utility to access a disk device without root permissions. Linux users that are part of the "disk" group have sufficient privileges to access all data inside of the machine through DebugFS. Attackers may leverage DebugFS in conjunction with "disk" permissions to read sensitive files owned by root, such as the shadow file, root ssh private keys or other sensitive files that may allow them to further escalate privileges. | update | 7 

|<<prebuilt-rule-8-17-4-potential-shadow-file-read-via-command-line-utilities, Potential Shadow File Read via Command Line Utilities>> | Identifies access to the /etc/shadow file via the commandline using standard system utilities. After elevating privileges to root, threat actors may attempt to read or dump this file in order to gain valid credentials. They may utilize these to move laterally undetected and access additional resources. | update | 210 

|<<prebuilt-rule-8-17-4-potential-sudo-privilege-escalation-via-cve-2019-14287, Potential Sudo Privilege Escalation via CVE-2019-14287>> | This rule monitors for the execution of a suspicious sudo command that is leveraged in CVE-2019-14287 to escalate privileges to root. Sudo does not verify the presence of the designated user ID and proceeds to execute using a user ID that can be chosen arbitrarily. By using the sudo privileges, the command "sudo -u#-1" translates to an ID of 0, representing the root user. This exploit may work for sudo versions prior to v1.28. | update | 105 

|<<prebuilt-rule-8-17-4-potential-sudo-hijacking, Potential Sudo Hijacking>> | Identifies the creation of a sudo binary located at /usr/bin/sudo. Attackers may hijack the default sudo binary and replace it with a custom binary or script that can read the user's password in clear text to escalate privileges or enable persistence onto the system every time the sudo binary is executed. | update | 108 

|<<prebuilt-rule-8-17-4-potential-sudo-token-manipulation-via-process-injection, Potential Sudo Token Manipulation via Process Injection>> | This rule detects potential sudo token manipulation attacks through process injection by monitoring the use of a debugger (gdb) process followed by a successful uid change event during the execution of the sudo process. A sudo token manipulation attack is performed by injecting into a process that has a valid sudo token, which can then be used by attackers to activate their own sudo token. This attack requires ptrace to be enabled in conjunction with the existence of a living process that has a valid sudo token with the same uid as the current user. | update | 108 

|<<prebuilt-rule-8-17-4-potential-privilege-escalation-via-python-cap-setuid, Potential Privilege Escalation via Python cap_setuid>> | This detection rule monitors for the execution of a system command with setuid or setgid capabilities via Python, followed by a uid or gid change to the root user. This sequence of events may indicate successful privilege escalation. Setuid (Set User ID) and setgid (Set Group ID) are Unix-like OS features that enable processes to run with elevated privileges, based on the file owner or group. Threat actors can exploit these attributes to escalate privileges to the privileges that are set on the binary that is being executed. | update | 4 

|<<prebuilt-rule-8-17-4-privilege-escalation-via-cap-chown-cap-fowner-capabilities, Privilege Escalation via CAP_CHOWN/CAP_FOWNER Capabilities>> | Identifies instances where a processes (granted CAP_CHOWN and/or CAP_FOWNER capabilities) is executed, after which the ownership of a suspicious file or binary is changed. In Linux, the CAP_CHOWN capability allows a process to change the owner of a file, while CAP_FOWNER permits it to bypass permission checks on operations that require file ownership (like reading, writing, and executing). Attackers may abuse these capabilities to obtain unauthorized access to files. | update | 4 

|<<prebuilt-rule-8-17-4-suspicious-passwd-file-event-action, Suspicious Passwd File Event Action>> | Monitors for the generation of a passwd password entry via openssl, followed by a file write activity on the "/etc/passwd" file. The "/etc/passwd" file in Linux stores user account information, including usernames, user IDs, group IDs, home directories, and default shell paths. Attackers may exploit a misconfiguration in the "/etc/passwd" file permissions or other privileges to add a new entry to the "/etc/passwd" file with root permissions, and leverage this new user account to login as root. | update | 4 

|<<prebuilt-rule-8-17-4-privilege-escalation-via-cap-setuid-setgid-capabilities, Privilege Escalation via CAP_SETUID/SETGID Capabilities>> | Identifies instances where a process (granted CAP_SETUID and/or CAP_SETGID capabilities) is executed, after which the user's access is elevated to UID/GID 0 (root). In Linux, the CAP_SETUID and CAP_SETGID capabilities allow a process to change its UID and GID, respectively, providing control over user and group identity management. Attackers may leverage a misconfiguration for exploitation in order to escalate their privileges to root. | update | 5 

|<<prebuilt-rule-8-17-4-potential-privilege-escalation-via-recently-compiled-executable, Potential Privilege Escalation via Recently Compiled Executable>> | This rule monitors a sequence involving a program compilation event followed by its execution and a subsequent alteration of UID permissions to root privileges. This behavior can potentially indicate the execution of a kernel or software privilege escalation exploit. | update | 5 

|<<prebuilt-rule-8-17-4-uid-elevation-from-previously-unknown-executable, UID Elevation from Previously Unknown Executable>> | Monitors for the elevation of regular user permissions to root permissions through a previously unknown executable. Attackers may attempt to evade detection by hijacking the execution flow and hooking certain functions/syscalls through a rootkit in order to provide easy access to root via a special modified command. | update | 5 

|<<prebuilt-rule-8-17-4-namespace-manipulation-using-unshare, Namespace Manipulation Using Unshare>> | Identifies suspicious usage of unshare to manipulate system namespaces. Unshare can be utilized to escalate privileges or escape container security boundaries. Threat actors have utilized this binary to allow themselves to escape to the host and access other resources or escalate privileges. | update | 110 

|<<prebuilt-rule-8-17-4-potential-privilege-escalation-through-writable-docker-socket, Potential Privilege Escalation through Writable Docker Socket>> | This rule monitors for the usage of Docker runtime sockets to escalate privileges on Linux systems. Docker sockets by default are only be writable by the root user and docker group. Attackers that have permissions to write to these sockets may be able to create and run a container that allows them to escalate privileges and gain further access onto the host file system. | update | 6 

|<<prebuilt-rule-8-17-4-access-to-keychain-credentials-directories, Access to Keychain Credentials Directories>> | Adversaries may collect the keychain storage data from a system to acquire credentials. Keychains are the built-in way for macOS to keep track of users' passwords and credentials for many services and features such as WiFi passwords, websites, secure notes and certificates. | update | 208 

|<<prebuilt-rule-8-17-4-dumping-account-hashes-via-built-in-commands, Dumping Account Hashes via Built-In Commands>> | Identifies the execution of macOS built-in commands used to dump user account hashes. Adversaries may attempt to dump credentials to obtain account login information in the form of a hash. These hashes can be cracked or leveraged for lateral movement. | update | 107 

|<<prebuilt-rule-8-17-4-dumping-of-keychain-content-via-security-command, Dumping of Keychain Content via Security Command>> | Adversaries may dump the content of the keychain storage data from a system to acquire credentials. Keychains are the built-in way for macOS to keep track of users' passwords and credentials for many services and features, including Wi-Fi and website passwords, secure notes, certificates, and Kerberos. | update | 108 

|<<prebuilt-rule-8-17-4-suspicious-pbpaste-high-volume-activity, Suspicious pbpaste High Volume Activity>> | Identifies a high volume of `pbpaste` executions, which may indicate a bash loop continuously collecting clipboard contents, potentially allowing an attacker to harvest user credentials or other sensitive information. | update | 2 

|<<prebuilt-rule-8-17-4-kerberos-cached-credentials-dumping, Kerberos Cached Credentials Dumping>> | Identifies the use of the Kerberos credential cache (kcc) utility to dump locally cached Kerberos tickets. Adversaries may attempt to dump credential material in the form of tickets that can be leveraged for lateral movement. | update | 107 

|<<prebuilt-rule-8-17-4-keychain-password-retrieval-via-command-line, Keychain Password Retrieval via Command Line>> | Adversaries may collect keychain storage data from a system to in order to acquire credentials. Keychains are the built-in way for macOS to keep track of users' passwords and credentials for many services and features, including Wi-Fi and website passwords, secure notes, certificates, and Kerberos. | update | 109 

|<<prebuilt-rule-8-17-4-webproxy-settings-modification, WebProxy Settings Modification>> | Identifies the use of the built-in networksetup command to configure webproxy settings. This may indicate an attempt to hijack web browser traffic for credential access via traffic sniffing or redirection. | update | 207 

|<<prebuilt-rule-8-17-4-potential-macos-ssh-brute-force-detected, Potential macOS SSH Brute Force Detected>> | Identifies a high number (20) of macOS SSH KeyGen process executions from the same host. An adversary may attempt a brute force attack to obtain unauthorized access to user accounts. | update | 109 

|<<prebuilt-rule-8-17-4-prompt-for-credentials-with-osascript, Prompt for Credentials with OSASCRIPT>> | Identifies the use of osascript to execute scripts via standard input that may prompt a user with a rogue dialog for credentials. | update | 209 

|<<prebuilt-rule-8-17-4-suspicious-web-browser-sensitive-file-access, Suspicious Web Browser Sensitive File Access>> | Identifies the access or file open of web browser sensitive files by an untrusted/unsigned process or osascript. Adversaries may acquire credentials from web browsers by reading files specific to the target browser. | update | 210 

|<<prebuilt-rule-8-17-4-systemkey-access-via-command-line, SystemKey Access via Command Line>> | Keychains are the built-in way for macOS to keep track of users' passwords and credentials for many services and features, including Wi-Fi and website passwords, secure notes, certificates, and Kerberos. Adversaries may collect the keychain storage data from a system to acquire credentials. | update | 207 

|<<prebuilt-rule-8-17-4-softwareupdate-preferences-modification, SoftwareUpdate Preferences Modification>> | Identifies changes to the SoftwareUpdate preferences using the built-in defaults command. Adversaries may abuse this in an attempt to disable security updates. | update | 107 

|<<prebuilt-rule-8-17-4-quarantine-attrib-removed-by-unsigned-or-untrusted-process, Quarantine Attrib Removed by Unsigned or Untrusted Process>> | Detects deletion of the quarantine attribute by an unusual process (xattr). In macOS, when applications or programs are downloaded from the internet, there is a quarantine flag set on the file. This attribute is read by Apple's Gatekeeper defense program at execution time. An adversary may disable this attribute to evade defenses. | update | 110 

|<<prebuilt-rule-8-17-4-attempt-to-disable-gatekeeper, Attempt to Disable Gatekeeper>> | Detects attempts to disable Gatekeeper on macOS. Gatekeeper is a security feature that's designed to ensure that only trusted software is run. Adversaries may attempt to disable Gatekeeper before executing malicious code. | update | 107 

|<<prebuilt-rule-8-17-4-attempt-to-install-root-certificate, Attempt to Install Root Certificate>> | Adversaries may install a root certificate on a compromised system to avoid warnings when connecting to their command and control servers. Root certificates are used in public key cryptography to identify a root certificate authority (CA). When a root certificate is installed, the system or application will trust certificates in the root's chain of trust that have been signed by the root certificate. | update | 107 

|<<prebuilt-rule-8-17-4-modification-of-environment-variable-via-unsigned-or-untrusted-parent, Modification of Environment Variable via Unsigned or Untrusted Parent>> | Identifies modifications to an environment variable using the built-in launchctl command. Adversaries may execute their own malicious payloads by hijacking certain environment variables to load arbitrary libraries or bypass certain restrictions. | update | 207 

|<<prebuilt-rule-8-17-4-potential-privacy-control-bypass-via-tccdb-modification, Potential Privacy Control Bypass via TCCDB Modification>> | Identifies the use of sqlite3 to directly modify the Transparency, Consent, and Control (TCC) SQLite database. This may indicate an attempt to bypass macOS privacy controls, including access to sensitive resources like the system camera, microphone, address book, and calendar. | update | 108 

|<<prebuilt-rule-8-17-4-potential-privacy-control-bypass-via-localhost-secure-copy, Potential Privacy Control Bypass via Localhost Secure Copy>> | Identifies use of the Secure Copy Protocol (SCP) to copy files locally by abusing the auto addition of the Secure Shell Daemon (sshd) to the authorized application list for Full Disk Access. This may indicate attempts to bypass macOS privacy controls to access sensitive files. | update | 108 

|<<prebuilt-rule-8-17-4-modification-of-safari-settings-via-defaults-command, Modification of Safari Settings via Defaults Command>> | Identifies changes to the Safari configuration using the built-in defaults command. Adversaries may attempt to enable or disable certain Safari settings, such as enabling JavaScript from Apple Events to ease in the hijacking of the users browser. | update | 107 

|<<prebuilt-rule-8-17-4-potential-microsoft-office-sandbox-evasion, Potential Microsoft Office Sandbox Evasion>> | Identifies the creation of a suspicious zip file prepended with special characters. Sandboxed Microsoft Office applications on macOS are allowed to write files that start with special characters, which can be combined with an AutoStart location to achieve sandbox evasion. | update | 107 

|<<prebuilt-rule-8-17-4-tcc-bypass-via-mounted-apfs-snapshot-access, TCC Bypass via Mounted APFS Snapshot Access>> | Identifies the use of the mount_apfs command to mount the entire file system through Apple File System (APFS) snapshots as read-only and with the noowners flag set. This action enables the adversary to access almost any file in the file system, including all user data and files protected by Apple’s privacy framework (TCC). | update | 107 

|<<prebuilt-rule-8-17-4-attempt-to-unload-elastic-endpoint-security-kernel-extension, Attempt to Unload Elastic Endpoint Security Kernel Extension>> | Identifies attempts to unload the Elastic Endpoint Security kernel extension via the kextunload command. | update | 107 

|<<prebuilt-rule-8-17-4-enumeration-of-users-or-groups-via-built-in-commands, Enumeration of Users or Groups via Built-in Commands>> | Identifies the execution of macOS built-in commands related to account or group enumeration. Adversaries may use account and group information to orient themselves before deciding how to act. | update | 208 

|<<prebuilt-rule-8-17-4-execution-via-electron-child-process-node-js-module, Execution via Electron Child Process Node.js Module>> | Identifies attempts to execute a child process from within the context of an Electron application using the child_process Node.js module. Adversaries may abuse this technique to inherit permissions from parent processes. | update | 107 

|<<prebuilt-rule-8-17-4-suspicious-browser-child-process, Suspicious Browser Child Process>> | Identifies the execution of a suspicious browser child process. Adversaries may gain access to a system through a user visiting a website over the normal course of browsing. With this technique, the user's web browser is typically targeted for exploitation. | update | 108 

|<<prebuilt-rule-8-17-4-macos-installer-package-spawns-network-event, MacOS Installer Package Spawns Network Event>> | Detects the execution of a MacOS installer package with an abnormal child process (e.g bash) followed immediately by a network connection via a suspicious process (e.g curl). Threat actors will build and distribute malicious MacOS installer packages, which have a .pkg extension, many times imitating valid software in order to persuade and infect their victims often using the package files (e.g pre/post install scripts etc.) to download additional tools or malicious software. If this rule fires it should indicate the installation of a malicious or suspicious package. | update | 108 

|<<prebuilt-rule-8-17-4-suspicious-automator-workflows-execution, Suspicious Automator Workflows Execution>> | Identifies the execution of the Automator Workflows process followed by a network connection from it's XPC service. Adversaries may drop a custom workflow template that hosts malicious JavaScript for Automation (JXA) code as an alternative to using osascript. | update | 107 

|<<prebuilt-rule-8-17-4-apple-script-execution-followed-by-network-connection, Apple Script Execution followed by Network Connection>> | Detects execution via the Apple script interpreter (osascript) followed by a network connection from the same process within a short time period. Adversaries may use malicious scripts for execution and command and control. | update | 107 

|<<prebuilt-rule-8-17-4-shell-execution-via-apple-scripting, Shell Execution via Apple Scripting>> | Identifies the execution of the shell process (sh) via scripting (JXA or AppleScript). Adversaries may use the doShellScript functionality in JXA or do shell script in AppleScript to execute system commands. | update | 108 

|<<prebuilt-rule-8-17-4-suspicious-macos-ms-office-child-process, Suspicious macOS MS Office Child Process>> | Identifies suspicious child processes of frequently targeted Microsoft Office applications (Word, PowerPoint, and Excel). These child processes are often launched during exploitation of Office applications or by documents with malicious macros. | update | 208 

|<<prebuilt-rule-8-17-4-potential-kerberos-attack-via-bifrost, Potential Kerberos Attack via Bifrost>> | Identifies use of Bifrost, a known macOS Kerberos pentesting tool, which can be used to dump cached Kerberos tickets or attempt unauthorized authentication techniques such as pass-the-ticket/hash and kerberoasting. | update | 107 

|<<prebuilt-rule-8-17-4-attempt-to-mount-smb-share-via-command-line, Attempt to Mount SMB Share via Command Line>> | Identifies the execution of macOS built-in commands to mount a Server Message Block (SMB) network share. Adversaries may use valid accounts to interact with a remote network share using SMB. | update | 108 

|<<prebuilt-rule-8-17-4-remote-ssh-login-enabled-via-systemsetup-command, Remote SSH Login Enabled via systemsetup Command>> | Detects use of the systemsetup command to enable remote SSH Login. | update | 107 

|<<prebuilt-rule-8-17-4-virtual-private-network-connection-attempt, Virtual Private Network Connection Attempt>> | Identifies the execution of macOS built-in commands to connect to an existing Virtual Private Network (VPN). Adversaries may use VPN connections to laterally move and control remote systems on a network. | update | 108 

|<<prebuilt-rule-8-17-4-potential-hidden-local-user-account-creation, Potential Hidden Local User Account Creation>> | Identifies attempts to create a local account that will be hidden from the macOS logon window. This may indicate an attempt to evade user attention while maintaining persistence using a separate local account. | update | 107 

|<<prebuilt-rule-8-17-4-launch-agent-creation-or-modification-and-immediate-loading, Launch Agent Creation or Modification and Immediate Loading>> | An adversary can establish persistence by installing a new launch agent that executes at login by using launchd or launchctl to load a plist into the appropriate directories. | update | 107 

|<<prebuilt-rule-8-17-4-creation-of-hidden-login-item-via-apple-script, Creation of Hidden Login Item via Apple Script>> | Identifies the execution of osascript to create a hidden login item. This may indicate an attempt to persist a malicious program while concealing its presence. | update | 109 

|<<prebuilt-rule-8-17-4-launchdaemon-creation-or-modification-and-immediate-loading, LaunchDaemon Creation or Modification and Immediate Loading>> | Indicates the creation or modification of a launch daemon, which adversaries may use to repeatedly execute malicious payloads as part of persistence. | update | 107 

|<<prebuilt-rule-8-17-4-authorization-plugin-modification, Authorization Plugin Modification>> | Authorization plugins are used to extend the authorization services API and implement mechanisms that are not natively supported by the OS, such as multi-factor authentication with third party software. Adversaries may abuse this feature to persist and/or collect clear text credentials as they traverse the registered plugins during user logon. | update | 108 

|<<prebuilt-rule-8-17-4-suspicious-crontab-creation-or-modification, Suspicious CronTab Creation or Modification>> | Identifies attempts to create or modify a crontab via a process that is not crontab (i.e python, osascript, etc.). This activity should not be highly prevalent and could indicate the use of cron as a persistence mechanism by a threat actor. | update | 107 

|<<prebuilt-rule-8-17-4-suspicious-hidden-child-process-of-launchd, Suspicious Hidden Child Process of Launchd>> | Identifies the execution of a launchd child process with a hidden file. An adversary can establish persistence by installing a new logon item, launch agent, or daemon that executes upon login. | update | 107 

|<<prebuilt-rule-8-17-4-persistence-via-directoryservice-plugin-modification, Persistence via DirectoryService Plugin Modification>> | Identifies the creation or modification of a DirectoryService PlugIns (dsplug) file. The DirectoryService daemon launches on each system boot and automatically reloads after crash. It scans and executes bundles that are located in the DirectoryServices PlugIns folder and can be abused by adversaries to maintain persistence. | update | 107 

|<<prebuilt-rule-8-17-4-persistence-via-docker-shortcut-modification, Persistence via Docker Shortcut Modification>> | An adversary can establish persistence by modifying an existing macOS dock property list in order to execute a malicious application instead of the intended one when invoked. | update | 108 

|<<prebuilt-rule-8-17-4-emond-rules-creation-or-modification, Emond Rules Creation or Modification>> | Identifies the creation or modification of the Event Monitor Daemon (emond) rules. Adversaries may abuse this service by writing a rule to execute commands when a defined event occurs, such as system start up or user authentication. | update | 108 

|<<prebuilt-rule-8-17-4-suspicious-emond-child-process, Suspicious Emond Child Process>> | Identifies the execution of a suspicious child process of the Event Monitor Daemon (emond). Adversaries may abuse this service by writing a rule to execute commands when a defined event occurs, such as system start up or user authentication. | update | 108 

|<<prebuilt-rule-8-17-4-attempt-to-enable-the-root-account, Attempt to Enable the Root Account>> | Identifies attempts to enable the root account using the dsenableroot command. This command may be abused by adversaries for persistence, as the root account is disabled by default. | update | 107 

|<<prebuilt-rule-8-17-4-creation-of-hidden-launch-agent-or-daemon, Creation of Hidden Launch Agent or Daemon>> | Identifies the creation of a hidden launch agent or daemon. An adversary may establish persistence by installing a new launch agent or daemon which executes at login. | update | 108 

|<<prebuilt-rule-8-17-4-finder-sync-plugin-registered-and-enabled, Finder Sync Plugin Registered and Enabled>> | Finder Sync plugins enable users to extend Finder’s functionality by modifying the user interface. Adversaries may abuse this feature by adding a rogue Finder Plugin to repeatedly execute malicious payloads for persistence. | update | 207 

|<<prebuilt-rule-8-17-4-persistence-via-folder-action-script, Persistence via Folder Action Script>> | Detects modification of a Folder Action script. A Folder Action script is executed when the folder to which it is attached has items added or removed, or when its window is opened, closed, moved, or resized. Adversaries may abuse this feature to establish persistence by utilizing a malicious script. | update | 108 

|<<prebuilt-rule-8-17-4-persistence-via-login-or-logout-hook, Persistence via Login or Logout Hook>> | Identifies use of the Defaults command to install a login or logoff hook in MacOS. An adversary may abuse this capability to establish persistence in an environment by inserting code to be executed at login or logout. | update | 108 

|<<prebuilt-rule-8-17-4-potential-persistence-via-login-hook, Potential Persistence via Login Hook>> | Identifies the creation or modification of the login window property list (plist). Adversaries may modify plist files to run a program during system boot or user login for persistence. | update | 109 

|<<prebuilt-rule-8-17-4-sublime-plugin-or-application-script-modification, Sublime Plugin or Application Script Modification>> | Adversaries may create or modify the Sublime application plugins or scripts to execute a malicious payload each time the Sublime application is started. | update | 109 

|<<prebuilt-rule-8-17-4-potential-persistence-via-periodic-tasks, Potential Persistence via Periodic Tasks>> | Identifies the creation or modification of the default configuration for periodic tasks. Adversaries may abuse periodic tasks to execute malicious code or maintain persistence. | update | 107 

|<<prebuilt-rule-8-17-4-unexpected-child-process-of-macos-screensaver-engine, Unexpected Child Process of macOS Screensaver Engine>> | Identifies when a child process is spawned by the screensaver engine process, which is consistent with an attacker's malicious payload being executed after the screensaver activated on the endpoint. An adversary can maintain persistence on a macOS endpoint by creating a malicious screensaver (.saver) file and configuring the screensaver plist file to execute code each time the screensaver is activated. | update | 108 

|<<prebuilt-rule-8-17-4-screensaver-plist-file-modified-by-unexpected-process, Screensaver Plist File Modified by Unexpected Process>> | Identifies when a screensaver plist file is modified by an unexpected process. An adversary can maintain persistence on a macOS endpoint by creating a malicious screensaver (.saver) file and configuring the screensaver plist file to execute code each time the screensaver is activated. | update | 108 

|<<prebuilt-rule-8-17-4-suspicious-calendar-file-modification, Suspicious Calendar File Modification>> | Identifies suspicious modifications of the calendar file by an unusual process. Adversaries may create a custom calendar notification procedure to execute a malicious program at a recurring interval to establish persistence. | update | 107 

|<<prebuilt-rule-8-17-4-potential-persistence-via-atom-init-script-modification, Potential Persistence via Atom Init Script Modification>> | Identifies modifications to the Atom desktop text editor Init File. Adversaries may add malicious JavaScript code to the init.coffee file that will be executed upon the Atom application opening. | update | 107 

|<<prebuilt-rule-8-17-4-apple-scripting-execution-with-administrator-privileges, Apple Scripting Execution with Administrator Privileges>> | Identifies execution of the Apple script interpreter (osascript) without a password prompt and with administrator privileges. | update | 208 

|<<prebuilt-rule-8-17-4-execution-with-explicit-credentials-via-scripting, Execution with Explicit Credentials via Scripting>> | Identifies execution of the security_authtrampoline process via a scripting interpreter. This occurs when programs use AuthorizationExecute-WithPrivileges from the Security.framework to run another program with root privileges. It should not be run by itself, as this is a sign of execution with explicit logon credentials. | update | 107 

|<<prebuilt-rule-8-17-4-suspicious-child-process-of-adobe-acrobat-reader-update-service, Suspicious Child Process of Adobe Acrobat Reader Update Service>> | Detects attempts to exploit privilege escalation vulnerabilities related to the Adobe Acrobat Reader PrivilegedHelperTool responsible for installing updates. For more information, refer to CVE-2020-9615, CVE-2020-9614 and CVE-2020-9613 and verify that the impacted system is patched. | update | 107 

|<<prebuilt-rule-8-17-4-potential-admin-group-account-addition, Potential Admin Group Account Addition>> | Identifies attempts to add an account to the admin group via the command line. This could be an indication of privilege escalation activity. | update | 207 

|<<prebuilt-rule-8-17-4-privilege-escalation-via-root-crontab-file-modification, Privilege Escalation via Root Crontab File Modification>> | Identifies modifications to the root crontab file. Adversaries may overwrite this file to gain code execution with root privileges by exploiting privileged file write or move related vulnerabilities. | update | 107 

|<<prebuilt-rule-8-17-4-user-added-to-the-admin-group, User Added to the Admin Group>> | Identifies users being added to the admin group. This could be an indication of privilege escalation activity. | update | 2 

|<<prebuilt-rule-8-17-4-dns-tunneling, DNS Tunneling>> | A machine learning job detected unusually large numbers of DNS queries for a single top-level DNS domain, which is often used for DNS tunneling. DNS tunneling can be used for command-and-control, persistence, or data exfiltration activity. For example, dnscat tends to generate many DNS questions for a top-level domain as it uses the DNS protocol to tunnel data. | update | 105 

|<<prebuilt-rule-8-17-4-unusual-dns-activity, Unusual DNS Activity>> | A machine learning job detected a rare and unusual DNS query that indicate network activity with unusual DNS domains. This can be due to initial access, persistence, command-and-control, or exfiltration activity. For example, when a user clicks on a link in a phishing email or opens a malicious document, a request may be sent to download and run a payload from an uncommon domain. When malware is already running, it may send requests to an uncommon DNS domain the malware uses for command-and-control communication. | update | 105 

|<<prebuilt-rule-8-17-4-unusual-web-request, Unusual Web Request>> | A machine learning job detected a rare and unusual URL that indicates unusual web browsing activity. This can be due to initial access, persistence, command-and-control, or exfiltration activity. For example, in a strategic web compromise or watering hole attack, when a trusted website is compromised to target a particular sector or organization, targeted users may receive emails with uncommon URLs for trusted websites. These URLs can be used to download and run a payload. When malware is already running, it may send requests to uncommon URLs on trusted websites the malware uses for command-and-control communication. When rare URLs are observed being requested for a local web server by a remote source, these can be due to web scanning, enumeration or attack traffic, or they can be due to bots and web scrapers which are part of common Internet background traffic. | update | 105 

|<<prebuilt-rule-8-17-4-unusual-web-user-agent, Unusual Web User Agent>> | A machine learning job detected a rare and unusual user agent indicating web browsing activity by an unusual process other than a web browser. This can be due to persistence, command-and-control, or exfiltration activity. Uncommon user agents coming from remote sources to local destinations are often the result of scanners, bots, and web scrapers, which are part of common Internet background traffic. Much of this is noise, but more targeted attacks on websites using tools like Burp or SQLmap can sometimes be discovered by spotting uncommon user agents. Uncommon user agents in traffic from local sources to remote destinations can be any number of things, including harmless programs like weather monitoring or stock-trading programs. However, uncommon user agents from local sources can also be due to malware or scanning activity. | update | 105 

|<<prebuilt-rule-8-17-4-spike-in-logon-events, Spike in Logon Events>> | A machine learning job found an unusually large spike in successful authentication events. This can be due to password spraying, user enumeration or brute force activity. | update | 105 

|<<prebuilt-rule-8-17-4-unusual-linux-process-calling-the-metadata-service, Unusual Linux Process Calling the Metadata Service>> | Looks for anomalous access to the metadata service by an unusual process. The metadata service may be targeted in order to harvest credentials or user data scripts containing secrets. | update | 105 

|<<prebuilt-rule-8-17-4-unusual-linux-user-calling-the-metadata-service, Unusual Linux User Calling the Metadata Service>> | Looks for anomalous access to the cloud platform metadata service by an unusual user. The metadata service may be targeted in order to harvest credentials or user data scripts containing secrets. | update | 105 

|<<prebuilt-rule-8-17-4-unusual-login-activity, Unusual Login Activity>> | Identifies an unusually high number of authentication attempts. | update | 105 

|<<prebuilt-rule-8-17-4-unusual-windows-process-calling-the-metadata-service, Unusual Windows Process Calling the Metadata Service>> | Looks for anomalous access to the metadata service by an unusual process. The metadata service may be targeted in order to harvest credentials or user data scripts containing secrets. | update | 207 

|<<prebuilt-rule-8-17-4-unusual-windows-user-calling-the-metadata-service, Unusual Windows User Calling the Metadata Service>> | Looks for anomalous access to the cloud platform metadata service by an unusual user. The metadata service may be targeted in order to harvest credentials or user data scripts containing secrets. | update | 207 

|<<prebuilt-rule-8-17-4-unusual-linux-system-information-discovery-activity, Unusual Linux System Information Discovery Activity>> | Looks for commands related to system information discovery from an unusual user context. This can be due to uncommon troubleshooting activity or due to a compromised account. A compromised account may be used to engage in system information discovery in order to gather detailed information about system configuration and software versions. This may be a precursor to selection of a persistence mechanism or a method of privilege elevation. | update | 105 

|<<prebuilt-rule-8-17-4-unusual-linux-network-configuration-discovery, Unusual Linux Network Configuration Discovery>> | Looks for commands related to system network configuration discovery from an unusual user context. This can be due to uncommon troubleshooting activity or due to a compromised account. A compromised account may be used by a threat actor to engage in system network configuration discovery in order to increase their understanding of connected networks and hosts. This information may be used to shape follow-up behaviors such as lateral movement or additional discovery. | update | 106 

|<<prebuilt-rule-8-17-4-unusual-linux-network-connection-discovery, Unusual Linux Network Connection Discovery>> | Looks for commands related to system network connection discovery from an unusual user context. This can be due to uncommon troubleshooting activity or due to a compromised account. A compromised account may be used by a threat actor to engage in system network connection discovery in order to increase their understanding of connected services and systems. This information may be used to shape follow-up behaviors such as lateral movement or additional discovery. | update | 105 

|<<prebuilt-rule-8-17-4-unusual-linux-process-discovery-activity, Unusual Linux Process Discovery Activity>> | Looks for commands related to system process discovery from an unusual user context. This can be due to uncommon troubleshooting activity or due to a compromised account. A compromised account may be used by a threat actor to engage in system process discovery in order to increase their understanding of software applications running on a target host or network. This may be a precursor to selection of a persistence mechanism or a method of privilege elevation. | update | 105 

|<<prebuilt-rule-8-17-4-unusual-linux-user-discovery-activity, Unusual Linux User Discovery Activity>> | Looks for commands related to system user or owner discovery from an unusual user context. This can be due to uncommon troubleshooting activity or due to a compromised account. A compromised account may be used to engage in system owner or user discovery in order to identify currently active or primary users of a system. This may be a precursor to additional discovery, credential dumping or privilege elevation activity. | update | 106 

|<<prebuilt-rule-8-17-4-suspicious-powershell-script, Suspicious Powershell Script>> | A machine learning job detected a PowerShell script with unusual data characteristics, such as obfuscation, that may be a characteristic of malicious PowerShell script text blocks. | update | 208 

|<<prebuilt-rule-8-17-4-unusual-source-ip-for-a-user-to-logon-from, Unusual Source IP for a User to Logon from>> | A machine learning job detected a user logging in from an IP address that is unusual for the user. This can be due to credentialed access via a compromised account when the user and the threat actor are in different locations. An unusual source IP address for a username could also be due to lateral movement when a compromised account is used to pivot between hosts. | update | 105 

|<<prebuilt-rule-8-17-4-unusual-linux-username, Unusual Linux Username>> | A machine learning job detected activity for a username that is not normally active, which can indicate unauthorized changes, activity by unauthorized users, lateral movement, or compromised credentials. In many organizations, new usernames are not often created apart from specific types of system activities, such as creating new accounts for new employees. These user accounts quickly become active and routine. Events from rarely used usernames can point to suspicious activity. Additionally, automated Linux fleets tend to see activity from rarely used usernames only when personnel log in to make authorized or unauthorized changes, or threat actors have acquired credentials and log in for malicious purposes. Unusual usernames can also indicate pivoting, where compromised credentials are used to try and move laterally from one host to another. | update | 105 

|<<prebuilt-rule-8-17-4-unusual-windows-username, Unusual Windows Username>> | A machine learning job detected activity for a username that is not normally active, which can indicate unauthorized changes, activity by unauthorized users, lateral movement, or compromised credentials. In many organizations, new usernames are not often created apart from specific types of system activities, such as creating new accounts for new employees. These user accounts quickly become active and routine. Events from rarely used usernames can point to suspicious activity. Additionally, automated Linux fleets tend to see activity from rarely used usernames only when personnel log in to make authorized or unauthorized changes, or threat actors have acquired credentials and log in for malicious purposes. Unusual usernames can also indicate pivoting, where compromised credentials are used to try and move laterally from one host to another. | update | 208 

|<<prebuilt-rule-8-17-4-unusual-windows-remote-user, Unusual Windows Remote User>> | A machine learning job detected an unusual remote desktop protocol (RDP) username, which can indicate account takeover or credentialed persistence using compromised accounts. RDP attacks, such as BlueKeep, also tend to use unusual usernames. | update | 207 

|<<prebuilt-rule-8-17-4-spike-in-firewall-denies, Spike in Firewall Denies>> | A machine learning job detected an unusually large spike in network traffic that was denied by network access control lists (ACLs) or firewall rules. Such a burst of denied traffic is usually caused by either 1) a mis-configured application or firewall or 2) suspicious or malicious activity. Unsuccessful attempts at network transit, in order to connect to command-and-control (C2), or engage in data exfiltration, may produce a burst of failed connections. This could also be due to unusually large amounts of reconnaissance or enumeration traffic. Denial-of-service attacks or traffic floods may also produce such a surge in traffic. | update | 105 

|<<prebuilt-rule-8-17-4-spike-in-network-traffic, Spike in Network Traffic>> | A machine learning job detected an unusually large spike in network traffic. Such a burst of traffic, if not caused by a surge in business activity, can be due to suspicious or malicious activity. Large-scale data exfiltration may produce a burst of network traffic; this could also be due to unusually large amounts of reconnaissance or enumeration traffic. Denial-of-service attacks or traffic floods may also produce such a surge in traffic. | update | 105 

|<<prebuilt-rule-8-17-4-unusual-linux-network-activity, Unusual Linux Network Activity>> | Identifies Linux processes that do not usually use the network but have unexpected network activity, which can indicate command-and-control, lateral movement, persistence, or data exfiltration activity. A process with unusual network activity can denote process exploitation or injection, where the process is used to run persistence mechanisms that allow a malicious actor remote access or control of the host, data exfiltration, and execution of unauthorized network applications. | update | 105 

|<<prebuilt-rule-8-17-4-unusual-linux-network-port-activity, Unusual Linux Network Port Activity>> | Identifies unusual destination port activity that can indicate command-and-control, persistence mechanism, or data exfiltration activity. Rarely used destination port activity is generally unusual in Linux fleets, and can indicate unauthorized access or threat actor activity. | update | 105 

|<<prebuilt-rule-8-17-4-unusual-network-destination-domain-name, Unusual Network Destination Domain Name>> | A machine learning job detected an unusual network destination domain name. This can be due to initial access, persistence, command-and-control, or exfiltration activity. For example, when a user clicks on a link in a phishing email or opens a malicious document, a request may be sent to download and run a payload from an uncommon web server name. When malware is already running, it may send requests to an uncommon DNS domain the malware uses for command-and-control communication. | update | 105 

|<<prebuilt-rule-8-17-4-network-traffic-to-rare-destination-country, Network Traffic to Rare Destination Country>> | A machine learning job detected a rare destination country name in the network logs. This can be due to initial access, persistence, command-and-control, or exfiltration activity. For example, when a user clicks on a link in a phishing email or opens a malicious document, a request may be sent to download and run a payload from a server in a country which does not normally appear in network traffic or business work-flows. Malware instances and persistence mechanisms may communicate with command-and-control (C2) infrastructure in their country of origin, which may be an unusual destination country for the source network. | update | 105 

|<<prebuilt-rule-8-17-4-spike-in-network-traffic-to-a-country, Spike in Network Traffic To a Country>> | A machine learning job detected an unusually large spike in network activity to one destination country in the network logs. This could be due to unusually large amounts of reconnaissance or enumeration traffic. Data exfiltration activity may also produce such a surge in traffic to a destination country that does not normally appear in network traffic or business workflows. Malware instances and persistence mechanisms may communicate with command-and-control (C2) infrastructure in their country of origin, which may be an unusual destination country for the source network. | update | 106 

|<<prebuilt-rule-8-17-4-unusual-windows-network-activity, Unusual Windows Network Activity>> | Identifies Windows processes that do not usually use the network but have unexpected network activity, which can indicate command-and-control, lateral movement, persistence, or data exfiltration activity. A process with unusual network activity can denote process exploitation or injection, where the process is used to run persistence mechanisms that allow a malicious actor remote access or control of the host, data exfiltration, and execution of unauthorized network applications. | update | 207 

|<<prebuilt-rule-8-17-4-unusual-process-for-a-linux-host, Unusual Process For a Linux Host>> | Identifies rare processes that do not usually run on individual hosts, which can indicate execution of unauthorized services, malware, or persistence mechanisms. Processes are considered rare when they only run occasionally as compared with other processes running on the host. | update | 106 

|<<prebuilt-rule-8-17-4-unusual-process-for-a-windows-host, Unusual Process For a Windows Host>> | Identifies rare processes that do not usually run on individual hosts, which can indicate execution of unauthorized services, malware, or persistence mechanisms. Processes are considered rare when they only run occasionally as compared with other processes running on the host. | update | 212 

|<<prebuilt-rule-8-17-4-unusual-windows-path-activity, Unusual Windows Path Activity>> | Identifies processes started from atypical folders in the file system, which might indicate malware execution or persistence mechanisms. In corporate Windows environments, software installation is centrally managed and it is unusual for programs to be executed from user or temporary directories. Processes executed from these locations can denote that a user downloaded software directly from the Internet or a malicious script or macro executed malware. | update | 208 

|<<prebuilt-rule-8-17-4-anomalous-process-for-a-windows-population, Anomalous Process For a Windows Population>> | Searches for rare processes running on multiple hosts in an entire fleet or network. This reduces the detection of false positives since automated maintenance processes usually only run occasionally on a single machine but are common to all or many hosts in a fleet. | update | 209 

|<<prebuilt-rule-8-17-4-anomalous-windows-process-creation, Anomalous Windows Process Creation>> | Identifies unusual parent-child process relationships that can indicate malware execution or persistence mechanisms. Malicious scripts often call on other applications and processes as part of their exploit payload. For example, when a malicious Office document runs scripts as part of an exploit payload, Excel or Word may start a script interpreter process, which, in turn, runs a script that downloads and executes malware. Another common scenario is Outlook running an unusual process when malware is downloaded in an email. Monitoring and identifying anomalous process relationships is a method of detecting new and emerging malware that is not yet recognized by anti-virus scanners. | update | 209 

|<<prebuilt-rule-8-17-4-unusual-windows-service, Unusual Windows Service>> | A machine learning job detected an unusual Windows service, This can indicate execution of unauthorized services, malware, or persistence mechanisms. In corporate Windows environments, hosts do not generally run many rare or unique services. This job helps detect malware and persistence mechanisms that have been installed and run as a service. | update | 207 

|<<prebuilt-rule-8-17-4-unusual-sudo-activity, Unusual Sudo Activity>> | Looks for sudo activity from an unusual user context. An unusual sudo user could be due to troubleshooting activity or it could be a sign of credentialed access via compromised accounts. | update | 105 

|<<prebuilt-rule-8-17-4-unusual-windows-user-privilege-elevation-activity, Unusual Windows User Privilege Elevation Activity>> | A machine learning job detected an unusual user context switch, using the runas command or similar techniques, which can indicate account takeover or privilege escalation using compromised accounts. Privilege elevation using tools like runas are more commonly used by domain and network administrators than by regular Windows users. | update | 207 

|<<prebuilt-rule-8-17-4-anomalous-linux-compiler-activity, Anomalous Linux Compiler Activity>> | Looks for compiler activity by a user context which does not normally run compilers. This can be the result of ad-hoc software changes or unauthorized software deployment. This can also be due to local privilege elevation via locally run exploits or malware activity. | update | 105 

|<<prebuilt-rule-8-17-4-accepted-default-telnet-port-connection, Accepted Default Telnet Port Connection>> | This rule detects network events that may indicate the use of Telnet traffic. Telnet is commonly used by system administrators to remotely control older or embedded systems using the command line shell. It should almost never be directly exposed to the Internet, as it is frequently targeted and exploited by threat actors as an initial access or backdoor vector. As a plain-text protocol, it may also expose usernames and passwords to anyone capable of observing the traffic. | update | 107 

|<<prebuilt-rule-8-17-4-cobalt-strike-command-and-control-beacon, Cobalt Strike Command and Control Beacon>> | Cobalt Strike is a threat emulation platform commonly modified and used by adversaries to conduct network attack and exploitation campaigns. This rule detects a network activity algorithm leveraged by Cobalt Strike implant beacons for command and control. | update | 106 

|<<prebuilt-rule-8-17-4-default-cobalt-strike-team-server-certificate, Default Cobalt Strike Team Server Certificate>> | This rule detects the use of the default Cobalt Strike Team Server TLS certificate. Cobalt Strike is software for Adversary Simulations and Red Team Operations which are security assessments that replicate the tactics and techniques of an advanced adversary in a network. Modifications to the Packetbeat configuration can be made to include MD5 and SHA256 hashing algorithms (the default is SHA1). See the References section for additional information on module configuration. | update | 105 

|<<prebuilt-rule-8-17-4-roshal-archive-rar-or-powershell-file-downloaded-from-the-internet, Roshal Archive (RAR) or PowerShell File Downloaded from the Internet>> | Detects a Roshal Archive (RAR) file or PowerShell script downloaded from the internet by an internal host. Gaining initial access to a system and then downloading encoded or encrypted tools to move laterally is a common practice for adversaries as a way to protect their more valuable tools and tactics, techniques, and procedures (TTPs). This may be atypical behavior for a managed network and can be indicative of malware, exfiltration, or command and control. | update | 105 

|<<prebuilt-rule-8-17-4-possible-fin7-dga-command-and-control-behavior, Possible FIN7 DGA Command and Control Behavior>> | This rule detects a known command and control pattern in network events. The FIN7 threat group is known to use this command and control technique, while maintaining persistence in their target's network. | update | 107 

|<<prebuilt-rule-8-17-4-halfbaked-command-and-control-beacon, Halfbaked Command and Control Beacon>> | Halfbaked is a malware family used to establish persistence in a contested network. This rule detects a network activity algorithm leveraged by Halfbaked implant beacons for command and control. | update | 105 

|<<prebuilt-rule-8-17-4-ipsec-nat-traversal-port-activity, IPSEC NAT Traversal Port Activity>> | This rule detects events that could be describing IPSEC NAT Traversal traffic. IPSEC is a VPN technology that allows one system to talk to another using encrypted tunnels. NAT Traversal enables these tunnels to communicate over the Internet where one of the sides is behind a NAT router gateway. This may be common on your network, but this technique is also used by threat actors to avoid detection. | update | 106 

|<<prebuilt-rule-8-17-4-smtp-on-port-26-tcp, SMTP on Port 26/TCP>> | This rule detects events that may indicate use of SMTP on TCP port 26. This port is commonly used by several popular mail transfer agents to deconflict with the default SMTP port 25. This port has also been used by a malware family called BadPatch for command and control of Windows systems. | update | 106 

|<<prebuilt-rule-8-17-4-rdp-remote-desktop-protocol-from-the-internet, RDP (Remote Desktop Protocol) from the Internet>> | This rule detects network events that may indicate the use of RDP traffic from the Internet. RDP is commonly used by system administrators to remotely control a system for maintenance or to use shared resources. It should almost never be directly exposed to the Internet, as it is frequently targeted and exploited by threat actors as an initial access or backdoor vector. | update | 105 

|<<prebuilt-rule-8-17-4-vnc-virtual-network-computing-from-the-internet, VNC (Virtual Network Computing) from the Internet>> | This rule detects network events that may indicate the use of VNC traffic from the Internet. VNC is commonly used by system administrators to remotely control a system for maintenance or to use shared resources. It should almost never be directly exposed to the Internet, as it is frequently targeted and exploited by threat actors as an initial access or backdoor vector. | update | 106 

|<<prebuilt-rule-8-17-4-vnc-virtual-network-computing-to-the-internet, VNC (Virtual Network Computing) to the Internet>> | This rule detects network events that may indicate the use of VNC traffic to the Internet. VNC is commonly used by system administrators to remotely control a system for maintenance or to use shared resources. It should almost never be directly exposed to the Internet, as it is frequently targeted and exploited by threat actors as an initial access or backdoor vector. | update | 106 

|<<prebuilt-rule-8-17-4-potential-network-sweep-detected, Potential Network Sweep Detected>> | This rule identifies a potential network sweep. A network sweep is a method used by attackers to scan a target network, identifying active hosts, open ports, and available services to gather information on vulnerabilities and weaknesses. This reconnaissance helps them plan subsequent attacks and exploit potential entry points for unauthorized access, data theft, or other malicious activities. This rule proposes threshold logic to check for connection attempts from one source host to 10 or more destination hosts on commonly used network services. | update | 9 

|<<prebuilt-rule-8-17-4-potential-network-scan-detected, Potential Network Scan Detected>> | This rule identifies a potential port scan. A port scan is a method utilized by attackers to systematically scan a target system or network for open ports, allowing them to identify available services and potential vulnerabilities. By mapping out the open ports, attackers can gather critical information to plan and execute targeted attacks, gaining unauthorized access, compromising security, and potentially leading to data breaches, unauthorized control, or further exploitation of the targeted system or network. This rule proposes threshold logic to check for connection attempts from one source host to 20 or more destination ports. | update | 8 

|<<prebuilt-rule-8-17-4-potential-syn-based-port-scan-detected, Potential SYN-Based Port Scan Detected>> | This rule identifies a potential SYN-Based port scan. A SYN port scan is a technique employed by attackers to scan a target network for open ports by sending SYN packets to multiple ports and observing the response. Attackers use this method to identify potential entry points or services that may be vulnerable to exploitation, allowing them to launch targeted attacks or gain unauthorized access to the system or network, compromising its security and potentially leading to data breaches or further malicious activities. This rule proposes threshold logic to check for connection attempts from one source host to 10 or more destination ports using 2 or less packets per port. | update | 9 

|<<prebuilt-rule-8-17-4-rpc-remote-procedure-call-from-the-internet, RPC (Remote Procedure Call) from the Internet>> | This rule detects network events that may indicate the use of RPC traffic from the Internet. RPC is commonly used by system administrators to remotely control a system for maintenance or to use shared resources. It should almost never be directly exposed to the Internet, as it is frequently targeted and exploited by threat actors as an initial access or backdoor vector. | update | 105 

|<<prebuilt-rule-8-17-4-rpc-remote-procedure-call-to-the-internet, RPC (Remote Procedure Call) to the Internet>> | This rule detects network events that may indicate the use of RPC traffic to the Internet. RPC is commonly used by system administrators to remotely control a system for maintenance or to use shared resources. It should almost never be directly exposed to the Internet, as it is frequently targeted and exploited by threat actors as an initial access or backdoor vector. | update | 105 

|<<prebuilt-rule-8-17-4-smb-windows-file-sharing-activity-to-the-internet, SMB (Windows File Sharing) Activity to the Internet>> | This rule detects network events that may indicate the use of Windows file sharing (also called SMB or CIFS) traffic to the Internet. SMB is commonly used within networks to share files, printers, and other system resources amongst trusted systems. It should almost never be directly exposed to the Internet, as it is frequently targeted and exploited by threat actors as an initial access or backdoor vector or for data exfiltration. | update | 105 

|<<prebuilt-rule-8-17-4-inbound-connection-to-an-unsecure-elasticsearch-node, Inbound Connection to an Unsecure Elasticsearch Node>> | Identifies Elasticsearch nodes that do not have Transport Layer Security (TLS), and/or lack authentication, and are accepting inbound network connections over the default Elasticsearch port. | update | 105 

|<<prebuilt-rule-8-17-4-credential-dumping-detected-elastic-endgame, Credential Dumping - Detected - Elastic Endgame>> | Elastic Endgame detected Credential Dumping. Click the Elastic Endgame icon in the event.module column or the link in the rule.reference column for additional information. | update | 104 

|<<prebuilt-rule-8-17-4-credential-dumping-prevented-elastic-endgame, Credential Dumping - Prevented - Elastic Endgame>> | Elastic Endgame prevented Credential Dumping. Click the Elastic Endgame icon in the event.module column or the link in the rule.reference column for additional information. | update | 104 

|<<prebuilt-rule-8-17-4-adversary-behavior-detected-elastic-endgame, Adversary Behavior - Detected - Elastic Endgame>> | Elastic Endgame detected an Adversary Behavior. Click the Elastic Endgame icon in the event.module column or the link in the rule.reference column for additional information. | update | 105 

|<<prebuilt-rule-8-17-4-malware-detected-elastic-endgame, Malware - Detected - Elastic Endgame>> | Elastic Endgame detected Malware. Click the Elastic Endgame icon in the event.module column or the link in the rule.reference column for additional information. | update | 104 

|<<prebuilt-rule-8-17-4-malware-prevented-elastic-endgame, Malware - Prevented - Elastic Endgame>> | Elastic Endgame prevented Malware. Click the Elastic Endgame icon in the event.module column or the link in the rule.reference column for additional information. | update | 104 

|<<prebuilt-rule-8-17-4-ransomware-detected-elastic-endgame, Ransomware - Detected - Elastic Endgame>> | Elastic Endgame detected ransomware. Click the Elastic Endgame icon in the event.module column or the link in the rule.reference column for additional information. | update | 104 

|<<prebuilt-rule-8-17-4-ransomware-prevented-elastic-endgame, Ransomware - Prevented - Elastic Endgame>> | Elastic Endgame prevented ransomware. Click the Elastic Endgame icon in the event.module column or the link in the rule.reference column for additional information. | update | 104 

|<<prebuilt-rule-8-17-4-exploit-detected-elastic-endgame, Exploit - Detected - Elastic Endgame>> | Elastic Endgame detected an Exploit. Click the Elastic Endgame icon in the event.module column or the link in the rule.reference column for additional information. | update | 104 

|<<prebuilt-rule-8-17-4-exploit-prevented-elastic-endgame, Exploit - Prevented - Elastic Endgame>> | Elastic Endgame prevented an Exploit. Click the Elastic Endgame icon in the event.module column or the link in the rule.reference column for additional information. | update | 104 

|<<prebuilt-rule-8-17-4-external-alerts, External Alerts>> | Generates a detection alert for each external alert written to the configured indices. Enabling this rule allows you to immediately begin investigating external alerts in the app. | update | 104 

|<<prebuilt-rule-8-17-4-credential-manipulation-detected-elastic-endgame, Credential Manipulation - Detected - Elastic Endgame>> | Elastic Endgame detected Credential Manipulation. Click the Elastic Endgame icon in the event.module column or the link in the rule.reference column for additional information. | update | 104 

|<<prebuilt-rule-8-17-4-credential-manipulation-prevented-elastic-endgame, Credential Manipulation - Prevented - Elastic Endgame>> | Elastic Endgame prevented Credential Manipulation. Click the Elastic Endgame icon in the event.module column or the link in the rule.reference column for additional information. | update | 104 

|<<prebuilt-rule-8-17-4-permission-theft-detected-elastic-endgame, Permission Theft - Detected - Elastic Endgame>> | Elastic Endgame detected Permission Theft. Click the Elastic Endgame icon in the event.module column or the link in the rule.reference column for additional information. | update | 104 

|<<prebuilt-rule-8-17-4-permission-theft-prevented-elastic-endgame, Permission Theft - Prevented - Elastic Endgame>> | Elastic Endgame prevented Permission Theft. Click the Elastic Endgame icon in the event.module column or the link in the rule.reference column for additional information. | update | 104 

|<<prebuilt-rule-8-17-4-process-injection-detected-elastic-endgame, Process Injection - Detected - Elastic Endgame>> | Elastic Endgame detected Process Injection. Click the Elastic Endgame icon in the event.module column or the link in the rule.reference column for additional information. | update | 104 

|<<prebuilt-rule-8-17-4-process-injection-prevented-elastic-endgame, Process Injection - Prevented - Elastic Endgame>> | Elastic Endgame prevented Process Injection. Click the Elastic Endgame icon in the event.module column or the link in the rule.reference column for additional information. | update | 104 

|<<prebuilt-rule-8-17-4-threat-intel-ip-address-indicator-match, Threat Intel IP Address Indicator Match>> | This rule is triggered when an IP address indicator from the Threat Intel Filebeat module or integrations has a match against a network event. | update | 8 

|<<prebuilt-rule-8-17-4-threat-intel-hash-indicator-match, Threat Intel Hash Indicator Match>> | This rule is triggered when a hash indicator from the Threat Intel Filebeat module or integrations has a match against an event that contains file hashes, such as antivirus alerts, process creation, library load, and file operation events. | update | 9 

|<<prebuilt-rule-8-17-4-threat-intel-windows-registry-indicator-match, Threat Intel Windows Registry Indicator Match>> | This rule is triggered when a Windows registry indicator from the Threat Intel Filebeat module or integrations has a match against an event that contains registry data. | update | 8 

|<<prebuilt-rule-8-17-4-threat-intel-url-indicator-match, Threat Intel URL Indicator Match>> | This rule is triggered when a URL indicator from the Threat Intel Filebeat module or integrations has a match against an event that contains URL data, like DNS events, network logs, etc. | update | 8 

|<<prebuilt-rule-8-17-4-rapid7-threat-command-cves-correlation, Rapid7 Threat Command CVEs Correlation>> | This rule is triggered when CVEs collected from the Rapid7 Threat Command Integration have a match against vulnerabilities that were found in the customer environment. | update | 104 

|<<prebuilt-rule-8-17-4-suspicious-inter-process-communication-via-outlook, Suspicious Inter-Process Communication via Outlook>> | Detects Inter-Process Communication with Outlook via Component Object Model from an unusual process. Adversaries may target user email to collect sensitive information or send email on their behalf via API. | update | 8 

|<<prebuilt-rule-8-17-4-powershell-script-with-webcam-video-capture-capabilities, PowerShell Script with Webcam Video Capture Capabilities>> | Detects PowerShell scripts that can be used to record webcam video. Attackers can capture this information to extort or spy on victims. | update | 107 

|<<prebuilt-rule-8-17-4-potential-file-transfer-via-certreq, Potential File Transfer via Certreq>> | Identifies Certreq making an HTTP Post request. Adversaries could abuse Certreq to download files or upload data to a remote URL. | update | 211 

|<<prebuilt-rule-8-17-4-connection-to-commonly-abused-web-services, Connection to Commonly Abused Web Services>> | Adversaries may implement command and control (C2) communications that use common web services to hide their activity. This attack technique is typically targeted at an organization and uses web services common to the victim network, which allows the adversary to blend into legitimate traffic activity. These popular services are typically targeted since they have most likely been used before compromise, which helps malicious traffic blend in. | update | 117 

|<<prebuilt-rule-8-17-4-connection-to-commonly-abused-free-ssl-certificate-providers, Connection to Commonly Abused Free SSL Certificate Providers>> | Identifies unusual processes connecting to domains using known free SSL certificates. Adversaries may employ a known encryption algorithm to conceal command and control traffic. | update | 208 

|<<prebuilt-rule-8-17-4-potential-command-and-control-via-internet-explorer, Potential Command and Control via Internet Explorer>> | Identifies instances of Internet Explorer (iexplore.exe) being started via the Component Object Model (COM) making unusual network connections. Adversaries could abuse Internet Explorer via COM to avoid suspicious processes making network connections and bypass host-based firewall restrictions. | update | 107 

|<<prebuilt-rule-8-17-4-ingress-transfer-via-windows-bits, Ingress Transfer via Windows BITS>> | Identifies downloads of executable and archive files via the Windows Background Intelligent Transfer Service (BITS). Adversaries could leverage Windows BITS transfer jobs to download remote payloads. | update | 9 

|<<prebuilt-rule-8-17-4-outlook-home-page-registry-modification, Outlook Home Page Registry Modification>> | Identifies modifications in registry keys associated with abuse of the Outlook Home Page functionality for command and control or persistence. | update | 202 

|<<prebuilt-rule-8-17-4-remote-file-download-via-desktopimgdownldr-utility, Remote File Download via Desktopimgdownldr Utility>> | Identifies the desktopimgdownldr utility being used to download a remote file. An adversary may use desktopimgdownldr to download arbitrary files as an alternative to certutil. | update | 315 

|<<prebuilt-rule-8-17-4-remote-file-download-via-mpcmdrun, Remote File Download via MpCmdRun>> | Identifies the Windows Defender configuration utility (MpCmdRun.exe) being used to download a remote file. | update | 315 

|<<prebuilt-rule-8-17-4-remote-file-download-via-powershell, Remote File Download via PowerShell>> | Identifies powershell.exe being used to download an executable file from an untrusted remote destination. | update | 111 

|<<prebuilt-rule-8-17-4-remote-file-download-via-script-interpreter, Remote File Download via Script Interpreter>> | Identifies built-in Windows script interpreters (cscript.exe or wscript.exe) being used to download an executable file from a remote destination. | update | 211 

|<<prebuilt-rule-8-17-4-suspicious-screenconnect-client-child-process, Suspicious ScreenConnect Client Child Process>> | Identifies suspicious processes being spawned by the ScreenConnect client processes. This activity may indicate execution abusing unauthorized access to the ScreenConnect remote access software. | update | 308 

|<<prebuilt-rule-8-17-4-sunburst-command-and-control-activity, SUNBURST Command and Control Activity>> | The malware known as SUNBURST targets the SolarWind's Orion business software for command and control. This rule detects post-exploitation command and control activity of the SUNBURST backdoor. | update | 109 

|<<prebuilt-rule-8-17-4-remote-file-copy-via-teamviewer, Remote File Copy via TeamViewer>> | Identifies an executable or script file remotely downloaded via a TeamViewer transfer session. | update | 213 

|<<prebuilt-rule-8-17-4-attempt-to-establish-vscode-remote-tunnel, Attempt to Establish VScode Remote Tunnel>> | Detects the execution of the VScode portable binary with the tunnel command line option indicating an attempt to establish a remote tunnel session to Github or a remote VScode instance. | update | 105 

|<<prebuilt-rule-8-17-4-potential-adidns-poisoning-via-wildcard-record-creation, Potential ADIDNS Poisoning via Wildcard Record Creation>> | Active Directory Integrated DNS (ADIDNS) is one of the core components of AD DS, leveraging AD's access control and replication to maintain domain consistency. It stores DNS zones as AD objects, a feature that, while robust, introduces some security issues, such as wildcard records, mainly because of the default permission (Any authenticated users) to create DNS-named records. Attackers can create wildcard records to redirect traffic that doesn't explicitly match records contained in the zone, becoming the Man-in-the-Middle and being able to abuse DNS similarly to LLMNR/NBNS spoofing. | update | 104 

|<<prebuilt-rule-8-17-4-potential-wpad-spoofing-via-dns-record-creation, Potential WPAD Spoofing via DNS Record Creation>> | Identifies the creation of a DNS record that is potentially meant to enable WPAD spoofing. Attackers can disable the Global Query Block List (GQBL) and create a "wpad" record to exploit hosts running WPAD with default settings for privilege escalation and lateral movement. | update | 104 

|<<prebuilt-rule-8-17-4-privileged-account-brute-force, Privileged Account Brute Force>> | Identifies multiple consecutive logon failures targeting an Admin account from the same source address and within a short time interval. Adversaries will often brute force login attempts across multiple users with a common or known password, in an attempt to gain access to accounts. | update | 111 

|<<prebuilt-rule-8-17-4-multiple-logon-failure-followed-by-logon-success, Multiple Logon Failure Followed by Logon Success>> | Identifies multiple logon failures followed by a successful one from the same source address. Adversaries will often brute force login attempts across multiple users with a common or known password, in an attempt to gain access to accounts. | update | 112 

|<<prebuilt-rule-8-17-4-multiple-logon-failure-from-the-same-source-address, Multiple Logon Failure from the same Source Address>> | Identifies multiple consecutive logon failures from the same source address and within a short time interval. Adversaries will often brute force login attempts across multiple users with a common or known password, in an attempt to gain access to accounts. | update | 111 

|<<prebuilt-rule-8-17-4-ntds-or-sam-database-file-copied, NTDS or SAM Database File Copied>> | Identifies a copy operation of the Active Directory Domain Database (ntds.dit) or Security Account Manager (SAM) files. Those files contain sensitive information including hashed domain and/or local credentials. | update | 316 

|<<prebuilt-rule-8-17-4-potential-credential-access-via-trusted-developer-utility, Potential Credential Access via Trusted Developer Utility>> | An instance of MSBuild, the Microsoft Build Engine, loaded DLLs (dynamically linked libraries) responsible for Windows credential management. This technique is sometimes used for credential dumping. | update | 211 

|<<prebuilt-rule-8-17-4-firsttime-seen-account-performing-dcsync, FirstTime Seen Account Performing DCSync>> | This rule identifies when a User Account starts the Active Directory Replication Process for the first time. Attackers can use the DCSync technique to get credential information of individual accounts or the entire domain, thus compromising the entire domain. | update | 114 

|<<prebuilt-rule-8-17-4-potential-credential-access-via-dcsync, Potential Credential Access via DCSync>> | This rule identifies when a User Account starts the Active Directory Replication Process. Attackers can use the DCSync technique to get credential information of individual accounts or the entire domain, thus compromising the entire domain. | update | 216 

|<<prebuilt-rule-8-17-4-potential-active-directory-replication-account-backdoor, Potential Active Directory Replication Account Backdoor>> | Identifies the modification of the nTSecurityDescriptor attribute in a domain object with rights related to DCSync to a user/computer account. Attackers can use this backdoor to re-obtain access to hashes of any user/computer. | update | 105 

|<<prebuilt-rule-8-17-4-kerberos-pre-authentication-disabled-for-user, Kerberos Pre-authentication Disabled for User>> | Identifies the modification of an account's Kerberos pre-authentication options. An adversary with GenericWrite/GenericAll rights over the account can maliciously modify these settings to perform offline password cracking attacks such as AS-REP roasting. | update | 214 

|<<prebuilt-rule-8-17-4-creation-of-a-dns-named-record, Creation of a DNS-Named Record>> | Active Directory Integrated DNS (ADIDNS) is one of the core components of AD DS, leveraging AD's access control and replication to maintain domain consistency. It stores DNS zones as AD objects, a feature that, while robust, introduces some security issues because of the default permission (Any authenticated users) to create DNS-named records. Attackers can perform Dynamic Spoofing attacks, where they monitor LLMNR/NBT-NS requests and create DNS-named records to target systems that are requested from multiple systems. They can also create specific records to target specific services, such as wpad, for spoofing attacks. | update | 104 

|<<prebuilt-rule-8-17-4-potential-relay-attack-against-a-domain-controller, Potential Relay Attack against a Domain Controller>> | Identifies potential relay attacks against a domain controller (DC) by identifying authentication events using the domain controller computer account coming from other hosts to the DC that owns the account. Attackers may relay the DC hash after capturing it using forced authentication. | update | 103 

|<<prebuilt-rule-8-17-4-creation-or-modification-of-domain-backup-dpapi-private-key, Creation or Modification of Domain Backup DPAPI private key>> | Identifies the creation or modification of Domain Backup private keys. Adversaries may extract the Data Protection API (DPAPI) domain backup key from a Domain Controller (DC) to be able to decrypt any domain user master key file. | update | 413 

|<<prebuilt-rule-8-17-4-full-user-mode-dumps-enabled-system-wide, Full User-Mode Dumps Enabled System-Wide>> | Identifies the enable of the full user-mode dumps feature system-wide. This feature allows Windows Error Reporting (WER) to collect data after an application crashes. This setting is a requirement for the LSASS Shtinkering attack, which fakes the communication of a crash on LSASS, generating a dump of the process memory, which gives the attacker access to the credentials present on the system without having to bring malware to the system. This setting is not enabled by default, and applications must create their registry subkeys to hold settings that enable them to collect dumps. | update | 109 

|<<prebuilt-rule-8-17-4-microsoft-iis-connection-strings-decryption, Microsoft IIS Connection Strings Decryption>> | Identifies use of aspnet_regiis to decrypt Microsoft IIS connection strings. An attacker with Microsoft IIS web server access via a webshell or alike can decrypt and dump any hardcoded connection strings, such as the MSSQL service account password using aspnet_regiis command. | update | 313 

|<<prebuilt-rule-8-17-4-untrusted-dll-loaded-by-azure-ad-sync-service, Untrusted DLL Loaded by Azure AD Sync Service>> | Identifies the load of a DLL without a valid code signature by the Azure AD Sync process, which may indicate an attempt to persist or collect sensitive credentials passing through the Azure AD synchronization server. | update | 102 

|<<prebuilt-rule-8-17-4-kerberos-traffic-from-unusual-process, Kerberos Traffic from Unusual Process>> | Identifies network connections to the standard Kerberos port from an unusual process. On Windows, the only process that normally performs Kerberos traffic from a domain joined host is lsass.exe. | update | 211 

|<<prebuilt-rule-8-17-4-kirbi-file-creation, Kirbi File Creation>> | Identifies the creation of .kirbi files. The creation of this kind of file is an indicator of an attacker running Kerberos ticket dump utilities, such as Mimikatz, and precedes attacks such as Pass-The-Ticket (PTT), which allows the attacker to impersonate users using Kerberos tickets. | update | 312 

|<<prebuilt-rule-8-17-4-access-to-a-sensitive-ldap-attribute, Access to a Sensitive LDAP Attribute>> | Identify access to sensitive Active Directory object attributes that contains credentials and decryption keys such as unixUserPassword, ms-PKI-AccountCredentials and msPKI-CredentialRoamingTokens. | update | 113 

|<<prebuilt-rule-8-17-4-suspicious-lsass-access-via-malseclogon, Suspicious LSASS Access via MalSecLogon>> | Identifies suspicious access to LSASS handle from a call trace pointing to seclogon.dll and with a suspicious access rights value. This may indicate an attempt to leak an LSASS handle via abusing the Secondary Logon service in preparation for credential access. | update | 309 

|<<prebuilt-rule-8-17-4-suspicious-module-loaded-by-lsass, Suspicious Module Loaded by LSASS>> | Identifies LSASS loading an unsigned or untrusted DLL. Windows Security Support Provider (SSP) DLLs are loaded into LSSAS process at system start. Once loaded into the LSA, SSP DLLs have access to encrypted and plaintext passwords that are stored in Windows, such as any logged-on user's Domain password or smart card PINs. | update | 10 

|<<prebuilt-rule-8-17-4-lsass-memory-dump-creation, LSASS Memory Dump Creation>> | Identifies the creation of a Local Security Authority Subsystem Service (lsass.exe) default memory dump. This may indicate a credential access attempt via trusted system utilities such as Task Manager (taskmgr.exe) and SQL Dumper (sqldumper.exe) or known pentesting tools such as Dumpert and AndrewSpecial. | update | 312 

|<<prebuilt-rule-8-17-4-lsass-memory-dump-handle-access, LSASS Memory Dump Handle Access>> | Identifies handle requests for the Local Security Authority Subsystem Service (LSASS) object access with specific access masks that many tools with a capability to dump memory to disk use (0x1fffff, 0x1010, 0x120089). This rule is tool agnostic as it has been validated against a host of various LSASS dump tools such as SharpDump, Procdump, Mimikatz, Comsvcs etc. It detects this behavior at a low level and does not depend on a specific tool or dump file name. | update | 212 

|<<prebuilt-rule-8-17-4-lsass-process-access-via-windows-api, LSASS Process Access via Windows API>> | Identifies access attempts to the LSASS handle, which may indicate an attempt to dump credentials from LSASS memory. | update | 11 

|<<prebuilt-rule-8-17-4-potential-invoke-mimikatz-powershell-script, Potential Invoke-Mimikatz PowerShell Script>> | Mimikatz is a credential dumper capable of obtaining plaintext Windows account logins and passwords, along with many other features that make it useful for testing the security of networks. This rule detects Invoke-Mimikatz PowerShell script and alike. | update | 211 

|<<prebuilt-rule-8-17-4-network-logon-provider-registry-modification, Network Logon Provider Registry Modification>> | Identifies the modification of the network logon provider registry. Adversaries may register a rogue network logon provider module for persistence and/or credential access via intercepting the authentication credentials in clear text during user logon. | update | 214 

|<<prebuilt-rule-8-17-4-powershell-kerberos-ticket-dump, PowerShell Kerberos Ticket Dump>> | Detects PowerShell scripts that have the capability of dumping Kerberos tickets from LSA, which potentially indicates an attacker's attempt to acquire credentials for lateral movement. | update | 108 

|<<prebuilt-rule-8-17-4-potential-powershell-pass-the-hash-relay-script, Potential PowerShell Pass-the-Hash/Relay Script>> | Detects PowerShell scripts that can execute pass-the-hash (PtH) attacks, intercept and relay NTLM challenges, and carry out other man-in-the-middle (MitM) attacks. | update | 105 

|<<prebuilt-rule-8-17-4-powershell-script-with-veeam-credential-access-capabilities, PowerShell Script with Veeam Credential Access Capabilities>> | Identifies PowerShell scripts that can access and decrypt Veeam credentials stored in MSSQL databases. Attackers can use Veeam Credentials to target backups as part of destructive operations such as Ransomware attacks. | update | 104 

|<<prebuilt-rule-8-17-4-potential-credential-access-via-duplicatehandle-in-lsass, Potential Credential Access via DuplicateHandle in LSASS>> | Identifies suspicious access to an LSASS handle via DuplicateHandle from an unknown call trace module. This may indicate an attempt to bypass the NtOpenProcess API to evade detection and dump LSASS memory for credential access. | update | 309 

|<<prebuilt-rule-8-17-4-potential-local-ntlm-relay-via-http, Potential Local NTLM Relay via HTTP>> | Identifies attempt to coerce a local NTLM authentication via HTTP using the Windows Printer Spooler service as a target. An adversary may use this primitive in combination with other techniques to elevate privileges on a compromised system. | update | 312 

|<<prebuilt-rule-8-17-4-multiple-vault-web-credentials-read, Multiple Vault Web Credentials Read>> | Windows Credential Manager allows you to create, view, or delete saved credentials for signing into websites, connected applications, and networks. An adversary may abuse this to list or dump credentials stored in the Credential Manager for saved usernames and passwords. This may also be performed in preparation of lateral movement. | update | 112 

|<<prebuilt-rule-8-17-4-searching-for-saved-credentials-via-vaultcmd, Searching for Saved Credentials via VaultCmd>> | Windows Credential Manager allows you to create, view, or delete saved credentials for signing into websites, connected applications, and networks. An adversary may abuse this to list or dump credentials stored in the Credential Manager for saved usernames and passwords. This may also be performed in preparation of lateral movement. | update | 313 

|<<prebuilt-rule-8-17-4-sensitive-privilege-seenabledelegationprivilege-assigned-to-a-user, Sensitive Privilege SeEnableDelegationPrivilege assigned to a User>> | Identifies the assignment of the SeEnableDelegationPrivilege sensitive "user right" to a user. The SeEnableDelegationPrivilege "user right" enables computer and user accounts to be trusted for delegation. Attackers can abuse this right to compromise Active Directory accounts and elevate their privileges. | update | 214 

|<<prebuilt-rule-8-17-4-potential-shadow-credentials-added-to-ad-object, Potential Shadow Credentials added to AD Object>> | Identify the modification of the msDS-KeyCredentialLink attribute in an Active Directory Computer or User Object. Attackers can abuse control over the object and create a key pair, append to raw public key in the attribute, and obtain persistent and stealthy access to the target user or computer object. | update | 213 

|<<prebuilt-rule-8-17-4-user-account-exposed-to-kerberoasting, User account exposed to Kerberoasting>> | Detects when a user account has the servicePrincipalName attribute modified. Attackers can abuse write privileges over a user to configure Service Principle Names (SPNs) so that they can perform Kerberoasting. Administrators can also configure this for legitimate purposes, exposing the account to Kerberoasting. | update | 214 

|<<prebuilt-rule-8-17-4-potential-credential-access-via-renamed-com-services-dll, Potential Credential Access via Renamed COM+ Services DLL>> | Identifies suspicious renamed COMSVCS.DLL Image Load, which exports the MiniDump function that can be used to dump a process memory. This may indicate an attempt to dump LSASS memory while bypassing command-line based detection in preparation for credential access. | update | 209 

|<<prebuilt-rule-8-17-4-suspicious-lsass-process-access, Suspicious Lsass Process Access>> | Identifies access attempts to LSASS handle, this may indicate an attempt to dump credentials from Lsass memory. | update | 209 

|<<prebuilt-rule-8-17-4-potential-credential-access-via-lsass-memory-dump, Potential Credential Access via LSASS Memory Dump>> | Identifies suspicious access to LSASS handle from a call trace pointing to DBGHelp.dll or DBGCore.dll, which both export the MiniDumpWriteDump method that can be used to dump LSASS memory content in preparation for credential access. | update | 311 

|<<prebuilt-rule-8-17-4-potential-lsass-memory-dump-via-psscapturesnapshot, Potential LSASS Memory Dump via PssCaptureSnapShot>> | Identifies suspicious access to an LSASS handle via PssCaptureSnapShot where two successive process accesses are performed by the same process and target two different instances of LSASS. This may indicate an attempt to evade detection and dump LSASS memory for credential access. | update | 311 

|<<prebuilt-rule-8-17-4-suspicious-remote-registry-access-via-sebackupprivilege, Suspicious Remote Registry Access via SeBackupPrivilege>> | Identifies remote access to the registry using an account with Backup Operators group membership. This may indicate an attempt to exfiltrate credentials by dumping the Security Account Manager (SAM) registry hive in preparation for credential access and privileges elevation. | update | 212 

|<<prebuilt-rule-8-17-4-veeam-backup-library-loaded-by-unusual-process, Veeam Backup Library Loaded by Unusual Process>> | Identifies potential credential decrypt operations by PowerShell or unsigned processes using the Veeam.Backup.Common.dll library. Attackers can use Veeam Credentials to target backups as part of destructive operations such as Ransomware attacks. | update | 3 

|<<prebuilt-rule-8-17-4-potential-veeam-credential-access-command, Potential Veeam Credential Access Command>> | Identifies commands that can access and decrypt Veeam credentials stored in MSSQL databases. Attackers can use Veeam Credentials to target backups as part of destructive operations such as Ransomware attacks. | update | 204 

|<<prebuilt-rule-8-17-4-potential-lsass-clone-creation-via-psscapturesnapshot, Potential LSASS Clone Creation via PssCaptureSnapShot>> | Identifies the creation of an LSASS process clone via PssCaptureSnapShot where the parent process is the initial LSASS process instance. This may indicate an attempt to evade detection and dump LSASS memory for credential access. | update | 209 

|<<prebuilt-rule-8-17-4-ntds-dump-via-wbadmin, NTDS Dump via Wbadmin>> | Identifies the execution of wbadmin to access the NTDS.dit file in a domain controller. Attackers with privileges from groups like Backup Operators can abuse the utility to perform credential access and compromise the domain. | update | 204 

|<<prebuilt-rule-8-17-4-wireless-credential-dumping-using-netsh-command, Wireless Credential Dumping using Netsh Command>> | Identifies attempts to dump Wireless saved access keys in clear text using the Windows built-in utility Netsh. | update | 211 

|<<prebuilt-rule-8-17-4-adding-hidden-file-attribute-via-attrib, Adding Hidden File Attribute via Attrib>> | Adversaries can add the 'hidden' attribute to files to hide them from the user in an attempt to evade detection. | update | 315 

|<<prebuilt-rule-8-17-4-suspicious-antimalware-scan-interface-dll, Suspicious Antimalware Scan Interface DLL>> | Identifies the creation of the Antimalware Scan Interface (AMSI) DLL in an unusual location. This may indicate an attempt to bypass AMSI by loading a rogue AMSI module instead of the legit one. | update | 315 

|<<prebuilt-rule-8-17-4-potential-antimalware-scan-interface-bypass-via-powershell, Potential Antimalware Scan Interface Bypass via PowerShell>> | Identifies the execution of PowerShell script with keywords related to different Antimalware Scan Interface (AMSI) bypasses. An adversary may attempt first to disable AMSI before executing further malicious powershell scripts to evade detection. | update | 112 

|<<prebuilt-rule-8-17-4-sensitive-audit-policy-sub-category-disabled, Sensitive Audit Policy Sub-Category Disabled>> | Identifies attempts to disable auditing for some security sensitive audit policy sub-categories. This is often done by attackers in an attempt to evade detection and forensics on a system. | update | 2 

|<<prebuilt-rule-8-17-4-code-signing-policy-modification-through-built-in-tools, Code Signing Policy Modification Through Built-in tools>> | Identifies attempts to disable/modify the code signing policy through system native utilities. Code signing provides authenticity on a program, and grants the user with the ability to check whether the program has been tampered with. By allowing the execution of unsigned or self-signed code, threat actors can craft and execute malicious code. | update | 211 

|<<prebuilt-rule-8-17-4-code-signing-policy-modification-through-registry, Code Signing Policy Modification Through Registry>> | Identifies attempts to disable the code signing policy through the registry. Code signing provides authenticity on a program, and grants the user with the ability to check whether the program has been tampered with. By allowing the execution of unsigned or self-signed code, threat actors can craft and execute malicious code. | update | 212 

|<<prebuilt-rule-8-17-4-suspicious-communication-app-child-process, Suspicious Communication App Child Process>> | Identifies suspicious child processes of communications apps, which can indicate a potential masquerading as the communication app or the exploitation of a vulnerability on the application causing it to execute code. | update | 7 

|<<prebuilt-rule-8-17-4-windows-cryptoapi-spoofing-vulnerability-cve-2020-0601-curveball, Windows CryptoAPI Spoofing Vulnerability (CVE-2020-0601 - CurveBall)>> | A spoofing vulnerability exists in the way Windows CryptoAPI (Crypt32.dll) validates Elliptic Curve Cryptography (ECC) certificates. An attacker could exploit the vulnerability by using a spoofed code-signing certificate to sign a malicious executable, making it appear the file was from a trusted, legitimate source. | update | 208 

|<<prebuilt-rule-8-17-4-network-level-authentication-nla-disabled, Network-Level Authentication (NLA) Disabled>> | Identifies the attempt to disable Network-Level Authentication (NLA) via registry modification. Network Level Authentication (NLA) is a feature on Windows that provides an extra layer of security for Remote Desktop (RDP) connections, as it requires users to authenticate before allowing a full RDP session. Attackers can disable NLA to enable persistence methods that require access to the Windows sign-in screen without authenticating, such as Accessibility Features persistence methods, like Sticky Keys. | update | 204 

|<<prebuilt-rule-8-17-4-dns-over-https-enabled-via-registry, DNS-over-HTTPS Enabled via Registry>> | Identifies when a user enables DNS-over-HTTPS. This can be used to hide internet activity or the process of exfiltrating data. With this enabled, an organization will lose visibility into data such as query type, response, and originating IP, which are used to determine bad actors. | update | 312 

|<<prebuilt-rule-8-17-4-suspicious-net-code-compilation, Suspicious .NET Code Compilation>> | Identifies executions of .NET compilers with suspicious parent processes, which can indicate an attacker's attempt to compile code after delivery in order to bypass security mechanisms. | update | 313 

|<<prebuilt-rule-8-17-4-control-panel-process-with-unusual-arguments, Control Panel Process with Unusual Arguments>> | Identifies unusual instances of Control Panel with suspicious keywords or paths in the process command line value. Adversaries may abuse control.exe to proxy execution of malicious code. | update | 314 

|<<prebuilt-rule-8-17-4-imageload-via-windows-update-auto-update-client, ImageLoad via Windows Update Auto Update Client>> | Identifies abuse of the Windows Update Auto Update Client (wuauclt.exe) to load an arbitrary DLL. This behavior is used as a defense evasion technique to blend-in malicious activity with legitimate Windows software. | update | 315 

|<<prebuilt-rule-8-17-4-microsoft-build-engine-started-by-a-script-process, Microsoft Build Engine Started by a Script Process>> | An instance of MSBuild, the Microsoft Build Engine, was started by a script or the Windows command interpreter. This behavior is unusual and is sometimes used by malicious payloads. | update | 312 

|<<prebuilt-rule-8-17-4-microsoft-build-engine-started-by-a-system-process, Microsoft Build Engine Started by a System Process>> | An instance of MSBuild, the Microsoft Build Engine, was started by Explorer or the WMI (Windows Management Instrumentation) subsystem. This behavior is unusual and is sometimes used by malicious payloads. | update | 313 

|<<prebuilt-rule-8-17-4-microsoft-build-engine-using-an-alternate-name, Microsoft Build Engine Using an Alternate Name>> | An instance of MSBuild, the Microsoft Build Engine, was started after being renamed. This is uncommon behavior and may indicate an attempt to run unnoticed or undetected. | update | 214 

|<<prebuilt-rule-8-17-4-microsoft-build-engine-started-an-unusual-process, Microsoft Build Engine Started an Unusual Process>> | An instance of MSBuild, the Microsoft Build Engine, started a PowerShell script or the Visual C# Command Line Compiler. This technique is sometimes used to deploy a malicious payload using the Build Engine. | update | 315 

|<<prebuilt-rule-8-17-4-potential-dll-side-loading-via-trusted-microsoft-programs, Potential DLL Side-Loading via Trusted Microsoft Programs>> | Identifies an instance of a Windows trusted program that is known to be vulnerable to DLL Search Order Hijacking starting after being renamed or from a non-standard path. This is uncommon behavior and may indicate an attempt to evade defenses via side loading a malicious DLL within the memory space of one of those processes. | update | 212 

|<<prebuilt-rule-8-17-4-potential-dll-side-loading-via-microsoft-antimalware-service-executable, Potential DLL Side-Loading via Microsoft Antimalware Service Executable>> | Identifies a Windows trusted program that is known to be vulnerable to DLL Search Order Hijacking starting after being renamed or from a non-standard path. This is uncommon behavior and may indicate an attempt to evade defenses via side-loading a malicious DLL within the memory space of one of those processes. | update | 212 

|<<prebuilt-rule-8-17-4-executable-file-creation-with-multiple-extensions, Executable File Creation with Multiple Extensions>> | Masquerading can allow an adversary to evade defenses and better blend in with the environment. One way it occurs is when the name or location of a file is manipulated as a means of tricking a user into executing what they think is a benign file type but is actually executable code. | update | 310 

|<<prebuilt-rule-8-17-4-process-execution-from-an-unusual-directory, Process Execution from an Unusual Directory>> | Identifies process execution from suspicious default Windows directories. This is sometimes done by adversaries to hide malware in trusted paths. | update | 314 

|<<prebuilt-rule-8-17-4-encoded-executable-stored-in-the-registry, Encoded Executable Stored in the Registry>> | Identifies registry write modifications to hide an encoded portable executable. This could be indicative of adversary defense evasion by avoiding the storing of malicious content directly on disk. | update | 412 

|<<prebuilt-rule-8-17-4-process-injection-by-the-microsoft-build-engine, Process Injection by the Microsoft Build Engine>> | An instance of MSBuild, the Microsoft Build Engine, created a thread in another process. This technique is sometimes used to evade detection or elevate privileges. | update | 208 

|<<prebuilt-rule-8-17-4-installutil-process-making-network-connections, InstallUtil Process Making Network Connections>> | Identifies InstallUtil.exe making outbound network connections. This may indicate adversarial activity as InstallUtil is often leveraged by adversaries to execute code and evade detection. | update | 208 

|<<prebuilt-rule-8-17-4-execution-via-windows-command-debugging-utility, Execution via Windows Command Debugging Utility>> | An adversary can use the Windows command line debugging utility cdb.exe to execute commands or shellcode. This rule looks for those instances and where the cdb.exe binary is outside of the normal WindowsKit installation paths. | update | 103 

|<<prebuilt-rule-8-17-4-suspicious-endpoint-security-parent-process, Suspicious Endpoint Security Parent Process>> | A suspicious Endpoint Security parent process was detected. This may indicate a process hollowing or other form of code injection. | update | 314 

|<<prebuilt-rule-8-17-4-potential-masquerading-as-business-app-installer, Potential Masquerading as Business App Installer>> | Identifies executables with names resembling legitimate business applications but lacking signatures from the original developer. Attackers may trick users into downloading malicious executables that masquerade as legitimate applications via malicious ads, forum posts, and tutorials, effectively gaining initial access. | update | 5 

|<<prebuilt-rule-8-17-4-potential-masquerading-as-communication-apps, Potential Masquerading as Communication Apps>> | Identifies suspicious instances of communications apps, both unsigned and renamed ones, that can indicate an attempt to conceal malicious activity, bypass security features such as allowlists, or trick users into executing malware. | update | 7 

|<<prebuilt-rule-8-17-4-renamed-autoit-scripts-interpreter, Renamed AutoIt Scripts Interpreter>> | Identifies a suspicious AutoIt process execution. Malware written as an AutoIt script tends to rename the AutoIt executable to avoid detection. | update | 212 

|<<prebuilt-rule-8-17-4-suspicious-werfault-child-process, Suspicious WerFault Child Process>> | A suspicious WerFault child process was detected, which may indicate an attempt to run via the SilentProcessExit registry key manipulation. Verify process details such as command line, network connections and file writes. | update | 416 

|<<prebuilt-rule-8-17-4-program-files-directory-masquerading, Program Files Directory Masquerading>> | Identifies execution from a directory masquerading as the Windows Program Files directories. These paths are trusted and usually host trusted third party programs. An adversary may leverage masquerading, along with low privileges to bypass detections allowlisting those folders. | update | 313 

|<<prebuilt-rule-8-17-4-potential-windows-error-manager-masquerading, Potential Windows Error Manager Masquerading>> | Identifies suspicious instances of the Windows Error Reporting process (WerFault.exe or Wermgr.exe) with matching command-line and process executable values performing outgoing network connections. This may be indicative of a masquerading attempt to evade suspicious child process behavior detections. | update | 210 

|<<prebuilt-rule-8-17-4-network-connection-via-signed-binary, Network Connection via Signed Binary>> | Binaries signed with trusted digital certificates can execute on Windows systems protected by digital signature validation. Adversaries may use these binaries to 'live off the land' and execute malicious files that could bypass application allowlists and signature validation. | update | 209 

|<<prebuilt-rule-8-17-4-msbuild-making-network-connections, MsBuild Making Network Connections>> | Identifies MsBuild.exe making outbound network connections. This may indicate adversarial activity as MsBuild is often leveraged by adversaries to execute code and evade detection. | update | 211 

|<<prebuilt-rule-8-17-4-mshta-making-network-connections, Mshta Making Network Connections>> | Identifies Mshta.exe making outbound network connections. This may indicate adversarial activity, as Mshta is often leveraged by adversaries to execute malicious scripts and evade detection. | update | 209 

|<<prebuilt-rule-8-17-4-msiexec-service-child-process-with-network-connection, MsiExec Service Child Process With Network Connection>> | Identifies the execution of an MsiExec service child process followed by network or dns lookup activity. Adversaries may abuse Windows Installers for initial access and delivery of malware. | update | 202 

|<<prebuilt-rule-8-17-4-network-connection-via-msxsl, Network Connection via MsXsl>> | Identifies msxsl.exe making a network connection. This may indicate adversarial activity as msxsl.exe is often leveraged by adversaries to execute malicious scripts and evade detection. | update | 207 

|<<prebuilt-rule-8-17-4-unusual-network-activity-from-a-windows-system-binary, Unusual Network Activity from a Windows System Binary>> | Identifies network activity from unexpected system applications. This may indicate adversarial activity as these applications are often leveraged by adversaries to execute code and evade detection. | update | 214 

|<<prebuilt-rule-8-17-4-parent-process-pid-spoofing, Parent Process PID Spoofing>> | Identifies parent process spoofing used to thwart detection. Adversaries may spoof the parent process identifier (PPID) of a new process to evade process-monitoring defenses or to elevate privileges. | update | 108 

|<<prebuilt-rule-8-17-4-local-account-tokenfilter-policy-disabled, Local Account TokenFilter Policy Disabled>> | Identifies registry modification to the LocalAccountTokenFilterPolicy policy. If this value exists (which doesn't by default) and is set to 1, then remote connections from all local members of Administrators are granted full high-integrity tokens during negotiation. | update | 313 

|<<prebuilt-rule-8-17-4-suspicious-net-reflection-via-powershell, Suspicious .NET Reflection via PowerShell>> | Detects the use of Reflection.Assembly to load PEs and DLLs in memory in PowerShell scripts. Attackers use this method to load executables and DLLs without writing to the disk, bypassing security solutions. | update | 317 

|<<prebuilt-rule-8-17-4-powershell-suspicious-payload-encoded-and-compressed, PowerShell Suspicious Payload Encoded and Compressed>> | Identifies the use of .NET functionality for decompression and base64 decoding combined in PowerShell scripts, which malware and security tools heavily use to deobfuscate payloads and load them directly in memory to bypass defenses. | update | 315 

|<<prebuilt-rule-8-17-4-potential-powershell-obfuscated-script, Potential PowerShell Obfuscated Script>> | Identifies scripts that contain patterns and known methods that obfuscate PowerShell code. Attackers can use obfuscation techniques to bypass PowerShell security protections such as Antimalware Scan Interface (AMSI). | update | 105 

|<<prebuilt-rule-8-17-4-process-termination-followed-by-deletion, Process Termination followed by Deletion>> | Identifies a process termination event quickly followed by the deletion of its executable file. Malware tools and other non-native files dropped or created on a system by an adversary may leave traces to indicate to what occurred. Removal of these files can occur during an intrusion, or as part of a post-intrusion process to minimize the adversary's footprint. | update | 111 

|<<prebuilt-rule-8-17-4-suspicious-microsoft-diagnostics-wizard-execution, Suspicious Microsoft Diagnostics Wizard Execution>> | Identifies potential abuse of the Microsoft Diagnostics Troubleshooting Wizard (MSDT) to proxy malicious command or binary execution via malicious process arguments. | update | 211 

|<<prebuilt-rule-8-17-4-dns-global-query-block-list-modified-or-disabled, DNS Global Query Block List Modified or Disabled>> | Identifies changes to the DNS Global Query Block List (GQBL), a security feature that prevents the resolution of certain DNS names often exploited in attacks like WPAD spoofing. Attackers with certain privileges, such as DNSAdmins, can modify or disable the GQBL, allowing exploitation of hosts running WPAD with default settings for privilege escalation and lateral movement. | update | 204 

|<<prebuilt-rule-8-17-4-alternate-data-stream-creation-execution-at-volume-root-directory, Alternate Data Stream Creation/Execution at Volume Root Directory>> | Identifies the creation of an Alternate Data Stream (ADS) at a volume root directory, which can indicate the attempt to hide tools and malware, as ADSs created in this directory are not displayed by system utilities. | update | 202 

|<<prebuilt-rule-8-17-4-unusual-child-processes-of-rundll32, Unusual Child Processes of RunDLL32>> | Identifies child processes of unusual instances of RunDLL32 where the command line parameters were suspicious. Misuse of RunDLL32 could indicate malicious activity. | update | 209 

|<<prebuilt-rule-8-17-4-service-dacl-modification-via-sc-exe, Service DACL Modification via sc.exe>> | Identifies DACL modifications to deny access to a service, making it unstoppable, or hide it from system and users. | update | 205 

|<<prebuilt-rule-8-17-4-potential-windows-session-hijacking-via-ccmexec, Potential Windows Session Hijacking via CcmExec>> | This detection rule identifies when 'SCNotification.exe' loads an untrusted DLL, which is a potential indicator of an attacker attempt to hijack/impersonate a Windows user session. | update | 2 

|<<prebuilt-rule-8-17-4-scheduled-tasks-at-command-enabled, Scheduled Tasks AT Command Enabled>> | Identifies attempts to enable the Windows scheduled tasks AT command via the registry. Attackers may use this method to move laterally or persist locally. The AT command has been deprecated since Windows 8 and Windows Server 2012, but still exists for backwards compatibility. | update | 311 

|<<prebuilt-rule-8-17-4-script-execution-via-microsoft-html-application, Script Execution via Microsoft HTML Application>> | Identifies the execution of scripts via HTML applications using Windows utilities rundll32.exe or mshta.exe. Adversaries may bypass process and/or signature-based defenses by proxying execution of malicious content with signed binaries. | update | 202 

|<<prebuilt-rule-8-17-4-sip-provider-modification, SIP Provider Modification>> | Identifies modifications to the registered Subject Interface Package (SIP) providers. SIP providers are used by the Windows cryptographic system to validate file signatures on the system. This may be an attempt to bypass signature validation checks or inject code into critical processes. | update | 311 

|<<prebuilt-rule-8-17-4-solarwinds-process-disabling-services-via-registry, SolarWinds Process Disabling Services via Registry>> | Identifies a SolarWinds binary modifying the start type of a service to be disabled. An adversary may abuse this technique to manipulate relevant security services. | update | 312 

|<<prebuilt-rule-8-17-4-suspicious-certutil-commands, Suspicious CertUtil Commands>> | Identifies suspicious commands being used with certutil.exe. CertUtil is a native Windows component which is part of Certificate Services. CertUtil is often abused by attackers to live off the land for stealthier command and control or data exfiltration. | update | 312 

|<<prebuilt-rule-8-17-4-suspicious-execution-from-a-mounted-device, Suspicious Execution from a Mounted Device>> | Identifies when a script interpreter or signed binary is launched via a non-standard working directory. An attacker may use this technique to evade defenses. | update | 209 

|<<prebuilt-rule-8-17-4-suspicious-managed-code-hosting-process, Suspicious Managed Code Hosting Process>> | Identifies a suspicious managed code hosting process which could indicate code injection or other form of suspicious code execution. | update | 310 

|<<prebuilt-rule-8-17-4-suspicious-process-access-via-direct-system-call, Suspicious Process Access via Direct System Call>> | Identifies suspicious process access events from an unknown memory region. Endpoint security solutions usually hook userland Windows APIs in order to decide if the code that is being executed is malicious or not. It's possible to bypass hooked functions by writing malicious functions that call syscalls directly. | update | 312 

|<<prebuilt-rule-8-17-4-suspicious-script-object-execution, Suspicious Script Object Execution>> | Identifies scrobj.dll loaded into unusual Microsoft processes. This usually means a malicious scriptlet is being executed in the target process. | update | 210 

|<<prebuilt-rule-8-17-4-renamed-utility-executed-with-short-program-name, Renamed Utility Executed with Short Program Name>> | Identifies the execution of a process with a single character process name, differing from the original file name. This is often done by adversaries while staging, executing temporary utilities, or trying to bypass security detections based on the process name. | update | 211 

|<<prebuilt-rule-8-17-4-suspicious-wmic-xsl-script-execution, Suspicious WMIC XSL Script Execution>> | Identifies WMIC allowlist bypass techniques by alerting on suspicious execution of scripts. When WMIC loads scripting libraries it may be indicative of an allowlist bypass. | update | 210 

|<<prebuilt-rule-8-17-4-suspicious-zoom-child-process, Suspicious Zoom Child Process>> | A suspicious Zoom child process was detected, which may indicate an attempt to run unnoticed. Verify process details such as command line, network connections, file writes and associated file signature details as well. | update | 417 

|<<prebuilt-rule-8-17-4-unusual-executable-file-creation-by-a-system-critical-process, Unusual Executable File Creation by a System Critical Process>> | Identifies an unexpected executable file being created or modified by a Windows system critical process, which may indicate activity related to remote code execution or other forms of exploitation. | update | 312 

|<<prebuilt-rule-8-17-4-file-creation-time-changed, File Creation Time Changed>> | Identifies modification of a file creation time. Adversaries may modify file time attributes to blend malicious content with existing files. Timestomping is a technique that modifies the timestamps of a file often to mimic files that are in trusted directories. | update | 106 

|<<prebuilt-rule-8-17-4-unsigned-dll-side-loading-from-a-suspicious-folder, Unsigned DLL Side-Loading from a Suspicious Folder>> | Identifies a Windows trusted program running from locations often abused by adversaries to masquerade as a trusted program and loading a recently dropped DLL. This behavior may indicate an attempt to evade defenses via side-loading a malicious DLL within the memory space of a signed processes. | update | 10 

|<<prebuilt-rule-8-17-4-untrusted-driver-loaded, Untrusted Driver Loaded>> | Identifies attempt to load an untrusted driver. Adversaries may modify code signing policies to enable execution of unsigned or self-signed code. | update | 10 

|<<prebuilt-rule-8-17-4-unusual-file-creation-alternate-data-stream, Unusual File Creation - Alternate Data Stream>> | Identifies suspicious creation of Alternate Data Streams on highly targeted files. This is uncommon for legitimate files and sometimes done by adversaries to hide malware. | update | 316 

|<<prebuilt-rule-8-17-4-unusual-process-execution-path-alternate-data-stream, Unusual Process Execution Path - Alternate Data Stream>> | Identifies processes running from an Alternate Data Stream. This is uncommon for legitimate processes and sometimes done by adversaries to hide malware. | update | 311 

|<<prebuilt-rule-8-17-4-unusual-network-connection-via-dllhost, Unusual Network Connection via DllHost>> | Identifies unusual instances of dllhost.exe making outbound network connections. This may indicate adversarial Command and Control activity. | update | 208 

|<<prebuilt-rule-8-17-4-unusual-child-process-from-a-system-virtual-process, Unusual Child Process from a System Virtual Process>> | Identifies a suspicious child process of the Windows virtual system process, which could indicate code injection. | update | 313 

|<<prebuilt-rule-8-17-4-potential-evasion-via-filter-manager, Potential Evasion via Filter Manager>> | The Filter Manager Control Program (fltMC.exe) binary may be abused by adversaries to unload a filter driver and evade defenses. | update | 214 

|<<prebuilt-rule-8-17-4-potential-evasion-via-windows-filtering-platform, Potential Evasion via Windows Filtering Platform>> | Identifies multiple Windows Filtering Platform block events and where the process name is related to an endpoint security software. Adversaries may add malicious WFP rules to prevent Endpoint security from sending telemetry. | update | 105 

|<<prebuilt-rule-8-17-4-suspicious-execution-via-windows-subsystem-for-linux, Suspicious Execution via Windows Subsystem for Linux>> | Detects Linux Bash commands from the the Windows Subsystem for Linux. Adversaries may enable and use WSL for Linux to avoid detection. | update | 208 

|<<prebuilt-rule-8-17-4-execution-via-windows-subsystem-for-linux, Execution via Windows Subsystem for Linux>> | Detects attempts to execute a program on the host from the Windows Subsystem for Linux. Adversaries may enable and use WSL for Linux to avoid detection. | update | 209 

|<<prebuilt-rule-8-17-4-windows-subsystem-for-linux-enabled-via-dism-utility, Windows Subsystem for Linux Enabled via Dism Utility>> | Detects attempts to enable the Windows Subsystem for Linux using Microsoft Dism utility. Adversaries may enable and use WSL for Linux to avoid detection. | update | 210 

|<<prebuilt-rule-8-17-4-host-files-system-changes-via-windows-subsystem-for-linux, Host Files System Changes via Windows Subsystem for Linux>> | Detects files creation and modification on the host system from the the Windows Subsystem for Linux. Adversaries may enable and use WSL for Linux to avoid detection. | update | 108 

|<<prebuilt-rule-8-17-4-attempt-to-install-kali-linux-via-wsl, Attempt to Install Kali Linux via WSL>> | Detects attempts to install or use Kali Linux via Windows Subsystem for Linux. Adversaries may enable and use WSL for Linux to avoid detection. | update | 210 

|<<prebuilt-rule-8-17-4-windows-subsystem-for-linux-distribution-installed, Windows Subsystem for Linux Distribution Installed>> | Detects changes to the registry that indicates the install of a new Windows Subsystem for Linux distribution by name. Adversaries may enable and use WSL for Linux to avoid detection. | update | 209 

|<<prebuilt-rule-8-17-4-potential-enumeration-via-active-directory-web-service, Potential Enumeration via Active Directory Web Service>> | Identifies processes loading Active Directory related modules followed by a network connection to the ADWS dedicated TCP port. Adversaries may abuse the ADWS Windows service that allows Active Directory to be queried via this web service. | update | 3 

|<<prebuilt-rule-8-17-4-group-policy-discovery-via-microsoft-gpresult-utility, Group Policy Discovery via Microsoft GPResult Utility>> | Detects the usage of gpresult.exe to query group policy objects. Attackers may query group policy objects during the reconnaissance phase after compromising a system to gain a better understanding of the active directory environment and possible methods to escalate privileges or move laterally. | update | 211 

|<<prebuilt-rule-8-17-4-suspicious-access-to-ldap-attributes, Suspicious Access to LDAP Attributes>> | Identify read access to a high number of Active Directory object attributes. The knowledge of objects properties can help adversaries find vulnerabilities, elevate privileges or collect sensitive information. | update | 103 

|<<prebuilt-rule-8-17-4-enumeration-of-privileged-local-groups-membership, Enumeration of Privileged Local Groups Membership>> | Identifies instances of an unusual process enumerating built-in Windows privileged local groups membership like Administrators or Remote Desktop users. | update | 416 

|<<prebuilt-rule-8-17-4-unusual-discovery-signal-alert-with-unusual-process-command-line, Unusual Discovery Signal Alert with Unusual Process Command Line>> | This rule leverages alert data from various Discovery building block rules to alert on signals with unusual unique host.id, user.id and process.command_line entries. | update | 2 

|<<prebuilt-rule-8-17-4-unusual-discovery-signal-alert-with-unusual-process-executable, Unusual Discovery Signal Alert with Unusual Process Executable>> | This rule leverages Discovery building block rule alert data to alert on signals with unusual unique host.id, user.id and process.executable entries. | update | 3 

|<<prebuilt-rule-8-17-4-command-execution-via-solarwinds-process, Command Execution via SolarWinds Process>> | A suspicious SolarWinds child process (Cmd.exe or Powershell.exe) was detected. | update | 314 

|<<prebuilt-rule-8-17-4-suspicious-solarwinds-child-process, Suspicious SolarWinds Child Process>> | A suspicious SolarWinds child process was detected, which may indicate an attempt to execute malicious programs. | update | 211 

|<<prebuilt-rule-8-17-4-execution-of-com-object-via-xwizard, Execution of COM object via Xwizard>> | Windows Component Object Model (COM) is an inter-process communication (IPC) component of the native Windows application programming interface (API) that enables interaction between software objects or executable code. Xwizard can be used to run a COM object created in registry to evade defensive counter measures. | update | 313 

|<<prebuilt-rule-8-17-4-command-prompt-network-connection, Command Prompt Network Connection>> | Identifies cmd.exe making a network connection. Adversaries could abuse cmd.exe to download or execute malware from a remote URL. | update | 209 

|<<prebuilt-rule-8-17-4-svchost-spawning-cmd, Svchost spawning Cmd>> | Identifies a suspicious parent child process relationship with cmd.exe descending from svchost.exe | update | 419 

|<<prebuilt-rule-8-17-4-unusual-parent-process-for-cmd-exe, Unusual Parent Process for cmd.exe>> | Identifies a suspicious parent child process relationship with cmd.exe descending from an unusual process. | update | 414 

|<<prebuilt-rule-8-17-4-command-shell-activity-started-via-rundll32, Command Shell Activity Started via RunDLL32>> | Identifies command shell activity started via RunDLL32, which is commonly abused by attackers to host malicious code. | update | 311 

|<<prebuilt-rule-8-17-4-delayed-execution-via-ping, Delayed Execution via Ping>> | Identifies the execution of commonly abused Windows utilities via a delayed Ping execution. This behavior is often observed during malware installation and is consistent with an attacker attempting to evade detection. | update | 4 

|<<prebuilt-rule-8-17-4-downloaded-shortcut-files, Downloaded Shortcut Files>> | Identifies .lnk shortcut file downloaded from outside the local network. These shortcut files are commonly used in phishing campaigns. | update | 4 

|<<prebuilt-rule-8-17-4-downloaded-url-files, Downloaded URL Files>> | Identifies .url shortcut files downloaded from outside the local network. These shortcut files are commonly used in phishing campaigns. | update | 4 

|<<prebuilt-rule-8-17-4-enumeration-command-spawned-via-wmiprvse, Enumeration Command Spawned via WMIPrvSE>> | Identifies native Windows host and network enumeration commands spawned by the Windows Management Instrumentation Provider Service (WMIPrvSE). | update | 315 

|<<prebuilt-rule-8-17-4-execution-from-unusual-directory-command-line, Execution from Unusual Directory - Command Line>> | Identifies process execution from suspicious default Windows directories. This may be abused by adversaries to hide malware in trusted paths. | update | 315 

|<<prebuilt-rule-8-17-4-network-connection-via-compiled-html-file, Network Connection via Compiled HTML File>> | Compiled HTML files (.chm) are commonly distributed as part of the Microsoft HTML Help system. Adversaries may conceal malicious code in a CHM file and deliver it to a victim for execution. CHM content is loaded by the HTML Help executable program (hh.exe). | update | 209 

|<<prebuilt-rule-8-17-4-potential-foxmail-exploitation, Potential Foxmail Exploitation>> | Identifies the Foxmail client spawning a child process with argument pointing to the Foxmail temp directory. This may indicate the successful exploitation of a Foxmail vulnerability for initial access and execution via a malicious email. | update | 203 

|<<prebuilt-rule-8-17-4-unusual-execution-via-microsoft-common-console-file, Unusual Execution via Microsoft Common Console File>> | Identifies the execution of a child process from a Microsoft Common Console file. Adversaries may embed a malicious command in an MSC file in order to trick victims into executing malicious commands. | update | 202 

|<<prebuilt-rule-8-17-4-wps-office-exploitation-via-dll-hijack, WPS Office Exploitation via DLL Hijack>> | Identifies the load of a remote library by the WPS Office promecefpluginhost.exe executable. This may indicate the successful exploitation of CVE-2024-7262 or CVE-2024-7263 via DLL hijack abusing the ksoqing custom protocol handler. | update | 102 

|<<prebuilt-rule-8-17-4-mofcomp-activity, Mofcomp Activity>> | Managed Object Format (MOF) files can be compiled locally or remotely through mofcomp.exe. Attackers may leverage MOF files to build their own namespaces and classes into the Windows Management Instrumentation (WMI) repository, or establish persistence using WMI Event Subscription. | update | 5 

|<<prebuilt-rule-8-17-4-potential-powershell-hacktool-script-by-author, Potential PowerShell HackTool Script by Author>> | Detects known PowerShell offensive tooling author's name in PowerShell scripts. Attackers commonly use out-of-the-box offensive tools without modifying the code, which may still contain the author artifacts. This rule identifies common author handles found in popular PowerShell scripts used for red team exercises. | update | 105 

|<<prebuilt-rule-8-17-4-potential-powershell-hacktool-script-by-function-names, Potential PowerShell HackTool Script by Function Names>> | Detects known PowerShell offensive tooling functions names in PowerShell scripts. Attackers commonly use out-of-the-box offensive tools without modifying the code. This rule aim is to take advantage of that. | update | 214 

|<<prebuilt-rule-8-17-4-suspicious-portable-executable-encoded-in-powershell-script, Suspicious Portable Executable Encoded in Powershell Script>> | Detects the presence of a portable executable (PE) in a PowerShell script by looking for its encoded header. Attackers embed PEs into PowerShell scripts to inject them into memory, avoiding defences by not writing to disk. | update | 213 

|<<prebuilt-rule-8-17-4-powershell-psreflect-script, PowerShell PSReflect Script>> | Detects the use of PSReflect in PowerShell scripts. Attackers leverage PSReflect as a library that enables PowerShell to access win32 API functions. | update | 314 

|<<prebuilt-rule-8-17-4-command-and-scripting-interpreter-via-windows-scripts, Command and Scripting Interpreter via Windows Scripts>> | Identifies PowerShell.exe or Cmd.exe execution spawning from Windows Script Host processes Wscript.exe. | update | 202 

|<<prebuilt-rule-8-17-4-network-connection-via-registration-utility, Network Connection via Registration Utility>> | Identifies the native Windows tools regsvr32.exe, regsvr64.exe, RegSvcs.exe, or RegAsm.exe making a network connection. This may be indicative of an attacker bypassing allowlists or running arbitrary scripts via a signed Microsoft binary. | update | 209 

|<<prebuilt-rule-8-17-4-outbound-scheduled-task-activity-via-powershell, Outbound Scheduled Task Activity via PowerShell>> | Identifies the PowerShell process loading the Task Scheduler COM DLL followed by an outbound RPC network connection within a short time period. This may indicate lateral movement or remote discovery via scheduled tasks. | update | 210 

|<<prebuilt-rule-8-17-4-execution-via-local-sxs-shared-module, Execution via local SxS Shared Module>> | Identifies the creation, change, or deletion of a DLL module within a Windows SxS local folder. Adversaries may abuse shared modules to execute malicious payloads by instructing the Windows module loader to load DLLs from arbitrary local paths. | update | 309 

|<<prebuilt-rule-8-17-4-suspicious-cmd-execution-via-wmi, Suspicious Cmd Execution via WMI>> | Identifies suspicious command execution (cmd) via Windows Management Instrumentation (WMI) on a remote host. This could be indicative of adversary lateral movement. | update | 315 

|<<prebuilt-rule-8-17-4-suspicious-wmi-image-load-from-ms-office, Suspicious WMI Image Load from MS Office>> | Identifies a suspicious image load (wmiutils.dll) from Microsoft Office processes. This behavior may indicate adversarial activity where child processes are spawned via Windows Management Instrumentation (WMI). This technique can be used to execute code and evade traditional parent/child processes spawned from Microsoft Office products. | update | 209 

|<<prebuilt-rule-8-17-4-process-activity-via-compiled-html-file, Process Activity via Compiled HTML File>> | Compiled HTML files (.chm) are commonly distributed as part of the Microsoft HTML Help system. Adversaries may conceal malicious code in a CHM file and deliver it to a victim for execution. CHM content is loaded by the HTML Help executable program (hh.exe). | update | 313 

|<<prebuilt-rule-8-17-4-microsoft-management-console-file-from-unusual-path, Microsoft Management Console File from Unusual Path>> | Identifies attempts to open a Microsoft Management Console File from untrusted paths. Adversaries may use MSC files for initial access and execution. | update | 308 

|<<prebuilt-rule-8-17-4-suspicious-windows-command-shell-arguments, Suspicious Windows Command Shell Arguments>> | Identifies the execution of the Windows Command Shell process (cmd.exe) with suspicious argument values. This behavior is often observed during malware installation. | update | 202 

|<<prebuilt-rule-8-17-4-suspicious-windows-powershell-arguments, Suspicious Windows Powershell Arguments>> | Identifies the execution of PowerShell with suspicious argument values. This behavior is often observed during malware installation leveraging PowerShell. | update | 203 

|<<prebuilt-rule-8-17-4-rare-smb-connection-to-the-internet, Rare SMB Connection to the Internet>> | This rule detects rare internet network connections via the SMB protocol. SMB is commonly used to leak NTLM credentials via rogue UNC path injection. | update | 209 

|<<prebuilt-rule-8-17-4-suspicious-html-file-creation, Suspicious HTML File Creation>> | Identifies the execution of a browser process to open an HTML file with high entropy and size. Adversaries may smuggle data and files past content filters by hiding malicious payloads inside of seemingly benign HTML files. | update | 109 

|<<prebuilt-rule-8-17-4-suspicious-execution-from-inet-cache, Suspicious Execution from INET Cache>> | Identifies the execution of a process with arguments pointing to the INetCache Folder. Adversaries may deliver malicious content via WININET during initial access. | update | 205 

|<<prebuilt-rule-8-17-4-execution-from-a-removable-media-with-network-connection, Execution from a Removable Media with Network Connection>> | Identifies process execution from a removable media and by an unusual process. Adversaries may move onto systems, possibly those on disconnected or air-gapped networks, by copying malware to removable media and taking advantage of Autorun features when the media is inserted into a system and executes. | update | 4 

|<<prebuilt-rule-8-17-4-potential-remote-file-execution-via-msiexec, Potential Remote File Execution via MSIEXEC>> | Identifies the execution of the built-in Windows Installer, msiexec.exe, to install a remote package. Adversaries may abuse msiexec.exe to launch local or network accessible MSI files. | update | 4 

|<<prebuilt-rule-8-17-4-suspicious-execution-via-microsoft-office-add-ins, Suspicious Execution via Microsoft Office Add-Ins>> | Identifies execution of common Microsoft Office applications to launch an Office Add-In from a suspicious path or with an unusual parent process. This may indicate an attempt to get initial access via a malicious phishing MS Office Add-In. | update | 206 

|<<prebuilt-rule-8-17-4-first-time-seen-removable-device, First Time Seen Removable Device>> | Identifies newly seen removable devices by device friendly name using registry modification events. While this activity is not inherently malicious, analysts can use those events to aid monitoring for data exfiltration over those devices. | update | 210 

|<<prebuilt-rule-8-17-4-suspicious-jetbrains-teamcity-child-process, Suspicious JetBrains TeamCity Child Process>> | Identifies suspicious processes being spawned by the JetBrain TeamCity process. This activity could be related to JetBrains remote code execution vulnerabilities. | update | 204 

|<<prebuilt-rule-8-17-4-remote-desktop-file-opened-from-suspicious-path, Remote Desktop File Opened from Suspicious Path>> | Identifies attempts to open a remote desktop file from suspicious paths. Adversaries may abuse RDP files for initial access. | update | 2 

|<<prebuilt-rule-8-17-4-windows-script-interpreter-executing-process-via-wmi, Windows Script Interpreter Executing Process via WMI>> | Identifies use of the built-in Windows script interpreters (cscript.exe or wscript.exe) being used to execute a process via Windows Management Instrumentation (WMI). This may be indicative of malicious activity. | update | 211 

|<<prebuilt-rule-8-17-4-microsoft-exchange-server-um-writing-suspicious-files, Microsoft Exchange Server UM Writing Suspicious Files>> | Identifies suspicious files being written by the Microsoft Exchange Server Unified Messaging (UM) service. This activity has been observed exploiting CVE-2021-26858. | update | 309 

|<<prebuilt-rule-8-17-4-microsoft-exchange-server-um-spawning-suspicious-processes, Microsoft Exchange Server UM Spawning Suspicious Processes>> | Identifies suspicious processes being spawned by the Microsoft Exchange Server Unified Messaging (UM) service. This activity has been observed exploiting CVE-2021-26857. | update | 312 

|<<prebuilt-rule-8-17-4-microsoft-exchange-worker-spawning-suspicious-processes, Microsoft Exchange Worker Spawning Suspicious Processes>> | Identifies suspicious processes being spawned by the Microsoft Exchange Server worker process (w3wp). This activity may indicate exploitation activity or access to an existing web shell backdoor. | update | 310 

|<<prebuilt-rule-8-17-4-suspicious-explorer-child-process, Suspicious Explorer Child Process>> | Identifies a suspicious Windows explorer child process. Explorer.exe can be abused to launch malicious scripts or executables from a trusted parent process. | update | 310 

|<<prebuilt-rule-8-17-4-screenconnect-server-spawning-suspicious-processes, ScreenConnect Server Spawning Suspicious Processes>> | Identifies suspicious processes being spawned by the ScreenConnect server process (ScreenConnect.Service.exe). This activity may indicate exploitation activity or access to an existing web shell backdoor. | update | 204 

|<<prebuilt-rule-8-17-4-remote-xsl-script-execution-via-com, Remote XSL Script Execution via COM>> | Identifies the execution of a hosted XSL script using the Microsoft.XMLDOM COM interface via Microsoft Office processes. This behavior may indicate adversarial activity to execute malicious JScript or VBScript on the system. | update | 4 

|<<prebuilt-rule-8-17-4-potential-pass-the-hash-pth-attempt, Potential Pass-the-Hash (PtH) Attempt>> | Adversaries may pass the hash using stolen password hashes to move laterally within an environment, bypassing normal system access controls. Pass the hash (PtH) is a method of authenticating as a user without having access to the user's cleartext password. | update | 107 

|<<prebuilt-rule-8-17-4-service-command-lateral-movement, Service Command Lateral Movement>> | Identifies use of sc.exe to create, modify, or start services on remote hosts. This could be indicative of adversary lateral movement but will be noisy if commonly done by admins. | update | 208 

|<<prebuilt-rule-8-17-4-incoming-dcom-lateral-movement-via-mshta, Incoming DCOM Lateral Movement via MSHTA>> | Identifies the use of Distributed Component Object Model (DCOM) to execute commands from a remote host, which are launched via the HTA Application COM Object. This behavior may indicate an attacker abusing a DCOM application to move laterally while attempting to evade detection. | update | 208 

|<<prebuilt-rule-8-17-4-incoming-dcom-lateral-movement-with-mmc, Incoming DCOM Lateral Movement with MMC>> | Identifies the use of Distributed Component Object Model (DCOM) to run commands from a remote host, which are launched via the MMC20 Application COM Object. This behavior may indicate an attacker abusing a DCOM application to move laterally. | update | 209 

|<<prebuilt-rule-8-17-4-incoming-dcom-lateral-movement-with-shellbrowserwindow-or-shellwindows, Incoming DCOM Lateral Movement with ShellBrowserWindow or ShellWindows>> | Identifies use of Distributed Component Object Model (DCOM) to run commands from a remote host, which are launched via the ShellBrowserWindow or ShellWindows Application COM Object. This behavior may indicate an attacker abusing a DCOM application to stealthily move laterally. | update | 208 

|<<prebuilt-rule-8-17-4-nullsessionpipe-registry-modification, NullSessionPipe Registry Modification>> | Identifies NullSessionPipe registry modifications that specify which pipes can be accessed anonymously. This could be indicative of adversary lateral movement preparation by making the added pipe available to everyone. | update | 311 

|<<prebuilt-rule-8-17-4-smb-connections-via-lolbin-or-untrusted-process, SMB Connections via LOLBin or Untrusted Process>> | Identifies potentially suspicious processes that are not trusted or living-off-the-land binaries (LOLBin) making Server Message Block (SMB) network connections over port 445. Windows File Sharing is typically implemented over SMB, which communicates between hosts using port 445. Legitimate connections are generally established by the kernel (PID 4). This rule helps to detect processes that might be port scanners, exploits, or user-level processes attempting lateral movement within the network by leveraging SMB connections. | update | 113 

|<<prebuilt-rule-8-17-4-potential-remote-desktop-shadowing-activity, Potential Remote Desktop Shadowing Activity>> | Identifies the modification of the Remote Desktop Protocol (RDP) Shadow registry or the execution of processes indicative of an active RDP shadowing session. An adversary may abuse the RDP Shadowing feature to spy on or control other users active RDP sessions. | update | 310 

|<<prebuilt-rule-8-17-4-execution-via-tsclient-mountpoint, Execution via TSClient Mountpoint>> | Identifies execution from the Remote Desktop Protocol (RDP) shared mountpoint tsclient on the target host. This may indicate a lateral movement attempt. | update | 314 

|<<prebuilt-rule-8-17-4-remote-execution-via-file-shares, Remote Execution via File Shares>> | Identifies the execution of a file that was created by the virtual system process. This may indicate lateral movement via network file shares. | update | 116 

|<<prebuilt-rule-8-17-4-incoming-execution-via-winrm-remote-shell, Incoming Execution via WinRM Remote Shell>> | Identifies remote execution via Windows Remote Management (WinRM) remote shell on a target host. This could be an indication of lateral movement. | update | 209 

|<<prebuilt-rule-8-17-4-wmi-incoming-lateral-movement, WMI Incoming Lateral Movement>> | Identifies processes executed via Windows Management Instrumentation (WMI) on a remote host. This could be indicative of adversary lateral movement, but could be noisy if administrators use WMI to remotely manage hosts. | update | 211 

|<<prebuilt-rule-8-17-4-mounting-hidden-or-webdav-remote-shares, Mounting Hidden or WebDav Remote Shares>> | Identifies the use of net.exe to mount a WebDav or hidden remote share. This may indicate lateral movement or preparation for data exfiltration. | update | 312 

|<<prebuilt-rule-8-17-4-incoming-execution-via-powershell-remoting, Incoming Execution via PowerShell Remoting>> | Identifies remote execution via Windows PowerShell remoting. Windows PowerShell remoting allows a user to run any Windows PowerShell command on one or more remote computers. This could be an indication of lateral movement. | update | 210 

|<<prebuilt-rule-8-17-4-potential-sharprdp-behavior, Potential SharpRDP Behavior>> | Identifies potential behavior of SharpRDP, which is a tool that can be used to perform authenticated command execution against a remote target via Remote Desktop Protocol (RDP) for the purposes of lateral movement. | update | 109 

|<<prebuilt-rule-8-17-4-remote-file-copy-to-a-hidden-share, Remote File Copy to a Hidden Share>> | Identifies a remote file copy attempt to a hidden network share. This may indicate lateral movement or data staging activity. | update | 313 

|<<prebuilt-rule-8-17-4-remote-windows-service-installed, Remote Windows Service Installed>> | Identifies a network logon followed by Windows service creation with same LogonId. This could be indicative of lateral movement, but will be noisy if commonly done by administrators." | update | 108 

|<<prebuilt-rule-8-17-4-remotely-started-services-via-rpc, Remotely Started Services via RPC>> | Identifies remote execution of Windows services over remote procedure call (RPC). This could be indicative of lateral movement, but will be noisy if commonly done by administrators. | update | 214 

|<<prebuilt-rule-8-17-4-remote-scheduled-task-creation-via-rpc, Remote Scheduled Task Creation via RPC>> | Identifies scheduled task creation from a remote source. This could be indicative of adversary lateral movement. | update | 110 

|<<prebuilt-rule-8-17-4-suspicious-rdp-activex-client-loaded, Suspicious RDP ActiveX Client Loaded>> | Identifies suspicious Image Loading of the Remote Desktop Services ActiveX Client (mstscax), this may indicate the presence of RDP lateral movement capability. | update | 211 

|<<prebuilt-rule-8-17-4-unusual-file-modification-by-dns-exe, Unusual File Modification by dns.exe>> | Identifies an unexpected file being modified by dns.exe, the process responsible for Windows DNS Server services, which may indicate activity related to remote code execution or other forms of exploitation. | update | 212 

|<<prebuilt-rule-8-17-4-lateral-movement-via-startup-folder, Lateral Movement via Startup Folder>> | Identifies suspicious file creations in the startup folder of a remote system. An adversary could abuse this to move laterally by dropping a malicious script or executable that will be executed after a reboot or user logon. | update | 310 

|<<prebuilt-rule-8-17-4-potential-wsus-abuse-for-lateral-movement, Potential WSUS Abuse for Lateral Movement>> | Identifies a potential Windows Server Update Services (WSUS) abuse to execute psexec to enable for lateral movement. WSUS is limited to executing Microsoft signed binaries, which limits the executables that can be used to tools published by Microsoft. | update | 206 

|<<prebuilt-rule-8-17-4-adminsdholder-backdoor, AdminSDHolder Backdoor>> | Detects modifications in the AdminSDHolder object. Attackers can abuse the SDProp process to implement a persistent backdoor in Active Directory. SDProp compares the permissions on protected objects with those defined on the AdminSDHolder object. If the permissions on any of the protected accounts and groups do not match, the permissions on the protected accounts and groups are reset to match those of the domain's AdminSDHolder object, regaining their Administrative Privileges. | update | 211 

|<<prebuilt-rule-8-17-4-adobe-hijack-persistence, Adobe Hijack Persistence>> | Detects writing executable files that will be automatically launched by Adobe on launch. | update | 415 

|<<prebuilt-rule-8-17-4-installation-of-custom-shim-databases, Installation of Custom Shim Databases>> | Identifies the installation of custom Application Compatibility Shim databases. This Windows functionality has been abused by attackers to stealthily gain persistence and arbitrary code execution in legitimate Windows processes. | update | 310 

|<<prebuilt-rule-8-17-4-registry-persistence-via-appcert-dll, Registry Persistence via AppCert DLL>> | Detects attempts to maintain persistence by creating registry keys using AppCert DLLs. AppCert DLLs are loaded by every process using the common API functions to create processes. | update | 413 

|<<prebuilt-rule-8-17-4-registry-persistence-via-appinit-dll, Registry Persistence via AppInit DLL>> | AppInit DLLs are dynamic-link libraries (DLLs) that are loaded into every process that creates a user interface (loads user32.dll) on Microsoft Windows operating systems. The AppInit DLL mechanism is used to load custom code into user-mode processes, allowing for the customization of the user interface and the behavior of Windows-based applications. Attackers who add those DLLs to the registry locations can execute code with elevated privileges, similar to process injection, and provide a solid and constant persistence on the machine. | update | 312 

|<<prebuilt-rule-8-17-4-browser-extension-install, Browser Extension Install>> | Identifies the install of browser extensions. Malicious browser extensions can be installed via app store downloads masquerading as legitimate extensions, social engineering, or by an adversary that has already compromised a system. | update | 203 

|<<prebuilt-rule-8-17-4-account-configured-with-never-expiring-password, Account Configured with Never-Expiring Password>> | Detects the creation and modification of an account with the "Don't Expire Password" option Enabled. Attackers can abuse this misconfiguration to persist in the domain and maintain long-term access using compromised accounts with this property. | update | 212 

|<<prebuilt-rule-8-17-4-image-file-execution-options-injection, Image File Execution Options Injection>> | The Debugger and SilentProcessExit registry keys can allow an adversary to intercept the execution of files, causing a different process to be executed. This functionality can be abused by an adversary to establish persistence. | update | 310 

|<<prebuilt-rule-8-17-4-suspicious-startup-shell-folder-modification, Suspicious Startup Shell Folder Modification>> | Identifies suspicious startup shell folder modifications to change the default Startup directory in order to bypass detections monitoring file creation in the Windows Startup folder. | update | 314 

|<<prebuilt-rule-8-17-4-active-directory-group-modification-by-system, Active Directory Group Modification by SYSTEM>> | Identifies a user being added to an active directory group by the SYSTEM (S-1-5-18) user. This behavior can indicate that the attacker has achieved SYSTEM privileges in a domain controller, which attackers can obtain by exploiting vulnerabilities or abusing default group privileges (e.g., Server Operators), and is attempting to pivot to a domain account. | update | 103 

|<<prebuilt-rule-8-17-4-persistence-via-scheduled-job-creation, Persistence via Scheduled Job Creation>> | A job can be used to schedule programs or scripts to be executed at a specified date and time. Adversaries may abuse task scheduling functionality to facilitate initial or recurring execution of malicious code. | update | 412 

|<<prebuilt-rule-8-17-4-local-scheduled-task-creation, Local Scheduled Task Creation>> | Indicates the creation of a scheduled task. Adversaries can use these to establish persistence, move laterally, and/or escalate privileges. | update | 209 

|<<prebuilt-rule-8-17-4-scheduled-task-created-by-a-windows-script, Scheduled Task Created by a Windows Script>> | A scheduled task was created by a Windows script via cscript.exe, wscript.exe or powershell.exe. This can be abused by an adversary to establish persistence. | update | 209 

|<<prebuilt-rule-8-17-4-persistence-via-microsoft-office-addins, Persistence via Microsoft Office AddIns>> | Detects attempts to establish persistence on an endpoint by abusing Microsoft Office add-ins. | update | 309 

|<<prebuilt-rule-8-17-4-persistence-via-microsoft-outlook-vba, Persistence via Microsoft Outlook VBA>> | Detects attempts to establish persistence on an endpoint by installing a rogue Microsoft Outlook VBA Template. | update | 308 

|<<prebuilt-rule-8-17-4-krbtgt-delegation-backdoor, KRBTGT Delegation Backdoor>> | Identifies the modification of the msDS-AllowedToDelegateTo attribute to KRBTGT. Attackers can use this technique to maintain persistence to the domain by having the ability to request tickets for the KRBTGT service. | update | 209 

|<<prebuilt-rule-8-17-4-persistence-via-a-windows-installer, Persistence via a Windows Installer>> | Identifies when the Windows installer process msiexec.exe creates a new persistence entry via scheduled tasks or startup. | update | 2 

|<<prebuilt-rule-8-17-4-office-test-registry-persistence, Office Test Registry Persistence>> | Identifies the modification of the Microsoft Office "Office Test" Registry key, a registry location that can be used to specify a DLL which will be executed every time an MS Office application is started. Attackers can abuse this to gain persistence on a compromised host. | update | 104 

|<<prebuilt-rule-8-17-4-netsh-helper-dll, Netsh Helper DLL>> | Identifies the addition of a Netsh Helper DLL, netsh.exe supports the addition of these DLLs to extend its functionality. Attackers may abuse this mechanism to execute malicious payloads every time the utility is executed, which can be done by administrators or a scheduled task. | update | 203 

|<<prebuilt-rule-8-17-4-new-activesyncalloweddeviceid-added-via-powershell, New ActiveSyncAllowedDeviceID Added via PowerShell>> | Identifies the use of the Exchange PowerShell cmdlet, Set-CASMailbox, to add a new ActiveSync allowed device. Adversaries may target user email to collect sensitive information. | update | 312 

|<<prebuilt-rule-8-17-4-persistence-via-powershell-profile, Persistence via PowerShell profile>> | Identifies the creation or modification of a PowerShell profile. PowerShell profile is a script that is executed when PowerShell starts to customize the user environment, which can be abused by attackers to persist in a environment where PowerShell is common. | update | 210 

|<<prebuilt-rule-8-17-4-potential-modification-of-accessibility-binaries, Potential Modification of Accessibility Binaries>> | Windows contains accessibility features that may be launched with a key combination before a user has logged in. An adversary can modify the way these programs are launched to get a command prompt or backdoor without logging in to the system. | update | 213 

|<<prebuilt-rule-8-17-4-uncommon-registry-persistence-change, Uncommon Registry Persistence Change>> | Detects changes to registry persistence keys that are not commonly used or modified by legitimate programs. This could be an indication of an adversary's attempt to persist in a stealthy manner. | update | 213 

|<<prebuilt-rule-8-17-4-account-password-reset-remotely, Account Password Reset Remotely>> | Identifies an attempt to reset a potentially privileged account password remotely. Adversaries may manipulate account passwords to maintain access or evade password duration policies and preserve compromised credentials. | update | 217 

|<<prebuilt-rule-8-17-4-startup-or-run-key-registry-modification, Startup or Run Key Registry Modification>> | Identifies run key or startup key registry modifications. In order to survive reboots and other system interrupts, attackers will modify run keys within the registry or leverage startup folder items as a form of persistence. | update | 114 

|<<prebuilt-rule-8-17-4-execution-of-persistent-suspicious-program, Execution of Persistent Suspicious Program>> | Identifies execution of suspicious persistent programs (scripts, rundll32, etc.) by looking at process lineage and command line usage. | update | 208 

|<<prebuilt-rule-8-17-4-a-scheduled-task-was-created, A scheduled task was created>> | Indicates the creation of a scheduled task using Windows event logs. Adversaries can use these to establish persistence, move laterally, and/or escalate privileges. | update | 110 

|<<prebuilt-rule-8-17-4-a-scheduled-task-was-updated, A scheduled task was updated>> | Indicates the update of a scheduled task using Windows event logs. Adversaries can use these to establish persistence, by changing the configuration of a legit scheduled task. Some changes such as disabling or enabling a scheduled task are common and may may generate noise. | update | 110 

|<<prebuilt-rule-8-17-4-adminsdholder-sdprop-exclusion-added, AdminSDHolder SDProp Exclusion Added>> | Identifies a modification on the dsHeuristics attribute on the bit that holds the configuration of groups excluded from the SDProp process. The SDProp compares the permissions on protected objects with those defined on the AdminSDHolder object. If the permissions on any of the protected accounts and groups do not match, the permissions on the protected accounts and groups are reset to match those of the domain's AdminSDHolder object, meaning that groups excluded will remain unchanged. Attackers can abuse this misconfiguration to maintain long-term access to privileged accounts in these groups. | update | 213 

|<<prebuilt-rule-8-17-4-unsigned-dll-loaded-by-svchost, Unsigned DLL Loaded by Svchost>> | Identifies an unsigned library created in the last 5 minutes and subsequently loaded by a shared windows service (svchost). Adversaries may use this technique to maintain persistence or run with System privileges. | update | 8 

|<<prebuilt-rule-8-17-4-suspicious-service-was-installed-in-the-system, Suspicious Service was Installed in the System>> | Identifies the creation of a new Windows service with suspicious Service command values. Windows services typically run as SYSTEM and can be used for privilege escalation and persistence. | update | 111 

|<<prebuilt-rule-8-17-4-unusual-persistence-via-services-registry, Unusual Persistence via Services Registry>> | Identifies processes modifying the services registry key directly, instead of through the expected Windows APIs. This could be an indication of an adversary attempting to stealthily persist through abnormal service creation or modification of an existing service. | update | 311 

|<<prebuilt-rule-8-17-4-startup-persistence-by-a-suspicious-process, Startup Persistence by a Suspicious Process>> | Identifies files written to or modified in the startup folder by commonly abused processes. Adversaries may use this technique to maintain persistence. | update | 312 

|<<prebuilt-rule-8-17-4-startup-folder-persistence-via-unsigned-process, Startup Folder Persistence via Unsigned Process>> | Identifies files written or modified in the startup folder by unsigned processes. Adversaries may abuse this technique to maintain persistence in an environment. | update | 110 

|<<prebuilt-rule-8-17-4-persistent-scripts-in-the-startup-directory, Persistent Scripts in the Startup Directory>> | Identifies script engines creating files in the Startup folder, or the creation of script files in the Startup folder. Adversaries may abuse this technique to maintain persistence in an environment. | update | 313 

|<<prebuilt-rule-8-17-4-suspicious-image-load-taskschd-dll-from-ms-office, Suspicious Image Load (taskschd.dll) from MS Office>> | Identifies a suspicious image load (taskschd.dll) from Microsoft Office processes. This behavior may indicate adversarial activity where a scheduled task is configured via Windows Component Object Model (COM). This technique can be used to configure persistence and evade monitoring by avoiding the usage of the traditional Windows binary (schtasks.exe) used to manage scheduled tasks. | update | 210 

|<<prebuilt-rule-8-17-4-suspicious-execution-via-scheduled-task, Suspicious Execution via Scheduled Task>> | Identifies execution of a suspicious program via scheduled tasks by looking at process lineage and command line usage. | update | 210 

|<<prebuilt-rule-8-17-4-suspicious-imagepath-service-creation, Suspicious ImagePath Service Creation>> | Identifies the creation of a suspicious ImagePath value. This could be an indication of an adversary attempting to stealthily persist or escalate privileges through abnormal service creation. | update | 310 

|<<prebuilt-rule-8-17-4-suspicious-wmi-event-subscription-created, Suspicious WMI Event Subscription Created>> | Detects the creation of a WMI Event Subscription. Attackers can abuse this mechanism for persistence or to elevate to SYSTEM privileges. | update | 307 

|<<prebuilt-rule-8-17-4-system-shells-via-services, System Shells via Services>> | Windows services typically run as SYSTEM and can be used as a privilege escalation opportunity. Malware or penetration testers may run a shell as a service to gain SYSTEM permissions. | update | 416 

|<<prebuilt-rule-8-17-4-temporarily-scheduled-task-creation, Temporarily Scheduled Task Creation>> | Indicates the creation and deletion of a scheduled task within a short time interval. Adversaries can use these to proxy malicious execution via the schedule service and perform clean up. | update | 109 

|<<prebuilt-rule-8-17-4-potential-persistence-via-time-provider-modification, Potential Persistence via Time Provider Modification>> | Identifies modification of the Time Provider. Adversaries may establish persistence by registering and enabling a malicious DLL as a time provider. Windows uses the time provider architecture to obtain accurate time stamps from other network devices or clients in the network. Time providers are implemented in the form of a DLL file which resides in the System32 folder. The service W32Time initiates during the startup of Windows and loads w32time.dll. | update | 312 

|<<prebuilt-rule-8-17-4-potential-application-shimming-via-sdbinst, Potential Application Shimming via Sdbinst>> | The Application Shim was created to allow for backward compatibility of software as the operating system codebase changes over time. This Windows functionality has been abused by attackers to stealthily gain persistence and arbitrary code execution in legitimate Windows processes. | update | 313 

|<<prebuilt-rule-8-17-4-persistence-via-bits-job-notify-cmdline, Persistence via BITS Job Notify Cmdline>> | An adversary can use the Background Intelligent Transfer Service (BITS) SetNotifyCmdLine method to execute a program that runs after a job finishes transferring data or after a job enters a specified state in order to persist on a system. | update | 411 

|<<prebuilt-rule-8-17-4-persistence-via-hidden-run-key-detected, Persistence via Hidden Run Key Detected>> | Identifies a persistence mechanism that utilizes the NtSetValueKey native API to create a hidden (null terminated) registry key. An adversary may use this method to hide from system utilities such as the Registry Editor (regedit). | update | 210 

|<<prebuilt-rule-8-17-4-installation-of-security-support-provider, Installation of Security Support Provider>> | Identifies registry modifications related to the Windows Security Support Provider (SSP) configuration. Adversaries may abuse this to establish persistence in an environment. | update | 310 

|<<prebuilt-rule-8-17-4-persistence-via-telemetrycontroller-scheduled-task-hijack, Persistence via TelemetryController Scheduled Task Hijack>> | Detects the successful hijack of Microsoft Compatibility Appraiser scheduled task to establish persistence with an integrity level of system. | update | 313 

|<<prebuilt-rule-8-17-4-persistence-via-update-orchestrator-service-hijack, Persistence via Update Orchestrator Service Hijack>> | Identifies potential hijacking of the Microsoft Update Orchestrator Service to establish persistence with an integrity level of SYSTEM. | update | 313 

|<<prebuilt-rule-8-17-4-persistence-via-wmi-event-subscription, Persistence via WMI Event Subscription>> | An adversary can use Windows Management Instrumentation (WMI) to install event filters, providers, consumers, and bindings that execute code when a defined event occurs. Adversaries may use the capabilities of WMI to subscribe to an event and execute arbitrary code when that event occurs, providing persistence on a system. | update | 314 

|<<prebuilt-rule-8-17-4-persistence-via-wmi-standard-registry-provider, Persistence via WMI Standard Registry Provider>> | Identifies use of the Windows Management Instrumentation StdRegProv (registry provider) to modify commonly abused registry locations for persistence. | update | 110 

|<<prebuilt-rule-8-17-4-werfault-reflectdebugger-persistence, Werfault ReflectDebugger Persistence>> | Identifies the registration of a Werfault Debugger. Attackers may abuse this mechanism to execute malicious payloads every time the utility is executed with the "-pr" parameter. | update | 203 

|<<prebuilt-rule-8-17-4-process-creation-via-secondary-logon, Process Creation via Secondary Logon>> | Identifies process creation with alternate credentials. Adversaries may create a new process with a different token to escalate privileges and bypass access controls. | update | 111 

|<<prebuilt-rule-8-17-4-process-created-with-a-duplicated-token, Process Created with a Duplicated Token>> | Identifies the creation of a process impersonating the token of another user logon session. Adversaries may create a new process with a different token to escalate privileges and bypass access controls. | update | 4 

|<<prebuilt-rule-8-17-4-modification-of-the-mspkiaccountcredentials, Modification of the msPKIAccountCredentials>> | Identify the modification of the msPKIAccountCredentials attribute in an Active Directory User Object. Attackers can abuse the credentials roaming feature to overwrite an arbitrary file for privilege escalation. ms-PKI-AccountCredentials contains binary large objects (BLOBs) of encrypted credential objects from the credential manager store, private keys, certificates, and certificate requests. | update | 114 

|<<prebuilt-rule-8-17-4-unsigned-dll-loaded-by-dns-service, Unsigned DLL loaded by DNS Service>> | Identifies unusual DLLs loaded by the DNS Server process, potentially indicating the abuse of the ServerLevelPluginDll functionality. This can lead to privilege escalation and remote code execution with SYSTEM privileges. | update | 104 

|<<prebuilt-rule-8-17-4-first-time-seen-driver-loaded, First Time Seen Driver Loaded>> | Identifies the load of a driver with an original file name and signature values that were observed for the first time during the last 30 days. This rule type can help baseline drivers installation within your environment. | update | 9 

|<<prebuilt-rule-8-17-4-expired-or-revoked-driver-loaded, Expired or Revoked Driver Loaded>> | Identifies an attempt to load a revoked or expired driver. Adversaries may bring outdated drivers with vulnerabilities to gain code execution in kernel mode or abuse revoked certificates to sign their drivers. | update | 6 

|<<prebuilt-rule-8-17-4-potential-privilege-escalation-via-cve-2022-38028, Potential privilege escalation via CVE-2022-38028>> | Identifies a privilege escalation attempt via exploiting CVE-2022-38028 to hijack the print spooler service execution. | update | 204 

|<<prebuilt-rule-8-17-4-creation-or-modification-of-a-new-gpo-scheduled-task-or-service, Creation or Modification of a new GPO Scheduled Task or Service>> | Detects the creation or modification of a new Group Policy based scheduled task or service. These methods are used for legitimate system administration, but can also be abused by an attacker with domain admin permissions to execute a malicious payload remotely on all or a subset of the domain joined machines. | update | 311 

|<<prebuilt-rule-8-17-4-potential-privilege-escalation-via-installerfiletakeover, Potential Privilege Escalation via InstallerFileTakeOver>> | Identifies a potential exploitation of InstallerTakeOver (CVE-2021-41379) default PoC execution. Successful exploitation allows an unprivileged user to escalate privileges to SYSTEM. | update | 112 

|<<prebuilt-rule-8-17-4-service-creation-via-local-kerberos-authentication, Service Creation via Local Kerberos Authentication>> | Identifies a suspicious local successful logon event where the Logon Package is Kerberos, the remote address is set to localhost, followed by a sevice creation from the same LogonId. This may indicate an attempt to leverage a Kerberos relay attack variant that can be used to elevate privilege locally from a domain joined user to local System privileges. | update | 207 

|<<prebuilt-rule-8-17-4-potential-lsa-authentication-package-abuse, Potential LSA Authentication Package Abuse>> | Adversaries can use the autostart mechanism provided by the Local Security Authority (LSA) authentication packages for privilege escalation or persistence by placing a reference to a binary in the Windows registry. The binary will then be executed by SYSTEM when the authentication packages are loaded. | update | 107 

|<<prebuilt-rule-8-17-4-interactive-logon-by-an-unusual-process, Interactive Logon by an Unusual Process>> | Identifies interactive logon attempt with alternate credentials and by an unusual process. Adversaries may create a new token to escalate privileges and bypass access controls. | update | 105 

|<<prebuilt-rule-8-17-4-potential-escalation-via-vulnerable-msi-repair, Potential Escalation via Vulnerable MSI Repair>> | Identifies when a browser process navigates to the Microsoft Help page followed by spawning an elevated process. This may indicate a successful exploitation for privilege escalation abusing a vulnerable Windows Installer repair setup. | update | 203 

|<<prebuilt-rule-8-17-4-privilege-escalation-via-named-pipe-impersonation, Privilege Escalation via Named Pipe Impersonation>> | Identifies a privilege escalation attempt via named pipe impersonation. An adversary may abuse this technique by utilizing a framework such Metasploit's meterpreter getsystem command. | update | 313 

|<<prebuilt-rule-8-17-4-first-time-seen-newcredentials-logon-process, First Time Seen NewCredentials Logon Process>> | Identifies a new credentials logon type performed by an unusual process. This may indicate the existence of an access token forging capability that are often abused to bypass access control restrictions. | update | 106 

|<<prebuilt-rule-8-17-4-potential-port-monitor-or-print-processor-registration-abuse, Potential Port Monitor or Print Processor Registration Abuse>> | Identifies port monitor and print processor registry modifications. Adversaries may abuse port monitor and print processors to run malicious DLLs during system boot that will be executed as SYSTEM for privilege escalation and/or persistence, if permissions allow writing a fully-qualified pathname for that DLL. | update | 109 

|<<prebuilt-rule-8-17-4-powershell-script-with-token-impersonation-capabilities, PowerShell Script with Token Impersonation Capabilities>> | Detects scripts that contain PowerShell functions, structures, or Windows API functions related to token impersonation/theft. Attackers may duplicate then impersonate another user's token to escalate privileges and bypass access controls. | update | 115 

|<<prebuilt-rule-8-17-4-suspicious-print-spooler-point-and-print-dll, Suspicious Print Spooler Point and Print DLL>> | Detects attempts to exploit a privilege escalation vulnerability (CVE-2020-1030) related to the print spooler service. Exploitation involves chaining multiple primitives to load an arbitrary DLL into the print spooler process running as SYSTEM. | update | 209 

|<<prebuilt-rule-8-17-4-suspicious-printspooler-service-executable-file-creation, Suspicious PrintSpooler Service Executable File Creation>> | Detects attempts to exploit privilege escalation vulnerabilities related to the Print Spooler service. For more information refer to the following CVE's - CVE-2020-1048, CVE-2020-1337 and CVE-2020-1300 and verify that the impacted system is patched. | update | 315 

|<<prebuilt-rule-8-17-4-suspicious-print-spooler-file-deletion, Suspicious Print Spooler File Deletion>> | Detects deletion of print driver files by an unusual process. This may indicate a clean up attempt post successful privilege escalation via Print Spooler service related vulnerabilities. | update | 308 

|<<prebuilt-rule-8-17-4-suspicious-print-spooler-spl-file-created, Suspicious Print Spooler SPL File Created>> | Detects attempts to exploit privilege escalation vulnerabilities related to the Print Spooler service including CVE-2020-1048 and CVE-2020-1337. | update | 114 

|<<prebuilt-rule-8-17-4-potential-privilege-escalation-via-service-imagepath-modification, Potential Privilege Escalation via Service ImagePath Modification>> | Identifies registry modifications to default services that could enable privilege escalation to SYSTEM. Attackers with privileges from groups like Server Operators may change the ImagePath of services to executables under their control or to execute commands. | update | 103 

|<<prebuilt-rule-8-17-4-privilege-escalation-via-windir-environment-variable, Privilege Escalation via Windir Environment Variable>> | Identifies a privilege escalation attempt via a rogue Windows directory (Windir) environment variable. This is a known primitive that is often combined with other vulnerabilities to elevate privileges. | update | 309 

|<<prebuilt-rule-8-17-4-potential-privileged-escalation-via-samaccountname-spoofing, Potential Privileged Escalation via SamAccountName Spoofing>> | Identifies a suspicious computer account name rename event, which may indicate an attempt to exploit CVE-2021-42278 to elevate privileges from a standard domain user to a user with domain admin privileges. CVE-2021-42278 is a security vulnerability that allows potential attackers to impersonate a domain controller via samAccountName attribute spoofing. | update | 210 

|<<prebuilt-rule-8-17-4-service-control-spawned-via-script-interpreter, Service Control Spawned via Script Interpreter>> | Identifies Service Control (sc.exe) spawning from script interpreter processes to create, modify, or start services. This can potentially indicate an attempt to elevate privileges or maintain persistence. | update | 214 

|<<prebuilt-rule-8-17-4-remote-computer-account-dnshostname-update, Remote Computer Account DnsHostName Update>> | Identifies the remote update to a computer account's DnsHostName attribute. If the new value set is a valid domain controller DNS hostname and the subject computer name is not a domain controller, then it's highly likely a preparation step to exploit CVE-2022-26923 in an attempt to elevate privileges from a standard domain user to domain admin privileges. | update | 209 

|<<prebuilt-rule-8-17-4-sedebugprivilege-enabled-by-a-suspicious-process, SeDebugPrivilege Enabled by a Suspicious Process>> | Identifies the creation of a process running as SYSTEM and impersonating a Windows core binary privileges. Adversaries may create a new process with a different token to escalate privileges and bypass access controls. | update | 109 

|<<prebuilt-rule-8-17-4-uac-bypass-attempt-with-ieditionupgrademanager-elevated-com-interface, UAC Bypass Attempt with IEditionUpgradeManager Elevated COM Interface>> | Identifies attempts to bypass User Account Control (UAC) by abusing an elevated COM Interface to launch a rogue Windows ClipUp program. Attackers may attempt to bypass UAC to stealthily execute code with elevated permissions. | update | 310 

|<<prebuilt-rule-8-17-4-uac-bypass-attempt-via-elevated-com-internet-explorer-add-on-installer, UAC Bypass Attempt via Elevated COM Internet Explorer Add-On Installer>> | Identifies User Account Control (UAC) bypass attempts by abusing an elevated COM Interface to launch a malicious program. Attackers may attempt to bypass UAC to stealthily execute code with elevated permissions. | update | 310 

|<<prebuilt-rule-8-17-4-uac-bypass-via-icmluautil-elevated-com-interface, UAC Bypass via ICMLuaUtil Elevated COM Interface>> | Identifies User Account Control (UAC) bypass attempts via the ICMLuaUtil Elevated COM interface. Attackers may attempt to bypass UAC to stealthily execute code with elevated permissions. | update | 211 

|<<prebuilt-rule-8-17-4-uac-bypass-via-diskcleanup-scheduled-task-hijack, UAC Bypass via DiskCleanup Scheduled Task Hijack>> | Identifies User Account Control (UAC) bypass via hijacking DiskCleanup Scheduled Task. Attackers bypass UAC to stealthily execute code with elevated permissions. | update | 312 

|<<prebuilt-rule-8-17-4-uac-bypass-attempt-via-privileged-ifileoperation-com-interface, UAC Bypass Attempt via Privileged IFileOperation COM Interface>> | Identifies attempts to bypass User Account Control (UAC) via DLL side-loading. Attackers may attempt to bypass UAC to stealthily execute code with elevated permissions. | update | 310 

|<<prebuilt-rule-8-17-4-bypass-uac-via-event-viewer, Bypass UAC via Event Viewer>> | Identifies User Account Control (UAC) bypass via eventvwr.exe. Attackers bypass UAC to stealthily execute code with elevated permissions. | update | 316 

|<<prebuilt-rule-8-17-4-uac-bypass-attempt-via-windows-directory-masquerading, UAC Bypass Attempt via Windows Directory Masquerading>> | Identifies an attempt to bypass User Account Control (UAC) by masquerading as a Microsoft trusted Windows directory. Attackers may bypass UAC to stealthily execute code with elevated permissions. | update | 316 

|<<prebuilt-rule-8-17-4-uac-bypass-via-windows-firewall-snap-in-hijack, UAC Bypass via Windows Firewall Snap-In Hijack>> | Identifies attempts to bypass User Account Control (UAC) by hijacking the Microsoft Management Console (MMC) Windows Firewall snap-in. Attackers bypass UAC to stealthily execute code with elevated permissions. | update | 313 

|<<prebuilt-rule-8-17-4-potential-exploitation-of-an-unquoted-service-path-vulnerability, Potential Exploitation of an Unquoted Service Path Vulnerability>> | Adversaries may leverage unquoted service path vulnerabilities to escalate privileges. By placing an executable in a higher-level directory within the path of an unquoted service executable, Windows will natively launch this executable from its defined path variable instead of the benign one in a deeper directory, thus leading to code execution. | update | 204 

|<<prebuilt-rule-8-17-4-unusual-parent-child-relationship, Unusual Parent-Child Relationship>> | Identifies Windows programs run from unexpected parent processes. This could indicate masquerading or other strange activity on a system. | update | 315 

|<<prebuilt-rule-8-17-4-unusual-print-spooler-child-process, Unusual Print Spooler Child Process>> | Detects unusual Print Spooler service (spoolsv.exe) child processes. This may indicate an attempt to exploit privilege escalation vulnerabilities related to the Printing Service on Windows. | update | 210 

|<<prebuilt-rule-8-17-4-unusual-service-host-child-process-childless-service, Unusual Service Host Child Process - Childless Service>> | Identifies unusual child processes of Service Host (svchost.exe) that traditionally do not spawn any child processes. This may indicate a code injection or an equivalent form of exploitation. | update | 311 

|<<prebuilt-rule-8-17-4-privileges-elevation-via-parent-process-pid-spoofing, Privileges Elevation via Parent Process PID Spoofing>> | Identifies parent process spoofing used to create an elevated child process. Adversaries may spoof the parent process identifier (PPID) of a new process to evade process-monitoring defenses or to elevate privileges. | update | 8 

|<<prebuilt-rule-8-17-4-privilege-escalation-via-rogue-named-pipe-impersonation, Privilege Escalation via Rogue Named Pipe Impersonation>> | Identifies a privilege escalation attempt via rogue named pipe impersonation. An adversary may abuse this technique by masquerading as a known named pipe and manipulating a privileged process to connect to it. | update | 207 

|<<prebuilt-rule-8-17-4-process-created-with-an-elevated-token, Process Created with an Elevated Token>> | Identifies the creation of a process running as SYSTEM and impersonating a Windows core binary privileges. Adversaries may create a new process with a different token to escalate privileges and bypass access controls. | update | 7 

|<<prebuilt-rule-8-17-4-windows-service-installed-via-an-unusual-client, Windows Service Installed via an Unusual Client>> | Identifies the creation of a Windows service by an unusual client process. Services may be created with administrator privileges but are executed under SYSTEM privileges, so an adversary may also use a service to escalate privileges from administrator to SYSTEM. | update | 212 

|==============================================
