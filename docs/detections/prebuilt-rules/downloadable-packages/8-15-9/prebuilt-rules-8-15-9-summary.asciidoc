[[prebuilt-rule-8-15-9-prebuilt-rules-8-15-9-summary]]
[role="xpack"]
== Update v8.15.9

This section lists all updates associated with version 8.15.9 of the Fleet integration *Prebuilt Security Detection Rules*.


[width="100%",options="header"]
|==============================================
|Rule |Description |Status |Version

|<<prebuilt-rule-8-15-9-linux-clipboard-activity-detected, Linux Clipboard Activity Detected>> | This rule monitors for the usage of the most common clipboard utilities on unix systems by an uncommon process group leader. Adversaries may collect data stored in the clipboard from users copying information within or between applications. | new | 5 

|<<prebuilt-rule-8-15-9-linux-ssh-x11-forwarding, Linux SSH X11 Forwarding>> | This rule monitors for X11 forwarding via SSH. X11 forwarding is a feature that allows users to run graphical applications on a remote server and display the application's graphical user interface on their local machine. Attackers can abuse X11 forwarding for tunneling their GUI-based tools, pivot through compromised systems, and create covert communication channels, enabling lateral movement and facilitating remote control of systems within a network. | new | 4 

|<<prebuilt-rule-8-15-9-access-control-list-modification-via-setfacl, Access Control List Modification via setfacl>> | This rule detects Linux Access Control List (ACL) modification via the setfacl command. | new | 2 

|<<prebuilt-rule-8-15-9-hidden-files-and-directories-via-hidden-flag, Hidden Files and Directories via Hidden Flag>> | Identify activity related where adversaries can add the 'hidden' flag to files to hide them from the user in an attempt to evade detection. | new | 3 

|<<prebuilt-rule-8-15-9-suspicious-memory-grep-activity, Suspicious Memory grep Activity>> | Monitors for grep activity related to memory mapping. The /proc/*/maps file in Linux provides a memory map for a specific process, detailing the memory segments, permissions, and what files are mapped to these segments. Attackers may read a process's memory map to identify memory addresses for code injection or process hijacking. | new | 3 

|<<prebuilt-rule-8-15-9-unix-socket-connection, Unix Socket Connection>> | This rule monitors for inter-process communication via Unix sockets. Adversaries may attempt to communicate with local Unix sockets to enumerate application details, find vulnerabilities/configuration mistakes and potentially escalate privileges or set up malicious communication channels via Unix sockets for inter-process communication to attempt to evade detection. | new | 3 

|<<prebuilt-rule-8-15-9-potential-non-standard-port-ssh-connection, Potential Non-Standard Port SSH connection>> | Identifies potentially malicious processes communicating via a port paring typically not associated with SSH. For example, SSH over port 2200 or port 2222 as opposed to the traditional port 22. Adversaries may make changes to the standard port a protocol uses to bypass filtering or muddle analysis/parsing of network data. | update | 6 

|<<prebuilt-rule-8-15-9-elastic-agent-service-terminated, Elastic Agent Service Terminated>> | Identifies the Elastic endpoint agent has stopped and is no longer running on the host. Adversaries may attempt to disable security monitoring tools in an attempt to evade detection or prevention capabilities during an intrusion. This may also indicate an issue with the agent itself and should be addressed to ensure defensive measures are back in a stable state. | update | 107 

|<<prebuilt-rule-8-15-9-masquerading-space-after-filename, Masquerading Space After Filename>> | This rules identifies a process created from an executable with a space appended to the end of the filename. This may indicate an attempt to masquerade a malicious file as benign to gain user execution. When a space is added to the end of certain files, the OS will execute the file according to it's true filetype instead of it's extension. Adversaries can hide a program's true filetype by changing the extension of the file. They can then add a space to the end of the name so that the OS automatically executes the file when it's double-clicked. | update | 7 

|<<prebuilt-rule-8-15-9-security-software-discovery-via-grep, Security Software Discovery via Grep>> | Identifies the use of the grep command to discover known third-party macOS and Linux security tools, such as Antivirus or Host Firewall details. | update | 110 

|<<prebuilt-rule-8-15-9-aws-ssm-sendcommand-with-run-shell-command-parameters, AWS SSM `SendCommand` with Run Shell Command Parameters>> | Identifies the use of the AWS Systems Manager (SSM) `SendCommand` API with the either `AWS-RunShellScript` or `AWS-RunPowerShellScript` parameters. The `SendCommand` API call allows users to execute commands on EC2 instances using the SSM service. Adversaries may use this technique to execute commands on EC2 instances without the need for SSH or RDP access. This behavior may indicate an adversary attempting to execute commands on an EC2 instance for malicious purposes. This is a [New Terms](https://www.elastic.co/guide/en/security/current/rules-ui-create.html#create-new-terms-rule) rule that only flags when this behavior is observed for the first time on a host in the last 7 days. | update | 2 

|<<prebuilt-rule-8-15-9-deprecated-suspicious-java-child-process, Deprecated - Suspicious JAVA Child Process>> | Identifies suspicious child processes of the Java interpreter process. This may indicate an attempt to execute a malicious JAR file or an exploitation attempt via a JAVA specific vulnerability. | update | 209 

|<<prebuilt-rule-8-15-9-unusual-high-confidence-misconduct-blocks-detected, Unusual High Confidence Misconduct Blocks Detected>> | Detects repeated high-confidence 'BLOCKED' actions coupled with specific violation codes such as 'MISCONDUCT', indicating persistent misuse or attempts to probe the model's ethical boundaries. | update | 3 

|<<prebuilt-rule-8-15-9-mfa-deactivation-with-no-re-activation-for-okta-user-account, MFA Deactivation with no Re-Activation for Okta User Account>> | Detects multi-factor authentication (MFA) deactivation with no subsequent re-activation for an Okta user account. An adversary may deactivate MFA for an Okta user account in order to weaken the authentication requirements for the account. | update | 209 

|<<prebuilt-rule-8-15-9-potential-protocol-tunneling-via-chisel-client, Potential Protocol Tunneling via Chisel Client>> | This rule monitors for common command line flags leveraged by the Chisel client utility followed by a connection attempt. Chisel is a command-line utility used for creating and managing TCP and UDP tunnels, enabling port forwarding and secure communication between machines. Attackers can abuse the Chisel utility to establish covert communication channels, bypass network restrictions, and carry out malicious activities by creating tunnels that allow unauthorized access to internal systems. | update | 6 

|<<prebuilt-rule-8-15-9-network-activity-detected-via-kworker, Network Activity Detected via Kworker>> | This rule monitors for network connections from a kworker process. kworker, or kernel worker, processes are part of the kernel's workqueue mechanism. They are responsible for executing work that has been scheduled to be done in kernel space, which might include tasks like handling interrupts, background activities, and other kernel-related tasks. Attackers may attempt to evade detection by masquerading as a kernel worker process. | update | 6 

|<<prebuilt-rule-8-15-9-suspicious-network-activity-to-the-internet-by-previously-unknown-executable, Suspicious Network Activity to the Internet by Previously Unknown Executable>> | This rule monitors for network connectivity to the internet from a previously unknown executable located in a suspicious directory. An alert from this rule can indicate the presence of potentially malicious activity, such as the execution of unauthorized or suspicious processes attempting to establish connections to unknown or suspicious destinations such as a command and control server. Detecting and investigating such behavior can help identify and mitigate potential security threats, protecting the system and its data from potential compromise. | update | 11 

|<<prebuilt-rule-8-15-9-potential-linux-local-account-brute-force-detected, Potential Linux Local Account Brute Force Detected>> | Identifies multiple consecutive login attempts executed by one process targeting a local linux user account within a short time interval. Adversaries might brute force login attempts across different users with a default wordlist or a set of customly crafted passwords in an attempt to gain access to these accounts. | update | 7 

|<<prebuilt-rule-8-15-9-unusual-instance-metadata-service-imds-api-request, Unusual Instance Metadata Service (IMDS) API Request>> | This rule identifies potentially malicious processes attempting to access the cloud service provider's instance metadata service (IMDS) API endpoint, which can be used to retrieve sensitive instance-specific information such as instance ID, public IP address, and even temporary security credentials if role's are assumed by that instance. The rule monitors for various tools and scripts like curl, wget, python, and perl that might be used to interact with the metadata API. | update | 2 

|<<prebuilt-rule-8-15-9-system-binary-moved-or-copied, System Binary Moved or Copied>> | This rule monitors for the copying or moving of a system binary. Adversaries may copy/move and rename system binaries to evade detection. Copying a system binary to a different location should not occur often, so if it does, the activity should be investigated. | update | 13 

|<<prebuilt-rule-8-15-9-file-made-immutable-by-chattr, File made Immutable by Chattr>> | Detects a file being made immutable using the chattr binary. Making a file immutable means it cannot be deleted or renamed, no link can be created to this file, most of the file's metadata can not be modified, and the file can not be opened in write mode. Threat actors will commonly utilize this to prevent tampering or modification of their malicious files or any system files they have modified for purposes of persistence (e.g .ssh, /etc/passwd, etc.). | update | 112 

|<<prebuilt-rule-8-15-9-dynamic-linker-creation-or-modification, Dynamic Linker Creation or Modification>> | Detects the creation or modification of files related to the dynamic linker on Linux systems. The dynamic linker is a shared library that is used by the Linux kernel to load and execute programs. Attackers may attempt to hijack the execution flow of a program by modifying the dynamic linker configuration files. | update | 2 

|<<prebuilt-rule-8-15-9-file-permission-modification-in-writable-directory, File Permission Modification in Writable Directory>> | Identifies file permission modifications in common writable directories by a non-root user. Adversaries often drop files or payloads into a writable directory and change permissions prior to execution. | update | 211 

|<<prebuilt-rule-8-15-9-creation-of-hidden-files-and-directories-via-commandline, Creation of Hidden Files and Directories via CommandLine>> | Users can mark specific files as hidden simply by putting a "." as the first character in the file or folder name. Adversaries can use this to their advantage to hide files and folders on the system for persistence and defense evasion. This rule looks for hidden files or folders in common writable directories. | update | 111 

|<<prebuilt-rule-8-15-9-kernel-module-removal, Kernel Module Removal>> | Kernel modules are pieces of code that can be loaded and unloaded into the kernel upon demand. They extend the functionality of the kernel without the need to reboot the system. This rule identifies attempts to remove a kernel module. | update | 110 

|<<prebuilt-rule-8-15-9-potential-hidden-process-via-mount-hidepid, Potential Hidden Process via Mount Hidepid>> | Identifies the execution of mount process with hidepid parameter, which can make processes invisible to other users from the system. Adversaries using Linux kernel version 3.2+ (or RHEL/CentOS v6.5+ above) can hide the process from other users. When hidepid=2 option is executed to mount the /proc filesystem, only the root user can see all processes and the logged-in user can only see their own process. This provides a defense evasion mechanism for the adversaries to hide their process executions from all other commands such as ps, top, pgrep and more. With the Linux kernel hardening hidepid option all the user has to do is remount the /proc filesystem with the option, which can now be monitored and detected. | update | 9 

|<<prebuilt-rule-8-15-9-root-certificate-installation, Root Certificate Installation>> | This rule detects the installation of root certificates on a Linux system. Adversaries may install a root certificate on a compromised system to avoid warnings when connecting to their command and control servers. Root certificates are used in public key cryptography to identify a root certificate authority (CA). When a root certificate is installed, the system or application will trust certificates in the root's chain of trust that have been signed by the root certificate. | update | 2 

|<<prebuilt-rule-8-15-9-potentially-suspicious-process-started-via-tmux-or-screen, Potentially Suspicious Process Started via tmux or screen>> | This rule monitors for the execution of suspicious commands via screen and tmux. When launching a command and detaching directly, the commands will be executed in the background via its parent process. Attackers may leverage screen or tmux to execute commands while attempting to evade detection. | update | 5 

|<<prebuilt-rule-8-15-9-esxi-discovery-via-find, ESXI Discovery via Find>> | Identifies instances where the 'find' command is started on a Linux system with arguments targeting specific VM-related paths, such as "/etc/vmware/", "/usr/lib/vmware/", or "/vmfs/*". These paths are associated with VMware virtualization software, and their presence in the find command arguments may indicate that a threat actor is attempting to search for, analyze, or manipulate VM-related files and configurations on the system. | update | 7 

|<<prebuilt-rule-8-15-9-esxi-discovery-via-grep, ESXI Discovery via Grep>> | Identifies instances where a process named 'grep', 'egrep', or 'pgrep' is started on a Linux system with arguments related to virtual machine (VM) files, such as "vmdk", "vmx", "vmxf", "vmsd", "vmsn", "vswp", "vmss", "nvram", or "vmem". These file extensions are associated with VM-related file formats, and their presence in grep command arguments may indicate that a threat actor is attempting to search for, analyze, or manipulate VM files on the system. | update | 7 

|<<prebuilt-rule-8-15-9-enumeration-of-kernel-modules, Enumeration of Kernel Modules>> | Loadable Kernel Modules (or LKMs) are pieces of code that can be loaded and unloaded into the kernel upon demand. They extend the functionality of the kernel without the need to reboot the system. This identifies attempts to enumerate information about a kernel module. | update | 210 

|<<prebuilt-rule-8-15-9-potential-pspy-process-monitoring-detected, Potential Pspy Process Monitoring Detected>> | This rule leverages auditd to monitor for processes scanning different processes within the /proc directory using the openat syscall. This is a strong indication for the usage of the pspy utility. Attackers may leverage the pspy process monitoring utility to monitor system processes without requiring root permissions, in order to find potential privilege escalation vectors. | update | 8 

|<<prebuilt-rule-8-15-9-sudo-command-enumeration-detected, Sudo Command Enumeration Detected>> | This rule monitors for the usage of the sudo -l command, which is used to list the allowed and forbidden commands for the invoking user. Attackers may execute this command to enumerate commands allowed to be executed with sudo permissions, potentially allowing to escalate privileges to root. | update | 6 

|<<prebuilt-rule-8-15-9-suspicious-which-enumeration, Suspicious which Enumeration>> | This rule monitors for the usage of the which command with an unusual amount of process arguments. Attackers may leverage the which command to enumerate the system for useful installed utilities that may be used after compromising a system to escalate privileges or move latteraly across the network. | update | 7 

|<<prebuilt-rule-8-15-9-abnormal-process-id-or-lock-file-created, Abnormal Process ID or Lock File Created>> | Identifies the creation of a Process ID (PID), lock or reboot file created in temporary file storage paradigm (tmpfs) directory /var/run. On Linux, the PID files typically hold the process ID to track previous copies running and manage other tasks. Certain Linux malware use the /var/run directory for holding data, executables and other tasks, disguising itself or these files as legitimate PID files. | update | 214 

|<<prebuilt-rule-8-15-9-printer-user-lp-shell-execution, Printer User (lp) Shell Execution>> | This detection rule addresses multiple vulnerabilities in the CUPS printing system, including CVE-2024-47176, CVE-2024-47076, CVE-2024-47175, and CVE-2024-47177. Specifically, this rule detects shell executions from the foomatic-rip parent process through the default printer user (lp). These flaws impact components like cups-browsed, libcupsfilters, libppd, and foomatic-rip, allowing remote unauthenticated attackers to manipulate IPP URLs or inject malicious data through crafted UDP packets or network spoofing. This can result in arbitrary command execution when a print job is initiated. | update | 2 

|<<prebuilt-rule-8-15-9-cupsd-or-foomatic-rip-shell-execution, Cupsd or Foomatic-rip Shell Execution>> | This detection rule addresses multiple vulnerabilities in the CUPS printing system, including CVE-2024-47176, CVE-2024-47076, CVE-2024-47175, and CVE-2024-47177. Specifically, this rule detects shell executions from the foomatic-rip parent process. These flaws impact components like cups-browsed, libcupsfilters, libppd, and foomatic-rip, allowing remote unauthenticated attackers to manipulate IPP URLs or inject malicious data through crafted UDP packets or network spoofing. This can result in arbitrary command execution when a print job is initiated. | update | 2 

|<<prebuilt-rule-8-15-9-suspicious-execution-from-foomatic-rip-or-cupsd-parent, Suspicious Execution from Foomatic-rip or Cupsd Parent>> | This detection rule addresses multiple vulnerabilities in the CUPS printing system, including CVE-2024-47176, CVE-2024-47076, CVE-2024-47175, and CVE-2024-47177. Specifically, this rule detects suspicious process command lines executed by child processes of foomatic-rip and cupsd. These flaws impact components like cups-browsed, libcupsfilters, libppd, and foomatic-rip, allowing remote unauthenticated attackers to manipulate IPP URLs or inject malicious data through crafted UDP packets or network spoofing. This can result in arbitrary command execution when a print job is initiated. | update | 2 

|<<prebuilt-rule-8-15-9-potential-curl-cve-2023-38545-exploitation, Potential curl CVE-2023-38545 Exploitation>> | Detects potential exploitation of curl CVE-2023-38545 by monitoring for vulnerable command line arguments in conjunction with an unusual command line length. A flaw in curl version <= 8.3 makes curl vulnerable to a heap based buffer overflow during the SOCKS5 proxy handshake. Upgrade to curl version >= 8.4 to patch this vulnerability. This exploit can be executed with and without the use of environment variables. For increased visibility, enable the collection of http_proxy, HTTPS_PROXY and ALL_PROXY environment variables based on the instructions provided in the setup guide of this rule. | update | 6 

|<<prebuilt-rule-8-15-9-file-creation-execution-and-self-deletion-in-suspicious-directory, File Creation, Execution and Self-Deletion in Suspicious Directory>> | This rule monitors for the creation of a file, followed by its execution and self-deletion in a short timespan within a directory often used for malicious purposes by threat actors. This behavior is often used by malware to execute malicious code and delete itself to hide its tracks. | update | 5 

|<<prebuilt-rule-8-15-9-network-connection-from-binary-with-rwx-memory-region, Network Connection from Binary with RWX Memory Region>> | Monitors for the execution of a unix binary with read, write and execute memory region permissions, followed by a network connection. The mprotect() system call is used to change the access protections on a region of memory that has already been allocated. This syscall allows a process to modify the permissions of pages in its virtual address space, enabling or disabling permissions such as read, write, and execute for those pages. RWX permissions on memory is in many cases overly permissive, and should (especially in conjunction with an outbound network connection) be analyzed thoroughly. | update | 3 

|<<prebuilt-rule-8-15-9-network-connection-via-recently-compiled-executable, Network Connection via Recently Compiled Executable>> | This rule monitors a sequence involving a program compilation event followed by its execution and a subsequent network connection event. This behavior can indicate the set up of a reverse tcp connection to a command-and-control server. Attackers may spawn reverse shells to establish persistence onto a target system. | update | 6 

|<<prebuilt-rule-8-15-9-potential-linux-hack-tool-launched, Potential Linux Hack Tool Launched>> | Monitors for the execution of different processes that might be used by attackers for malicious intent. An alert from this rule should be investigated further, as hack tools are commonly used by blue teamers and system administrators as well. | update | 4 

|<<prebuilt-rule-8-15-9-potential-code-execution-via-postgresql, Potential Code Execution via Postgresql>> | This rule monitors for suspicious activities that may indicate an attacker attempting to execute arbitrary code within a PostgreSQL environment. Attackers can execute code via PostgreSQL as a result of gaining unauthorized access to a public facing PostgreSQL database or exploiting vulnerabilities, such as remote command execution and SQL injection attacks, which can result in unauthorized access and malicious actions, and facilitate post-exploitation activities for unauthorized access and malicious actions. | update | 7 

|<<prebuilt-rule-8-15-9-openssl-client-or-server-activity, Openssl Client or Server Activity>> | This rule identifies when the openssl client or server is used to establish a connection. Attackers may use openssl to establish a secure connection to a remote server or to create a secure server to receive connections. This activity may be used to exfiltrate data or establish a command and control channel. | update | 2 

|<<prebuilt-rule-8-15-9-suspicious-system-commands-executed-by-previously-unknown-executable, Suspicious System Commands Executed by Previously Unknown Executable>> | This rule monitors for the execution of several commonly used system commands executed by a previously unknown executable located in commonly abused directories. An alert from this rule can indicate the presence of potentially malicious activity, such as the execution of unauthorized or suspicious processes attempting to run malicious code. Detecting and investigating such behavior can help identify and mitigate potential security threats, protecting the system and its data from potential compromise. | update | 107 

|<<prebuilt-rule-8-15-9-potential-linux-ransomware-note-creation-detected, Potential Linux Ransomware Note Creation Detected>> | This rule identifies a sequence of a mass file encryption event in conjunction with the creation of a .txt file with a file name containing ransomware keywords executed by the same process in a 1 second timespan. Ransomware is a type of malware that encrypts a victim's files or systems and demands payment (usually in cryptocurrency) in exchange for the decryption key. One important indicator of a ransomware attack is the mass encryption of the file system, after which a new file extension is added to the file. | update | 10 

|<<prebuilt-rule-8-15-9-apt-package-manager-configuration-file-creation, APT Package Manager Configuration File Creation>> | Detects file creation events in the configuration directory for the APT package manager. In Linux, APT (Advanced Package Tool) is a command-line utility used for handling packages on (by default) Debian-based systems, providing functions for installing, updating, upgrading, and removing software along with managing package repositories. Attackers can backdoor APT to gain persistence by injecting malicious code into scripts that APT runs, thereby ensuring continued unauthorized access or control each time APT is used for package management. | update | 4 

|<<prebuilt-rule-8-15-9-chkconfig-service-add, Chkconfig Service Add>> | Detects the use of the chkconfig binary to manually add a service for management by chkconfig. Threat actors may utilize this technique to maintain persistence on a system. When a new service is added, chkconfig ensures that the service has either a start or a kill entry in every runlevel and when the system is rebooted the service file added will run providing long-term persistence. | update | 113 

|<<prebuilt-rule-8-15-9-modification-of-openssh-binaries, Modification of OpenSSH Binaries>> | Adversaries may modify SSH related binaries for persistence or credential access by patching sensitive functions to enable unauthorized access or by logging SSH credentials for exfiltration. | update | 110 

|<<prebuilt-rule-8-15-9-cron-job-created-or-modified, Cron Job Created or Modified>> | This rule monitors for (ana)cron jobs being created or renamed. Linux cron jobs are scheduled tasks that can be leveraged by system administrators to set up scheduled tasks, but may be abused by malicious actors for persistence, privilege escalation and command execution. By creating or modifying cron job configurations, attackers can execute malicious commands or scripts at predefined intervals, ensuring their continued presence and enabling unauthorized activities. | update | 14 

|<<prebuilt-rule-8-15-9-unusual-dpkg-execution, Unusual DPKG Execution>> | This rule detects the execution of the DPKG command by processes not associated with the DPKG package manager. The DPKG command is used to install, remove, and manage Debian packages on a Linux system. Attackers can abuse the DPKG command to install malicious packages on a system. | update | 2 

|<<prebuilt-rule-8-15-9-git-hook-created-or-modified, Git Hook Created or Modified>> | This rule detects the creation or modification of a Git hook file on a Linux system. Git hooks are scripts that Git executes before or after events such as commit, push, and receive. They are used to automate tasks, enforce policies, and customize Git's behavior. Attackers can abuse Git hooks to maintain persistence on a system by executing malicious code whenever a specific Git event occurs. | update | 3 

|<<prebuilt-rule-8-15-9-system-v-init-script-created, System V Init Script Created>> | Files that are placed in the /etc/init.d/ directory in Unix can be used to start custom applications, services, scripts or commands during start-up. Init.d has been mostly replaced in favor of Systemd. However, the "systemd-sysv-generator" can convert init.d files to service unit files that run at boot. Adversaries may add or alter files located in the /etc/init.d/ directory to execute malicious code upon boot in order to gain persistence on the system. | update | 13 

|<<prebuilt-rule-8-15-9-kernel-module-load-via-insmod, Kernel Module Load via insmod>> | Detects the use of the insmod binary to load a Linux kernel object file. Threat actors can use this binary, given they have root privileges, to load a rootkit on a system providing them with complete control and the ability to hide from security products. Manually loading a kernel module in this manner should not be at all common and can indicate suspcious or malicious behavior. | update | 110 

|<<prebuilt-rule-8-15-9-persistence-via-kde-autostart-script-or-desktop-file-modification, Persistence via KDE AutoStart Script or Desktop File Modification>> | Identifies the creation or modification of a K Desktop Environment (KDE) AutoStart script or desktop file that will execute upon each user logon. Adversaries may abuse this method for persistence. | update | 114 

|<<prebuilt-rule-8-15-9-linux-user-added-to-privileged-group, Linux User Added to Privileged Group>> | Identifies attempts to add a user to a privileged group. Attackers may add users to a privileged group in order to establish persistence on a system. | update | 8 

|<<prebuilt-rule-8-15-9-setcap-setuid-setgid-capability-set, Setcap setuid/setgid Capability Set>> | This rule monitors for the addition of the cap_setuid+ep or cap_setgid+ep capabilities via setcap. Setuid (Set User ID) and setgid (Set Group ID) are Unix-like OS features that enable processes to run with elevated privileges, based on the file owner or group. Threat actors can exploit these attributes to achieve persistence by creating malicious binaries, allowing them to maintain control over a compromised system with elevated permissions. | update | 6 

|<<prebuilt-rule-8-15-9-shared-object-created-or-changed-by-previously-unknown-process, Shared Object Created or Changed by Previously Unknown Process>> | This rule monitors the creation of shared object files by previously unknown processes. The creation of a shared object file involves compiling code into a dynamically linked library that can be loaded by other programs at runtime. While this process is typically used for legitimate purposes, malicious actors can leverage shared object files to execute unauthorized code, inject malicious functionality into legitimate processes, or bypass security controls. This allows malware to persist on the system, evade detection, and potentially compromise the integrity and confidentiality of the affected system and its data. | update | 9 

|<<prebuilt-rule-8-15-9-shell-configuration-creation-or-modification, Shell Configuration Creation or Modification>> | This rule monitors the creation/alteration of a shell configuration file. Unix systems use shell configuration files to set environment variables, create aliases, and customize the user's environment. Adversaries may modify or add a shell configuration file to execute malicious code and gain persistence in the system. This behavior is consistent with the Kaiji malware family. | update | 5 

|<<prebuilt-rule-8-15-9-network-connection-initiated-by-sshd-child-process, Network Connection Initiated by SSHD Child Process>> | This rule identifies an egress internet connection initiated by an SSH Daemon child process. This behavior is indicative of the alteration of a shell configuration file or other mechanism that launches a process when a new SSH login occurs. Attackers can also backdoor the SSH daemon to allow for persistence, call out to a C2 or to steal credentials. | update | 3 

|<<prebuilt-rule-8-15-9-potential-execution-via-xzbackdoor, Potential Execution via XZBackdoor>> | It identifies potential malicious shell executions through remote SSH and detects cases where the sshd service suddenly terminates soon after successful execution, suggesting suspicious behavior similar to the XZ backdoor. | update | 4 

|<<prebuilt-rule-8-15-9-systemd-generator-created, Systemd Generator Created>> | This rule detects the creation of a systemd generator file. Generators are small executables executed by systemd at bootup and during configuration reloads. Their main role is to convert non-native configuration and execution parameters into dynamically generated unit files, symlinks, or drop-ins, extending the unit file hierarchy for the service manager. Systemd generators can be used to execute arbitrary code at boot time, which can be leveraged by attackers to maintain persistence on a Linux system. | update | 3 

|<<prebuilt-rule-8-15-9-suspicious-network-connection-via-systemd, Suspicious Network Connection via systemd>> | Detects suspicious network events executed by systemd, potentially indicating persistence through a systemd backdoor. Systemd is a system and service manager for Linux operating systems, used to initialize and manage system processes. Attackers can backdoor systemd for persistence by creating or modifying systemd unit files to execute malicious scripts or commands, or by replacing legitimate systemd binaries with compromised ones, ensuring that their malicious code is automatically executed at system startup or during certain system events. | update | 3 

|<<prebuilt-rule-8-15-9-systemd-timer-created, Systemd Timer Created>> | Detects the creation of a systemd timer within any of the default systemd timer directories. Systemd timers can be used by an attacker to gain persistence, by scheduling the execution of a command or script. Similarly to cron/at, systemd timers can be set up to execute on boot time, or on a specific point in time, which allows attackers to regain access in case the connection to the infected asset was lost. | update | 15 

|<<prebuilt-rule-8-15-9-systemd-service-created, Systemd Service Created>> | This rule detects the creation or renaming of a new Systemd file in all of the common Systemd service locations for both root and regular users. Systemd service files are configuration files in Linux systems used to define and manage system services. Malicious actors can leverage systemd service files to achieve persistence by creating or modifying services to execute malicious commands or payloads during system startup or at a predefined interval by adding a systemd timer. This allows them to maintain unauthorized access, execute additional malicious activities, or evade detection. | update | 15 

|<<prebuilt-rule-8-15-9-systemd-udevd-rule-file-creation, Systemd-udevd Rule File Creation>> | Monitors for the creation of rule files that are used by systemd-udevd to manage device nodes and handle kernel device events in the Linux operating system. Systemd-udevd can be exploited for persistence by adversaries by creating malicious udev rules that trigger on specific events, executing arbitrary commands or payloads whenever a certain device is plugged in or recognized by the system. | update | 7 

|<<prebuilt-rule-8-15-9-yum-package-manager-plugin-file-creation, Yum Package Manager Plugin File Creation>> | Detects file creation events in the plugin directories for the Yum package manager. In Linux, Yum (Yellowdog Updater, Modified) is a command-line utility used for handling packages on (by default) Fedora-based systems, providing functions for installing, updating, upgrading, and removing software along with managing package repositories. Attackers can backdoor Yum to gain persistence by injecting malicious code into plugins that Yum runs, thereby ensuring continued unauthorized access or control each time Yum is used for package management. | update | 4 

|<<prebuilt-rule-8-15-9-potential-privilege-escalation-via-linux-dac-permissions, Potential Privilege Escalation via Linux DAC permissions>> | Identifies potential privilege escalation exploitation of DAC (Discretionary access control) file permissions. The rule identifies exploitation of DAC checks on sensitive file paths via suspicious processes whose capabilities include CAP_DAC_OVERRIDE (where a process can bypass all read write and execution checks) or CAP_DAC_READ_SEARCH (where a process can read any file or perform any executable permission on the directories). | update | 3 

|<<prebuilt-rule-8-15-9-kernel-load-or-unload-via-kexec-detected, Kernel Load or Unload via Kexec Detected>> | This detection rule identifies the usage of kexec, helping to uncover unauthorized kernel replacements and potential compromise of the system's integrity. Kexec is a Linux feature that enables the loading and execution of a different kernel without going through the typical boot process. Malicious actors can abuse kexec to bypass security measures, escalate privileges, establish persistence or hide their activities by loading a malicious kernel, enabling them to tamper with the system's trusted state, allowing e.g. a VM Escape. | update | 7 

|<<prebuilt-rule-8-15-9-privilege-escalation-via-suid-sgid, Privilege Escalation via SUID/SGID>> | Identifies instances where a process is executed with user/group ID 0 (root), and a real user/group ID that is not 0. This is indicative of a process that has been granted SUID/SGID permissions, allowing it to run with elevated privileges. Attackers may leverage a misconfiguration for exploitation in order to escalate their privileges to root, or establish a backdoor for persistence. | update | 3 

|<<prebuilt-rule-8-15-9-potential-shadow-file-read-via-command-line-utilities, Potential Shadow File Read via Command Line Utilities>> | Identifies access to the /etc/shadow file via the commandline using standard system utilities. After elevating privileges to root, threat actors may attempt to read or dump this file in order to gain valid credentials. They may utilize these to move laterally undetected and access additional resources. | update | 209 

|<<prebuilt-rule-8-15-9-privilege-escalation-via-cap-setuid-setgid-capabilities, Privilege Escalation via CAP_SETUID/SETGID Capabilities>> | Identifies instances where a process (granted CAP_SETUID and/or CAP_SETGID capabilities) is executed, after which the user's access is elevated to UID/GID 0 (root). In Linux, the CAP_SETUID and CAP_SETGID capabilities allow a process to change its UID and GID, respectively, providing control over user and group identity management. Attackers may leverage a misconfiguration for exploitation in order to escalate their privileges to root. | update | 4 

|<<prebuilt-rule-8-15-9-uid-elevation-from-previously-unknown-executable, UID Elevation from Previously Unknown Executable>> | Monitors for the elevation of regular user permissions to root permissions through a previously unknown executable. Attackers may attempt to evade detection by hijacking the execution flow and hooking certain functions/syscalls through a rootkit in order to provide easy access to root via a special modified command. | update | 4 

|<<prebuilt-rule-8-15-9-first-time-seen-commonly-abused-remote-access-tool-execution, First Time Seen Commonly Abused Remote Access Tool Execution>> | Adversaries may install legitimate remote access tools (RAT) to compromised endpoints for further command-and-control (C2). Adversaries can rely on installed RATs for persistence, execution of native commands and more. This rule detects when a process is started whose name or code signature resembles commonly abused RATs. This is a New Terms rule type indicating the host has not seen this RAT process started before within the last 30 days. | update | 108 

|<<prebuilt-rule-8-15-9-potential-remote-desktop-tunneling-detected, Potential Remote Desktop Tunneling Detected>> | Identifies potential use of an SSH utility to establish RDP over a reverse SSH Tunnel. This can be used by attackers to enable routing of network packets that would otherwise not reach their intended destination. | update | 415 

|<<prebuilt-rule-8-15-9-suspicious-screenconnect-client-child-process, Suspicious ScreenConnect Client Child Process>> | Identifies suspicious processes being spawned by the ScreenConnect client processes. This activity may indicate execution abusing unauthorized access to the ScreenConnect remote access software. | update | 306 

|<<prebuilt-rule-8-15-9-attempt-to-establish-vscode-remote-tunnel, Attempt to Establish VScode Remote Tunnel>> | Detects the execution of the VScode portable binary with the tunnel command line option indicating an attempt to establish a remote tunnel session to Github or a remote VScode instance. | update | 103 

|<<prebuilt-rule-8-15-9-potential-credential-access-via-windows-utilities, Potential Credential Access via Windows Utilities>> | Identifies the execution of known Windows utilities often abused to dump LSASS memory or the Active Directory database (NTDS.dit) in preparation for credential access. | update | 315 

|<<prebuilt-rule-8-15-9-firsttime-seen-account-performing-dcsync, FirstTime Seen Account Performing DCSync>> | This rule identifies when a User Account starts the Active Directory Replication Process for the first time. Attackers can use the DCSync technique to get credential information of individual accounts or the entire domain, thus compromising the entire domain. | update | 113 

|<<prebuilt-rule-8-15-9-network-logon-provider-registry-modification, Network Logon Provider Registry Modification>> | Identifies the modification of the network logon provider registry. Adversaries may register a rogue network logon provider module for persistence and/or credential access via intercepting the authentication credentials in clear text during user logon. | update | 213 

|<<prebuilt-rule-8-15-9-searching-for-saved-credentials-via-vaultcmd, Searching for Saved Credentials via VaultCmd>> | Windows Credential Manager allows you to create, view, or delete saved credentials for signing into websites, connected applications, and networks. An adversary may abuse this to list or dump credentials stored in the Credential Manager for saved usernames and passwords. This may also be performed in preparation of lateral movement. | update | 311 

|<<prebuilt-rule-8-15-9-potential-lsass-clone-creation-via-psscapturesnapshot, Potential LSASS Clone Creation via PssCaptureSnapShot>> | Identifies the creation of an LSASS process clone via PssCaptureSnapShot where the parent process is the initial LSASS process instance. This may indicate an attempt to evade detection and dump LSASS memory for credential access. | update | 208 

|<<prebuilt-rule-8-15-9-windows-cryptoapi-spoofing-vulnerability-cve-2020-0601-curveball, Windows CryptoAPI Spoofing Vulnerability (CVE-2020-0601 - CurveBall)>> | A spoofing vulnerability exists in the way Windows CryptoAPI (Crypt32.dll) validates Elliptic Curve Cryptography (ECC) certificates. An attacker could exploit the vulnerability by using a spoofed code-signing certificate to sign a malicious executable, making it appear the file was from a trusted, legitimate source. | update | 207 

|<<prebuilt-rule-8-15-9-process-execution-from-an-unusual-directory, Process Execution from an Unusual Directory>> | Identifies process execution from suspicious default Windows directories. This is sometimes done by adversaries to hide malware in trusted paths. | update | 313 

|<<prebuilt-rule-8-15-9-sip-provider-modification, SIP Provider Modification>> | Identifies modifications to the registered Subject Interface Package (SIP) providers. SIP providers are used by the Windows cryptographic system to validate file signatures on the system. This may be an attempt to bypass signature validation checks or inject code into critical processes. | update | 310 

|<<prebuilt-rule-8-15-9-suspicious-zoom-child-process, Suspicious Zoom Child Process>> | A suspicious Zoom child process was detected, which may indicate an attempt to run unnoticed. Verify process details such as command line, network connections, file writes and associated file signature details as well. | update | 415 

|<<prebuilt-rule-8-15-9-unusual-child-process-from-a-system-virtual-process, Unusual Child Process from a System Virtual Process>> | Identifies a suspicious child process of the Windows virtual system process, which could indicate code injection. | update | 312 

|<<prebuilt-rule-8-15-9-potential-evasion-via-filter-manager, Potential Evasion via Filter Manager>> | The Filter Manager Control Program (fltMC.exe) binary may be abused by adversaries to unload a filter driver and evade defenses. | update | 213 

|<<prebuilt-rule-8-15-9-execution-of-com-object-via-xwizard, Execution of COM object via Xwizard>> | Windows Component Object Model (COM) is an inter-process communication (IPC) component of the native Windows application programming interface (API) that enables interaction between software objects or executable code. Xwizard can be used to run a COM object created in registry to evade defensive counter measures. | update | 311 

|<<prebuilt-rule-8-15-9-suspicious-pdf-reader-child-process, Suspicious PDF Reader Child Process>> | Identifies suspicious child processes of PDF reader applications. These child processes are often launched via exploitation of PDF applications or social engineering. | update | 312 

|<<prebuilt-rule-8-15-9-microsoft-management-console-file-from-unusual-path, Microsoft Management Console File from Unusual Path>> | Identifies attempts to open a Microsoft Management Console File from untrusted paths. Adversaries may use MSC files for initial access and execution. | update | 306 

|<<prebuilt-rule-8-15-9-high-number-of-process-and-or-service-terminations, High Number of Process and/or Service Terminations>> | This rule identifies a high number (10) of process terminations (stop, delete, or suspend) from the same host within a short time period. | update | 212 

|<<prebuilt-rule-8-15-9-volume-shadow-copy-deletion-via-wmic, Volume Shadow Copy Deletion via WMIC>> | Identifies use of wmic.exe for shadow copy deletion on endpoints. This commonly occurs in tandem with ransomware or other destructive attacks. | update | 312 

|<<prebuilt-rule-8-15-9-execution-via-tsclient-mountpoint, Execution via TSClient Mountpoint>> | Identifies execution from the Remote Desktop Protocol (RDP) shared mountpoint tsclient on the target host. This may indicate a lateral movement attempt. | update | 312 

|<<prebuilt-rule-8-15-9-unusual-child-process-of-dns-exe, Unusual Child Process of dns.exe>> | Identifies an unexpected process spawning from dns.exe, the process responsible for Windows DNS server services, which may indicate activity related to remote code execution or other forms of exploitation. | update | 312 

|<<prebuilt-rule-8-15-9-uncommon-registry-persistence-change, Uncommon Registry Persistence Change>> | Detects changes to registry persistence keys that are not commonly used or modified by legitimate programs. This could be an indication of an adversary's attempt to persist in a stealthy manner. | update | 211 

|<<prebuilt-rule-8-15-9-persistence-via-update-orchestrator-service-hijack, Persistence via Update Orchestrator Service Hijack>> | Identifies potential hijacking of the Microsoft Update Orchestrator Service to establish persistence with an integrity level of SYSTEM. | update | 312 

|<<prebuilt-rule-8-15-9-unsigned-dll-loaded-by-dns-service, Unsigned DLL loaded by DNS Service>> | Identifies unusual DLLs loaded by the DNS Server process, potentially indicating the abuse of the ServerLevelPluginDll functionality. This can lead to privilege escalation and remote code execution with SYSTEM privileges. | update | 103 

|<<prebuilt-rule-8-15-9-potential-escalation-via-vulnerable-msi-repair, Potential Escalation via Vulnerable MSI Repair>> | Identifies when a browser process navigates to the Microsoft Help page followed by spawning an elevated process. This may indicate a successful exploitation for privilege escalation abusing a vulnerable Windows Installer repair setup. | update | 202 

|<<prebuilt-rule-8-15-9-suspicious-print-spooler-point-and-print-dll, Suspicious Print Spooler Point and Print DLL>> | Detects attempts to exploit a privilege escalation vulnerability (CVE-2020-1030) related to the print spooler service. Exploitation involves chaining multiple primitives to load an arbitrary DLL into the print spooler process running as SYSTEM. | update | 208 

|==============================================
