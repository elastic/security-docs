[[persistence-via-update-orchestrator-service-hijack]]
=== Persistence via Update Orchestrator Service Hijack

Identifies potential hijacking of the Microsoft Update Orchestrator Service to establish persistence with an integrity level of SYSTEM.

*Rule type*: eql

*Rule indices*:

* winlogbeat-*
* logs-endpoint.events.*
* logs-windows.*

*Severity*: high

*Risk score*: 73

*Runs every*: 5 minutes

*Searches indices from*: now-9m ({ref}/common-options.html#date-math[Date Math format], see also <<rule-schedule, `Additional look-back time`>>)

*Maximum alerts per execution*: 100

*References*:

* https://github.com/irsl/CVE-2020-1313

*Tags*:

* Elastic
* Host
* Windows
* Threat Detection
* Persistence
* CVE-2020-1313
* Investigation Guide

*Version*: 102 (<<persistence-via-update-orchestrator-service-hijack-history, version history>>)

*Added ({stack} release)*: 7.10.0

*Last modified ({stack} release)*: 8.6.0

*Rule authors*: Elastic

*Rule license*: Elastic License v2

==== Investigation guide


[source,markdown]
----------------------------------
## Triage and analysis

### Investigating Persistence via Update Orchestrator Service Hijack

Windows Update Orchestrator Service is a DCOM service used by other components to install Windows updates that are
already downloaded. Windows Update Orchestrator Service was vulnerable to elevation of privileges (any user to local
system) due to an improper authorization of the callers. The vulnerability affected the Windows 10 and Windows Server
Core products. Fixed by Microsoft on Patch Tuesday June 2020.

This rule will detect uncommon processes spawned by `svchost.exe` with `UsoSvc` as the command line parameters.
Attackers can leverage this technique to elevate privileges or maintain persistence.

> **Note**:
> This investigation guide uses the [Osquery Markdown Plugin]({security-guide}/invest-guide-run-osquery.html) introduced in Elastic stack version 8.5.0. Older Elastic stacks versions will see unrendered markdown in this guide.

#### Possible investigation steps

- Investigate the process execution chain (parent process tree) for unknown processes. Examine their executable files
for prevalence, whether they are located in expected locations, and if they are signed with valid digital signatures.
- Investigate any abnormal behavior by the subject process such as network connections, registry or file modifications,
and any spawned child processes.
- Investigate other alerts associated with the user/host during the past 48 hours.
- Assess whether this behavior is prevalent in the environment by looking for similar occurrences across hosts.
- Examine the host for derived artifacts that indicates suspicious activities:
  - Analyze the process executable using a private sandboxed analysis system.
  - Observe and collect information about the following activities in both the sandbox and the alert subject host:
    - Attempts to contact external domains and addresses.
      - Use the Elastic Defend network events to determine domains and addresses contacted by the subject process by
      filtering by the process' `process.entity_id`.
      - Examine the DNS cache for suspicious or anomalous entries.
        - !{osquery{"query":"SELECT * FROM dns_cache", "label":"Osquery - Retrieve DNS Cache"}}
    - Use the Elastic Defend registry events to examine registry keys accessed, modified, or created by the related
    processes in the process tree.
    - Examine the host services for suspicious or anomalous entries.
      - !{osquery{"query":"SELECT description, display_name, name, path, pid, service_type, start_type, status, user_account FROM services","label":"Osquery - Retrieve All Services"}}
      - !{osquery{"query":"SELECT description, display_name, name, path, pid, service_type, start_type, status, user_account FROM services WHERE NOT (user_account LIKE "%LocalSystem" OR user_account LIKE "%LocalService" OR user_account LIKE "%NetworkService" OR user_account == null)","label":"Osquery - Retrieve Services Running on User Accounts"}}
      - !{osquery{"query":"SELECT concat('https://www.virustotal.com/gui/file/', sha1) AS VtLink, name, description, start_type, status, pid, services.path FROM services JOIN authenticode ON services.path = authenticode.path OR services.module_path = authenticode.path JOIN hash ON services.path = hash.path WHERE authenticode.result != "trusted"","label":"Osquery - Retrieve Service Unsigned Executables with Virustotal Link"}}
  - Retrieve the files' SHA-256 hash values using the PowerShell `Get-FileHash` cmdlet and search for the existence and
  reputation of the hashes in resources like VirusTotal, Hybrid-Analysis, CISCO Talos, Any.run, etc.


### False positive analysis

- This activity is unlikely to happen legitimately. Benign true positives (B-TPs) can be added as exceptions if necessary.

### Response and remediation

- Initiate the incident response process based on the outcome of the triage.
- Isolate the involved host to prevent further post-compromise behavior.
- If the triage identified malware, search the environment for additional compromised hosts.
  - Implement temporary network rules, procedures, and segmentation to contain the malware.
  - Stop suspicious processes.
  - Immediately block the identified indicators of compromise (IoCs).
  - Inspect the affected systems for additional malware backdoors like reverse shells, reverse proxies, or droppers that
  attackers could use to reinfect the system.
- Remove and block malicious artifacts identified during triage.
- Investigate credential exposure on systems compromised or used by the attacker to ensure all compromised accounts are
identified. Reset passwords for these accounts and other potentially compromised credentials, such as email, business
systems, and web services.
- Run a full antimalware scan. This may reveal additional artifacts left in the system, persistence mechanisms, and
malware components.
- Determine the initial vector abused by the attacker and take action to prevent reinfection through the same vector.
- Using the incident response data, update logging and audit policies to improve the mean time to detect (MTTD) and the
mean time to respond (MTTR).
----------------------------------


==== Rule query


[source,js]
----------------------------------
process where event.type == "start" and process.parent.executable :
"C:\\Windows\\System32\\svchost.exe" and process.parent.args :
"UsoSvc" and not process.executable : ("?:\\ProgramData\\M
icrosoft\\Windows\\UUS\\Packages\\*\\amd64\\MoUsoCoreWorker.exe",
"?:\\Windows\\System32\\UsoClient.exe",
"?:\\Windows\\System32\\MusNotification.exe",
"?:\\Windows\\System32\\MusNotificationUx.exe",
"?:\\Windows\\System32\\MusNotifyIcon.exe",
"?:\\Windows\\System32\\WerFault.exe",
"?:\\Windows\\System32\\WerMgr.exe",
"?:\\Windows\\UUS\\amd64\\MoUsoCoreWorker.exe",
"?:\\Windows\\System32\\MoUsoCoreWorker.exe",
"?:\\Windows\\UUS\\amd64\\UsoCoreWorker.exe",
"?:\\Windows\\System32\\UsoCoreWorker.exe", "?:\\Program
Files\\Common Files\\microsoft
shared\\ClickToRun\\OfficeC2RClient.exe") and not process.name :
("MoUsoCoreWorker.exe", "OfficeC2RClient.exe")
----------------------------------

==== Threat mapping

*Framework*: MITRE ATT&CK^TM^

* Tactic:
** Name: Persistence
** ID: TA0003
** Reference URL: https://attack.mitre.org/tactics/TA0003/
* Technique:
** Name: Create or Modify System Process
** ID: T1543
** Reference URL: https://attack.mitre.org/techniques/T1543/

[[persistence-via-update-orchestrator-service-hijack-history]]
==== Rule version history

Version 102 (8.6.0 release)::
* Formatting only

Version 101 (8.5.0 release)::
* Updated query, changed from:
+
[source, js]
----------------------------------
process where event.type == "start" and process.parent.executable :
"C:\\Windows\\System32\\svchost.exe" and process.parent.args :
"UsoSvc" and not process.executable : ("?:\\ProgramData\\M
icrosoft\\Windows\\UUS\\Packages\\*\\amd64\\MoUsoCoreWorker.exe",
"?:\\Windows\\System32\\UsoClient.exe",
"?:\\Windows\\System32\\MusNotification.exe",
"?:\\Windows\\System32\\MusNotificationUx.exe",
"?:\\Windows\\System32\\MusNotifyIcon.exe",
"?:\\Windows\\System32\\WerFault.exe",
"?:\\Windows\\System32\\WerMgr.exe",
"?:\\Windows\\UUS\\amd64\\MoUsoCoreWorker.exe",
"?:\\Windows\\System32\\MoUsoCoreWorker.exe",
"?:\\Windows\\UUS\\amd64\\UsoCoreWorker.exe",
"?:\\Windows\\System32\\UsoCoreWorker.exe", "?:\\Program
Files\\Common Files\\microsoft
shared\\ClickToRun\\OfficeC2RClient.exe")
----------------------------------

Version 7 (8.4.0 release)::
* Updated query, changed from:
+
[source, js]
----------------------------------
process where event.type == "start" and process.parent.executable :
"C:\\Windows\\System32\\svchost.exe" and process.parent.args :
"UsoSvc" and not process.executable : (
"C:\\Windows\\System32\\UsoClient.exe",
"C:\\Windows\\System32\\MusNotification.exe",
"C:\\Windows\\System32\\MusNotificationUx.exe",
"C:\\Windows\\System32\\MusNotifyIcon.exe",
"C:\\Windows\\System32\\WerFault.exe",
"C:\\Windows\\System32\\WerMgr.exe" )
----------------------------------

Version 5 (8.2.0 release)::
* Formatting only

Version 4 (7.12.0 release)::
* Updated query, changed from:
+
[source, js]
----------------------------------
event.category:process and event.type:(start or process_started) and
process.parent.name:svchost.exe and process.parent.args:(UsoSvc or
usosvc) and not process.name:(UsoClient.exe or usoclient.exe or
MusNotification.exe or musnotification.exe or MusNotificationUx.exe or
musnotificationux.exe)
----------------------------------

Version 3 (7.11.2 release)::
* Formatting only

Version 2 (7.11.0 release)::
* Formatting only

