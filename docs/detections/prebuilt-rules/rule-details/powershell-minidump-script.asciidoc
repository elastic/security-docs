[[powershell-minidump-script]]
=== PowerShell MiniDump Script

This rule detects PowerShell scripts capable of dumping process memory using WindowsErrorReporting or Dbghelp.dll MiniDumpWriteDump. Attackers can use this tooling to dump LSASS and get access to credentials.

*Rule type*: query

*Rule indices*:

* winlogbeat-*
* logs-windows.*

*Severity*: high

*Risk score*: 73

*Runs every*: 5 minutes

*Searches indices from*: now-9m ({ref}/common-options.html#date-math[Date Math format], see also <<rule-schedule, `Additional look-back time`>>)

*Maximum alerts per execution*: 100

*References*:

* https://github.com/PowerShellMafia/PowerSploit/blob/master/Exfiltration/Out-Minidump.ps1
* https://github.com/FuzzySecurity/PowerShell-Suite/blob/master/Get-ProcessMiniDump.ps1
* https://github.com/atc-project/atc-data/blob/master/docs/Logging_Policies/LP_0109_windows_powershell_script_block_log.md

*Tags*:

* Elastic
* Host
* Windows
* Threat Detection
* Credential Access

*Version*: 6 (<<powershell-minidump-script-history, version history>>)

*Added ({stack} release)*: 7.16.0

*Last modified ({stack} release)*: 8.2.0

*Rule authors*: Elastic

*Rule license*: Elastic License v2

==== Potential false positives

PowerShell scripts that use this capability for troubleshooting.

==== Investigation guide


[source,markdown]
----------------------------------
## Triage and analysis.

### Investigating PowerShell MiniDump Script

PowerShell is one of the main tools system administrators use for automation, report routines, and other tasks. This
makes it available for use in various environments, and creates an attractive way for attackers to execute code.

Attackers can abuse Process Memory Dump capabilities to extract credentials from LSASS or to obtain other
privileged information stored in the process memory.

#### Possible investigation steps

- Examine script content that triggered the detection. 
- Investigate the script execution chain (parent process tree).
- Inspect any file or network events from the suspicious PowerShell host process instance.
- Investigate other alerts related to the user/host in the last 48 hours.
- Consider whether the user needs PowerShell to complete its tasks.
- Check if the imported function was executed and which process it targeted.

### False positive analysis

- Regular users do not have a business justification for using scripting utilities to dump process memory, making false
positives unlikely.

### Related rules

- PowerShell PSReflect Script - 56f2e9b5-4803-4e44-a0a4-a52dc79d57fe
- Potential Process Injection via PowerShell - 2e29e96a-b67c-455a-afe4-de6183431d0d

### Response and remediation

- Initiate the incident response process based on the outcome of the triage.
- Quarantine the involved host for forensic investigation, as well as eradication and recovery activities.
- Configure AppLocker or equivalent software to restrict access to PowerShell for regular users.
- Reset the password for the user account.

## Config

The 'PowerShell Script Block Logging' logging policy must be enabled.
Steps to implement the logging policy with with Advanced Audit Configuration:

```
Computer Configuration > 
Administrative Templates > 
Windows PowerShell > 
Turn on PowerShell Script Block Logging (Enable)
```

Steps to implement the logging policy via registry:

```
reg add "hklm\SOFTWARE\Policies\Microsoft\Windows\PowerShell\ScriptBlockLogging" /v EnableScriptBlockLogging /t REG_DWORD /d 1
```

----------------------------------


==== Rule query


[source,js]
----------------------------------
event.category:process and
powershell.file.script_block_text:(MiniDumpWriteDump or
MiniDumpWithFullMemory or pmuDetirWpmuDiniM)
----------------------------------

==== Threat mapping

*Framework*: MITRE ATT&CK^TM^

* Tactic:
** Name: Credential Access
** ID: TA0006
** Reference URL: https://attack.mitre.org/tactics/TA0006/
* Technique:
** Name: OS Credential Dumping
** ID: T1003
** Reference URL: https://attack.mitre.org/techniques/T1003/


* Tactic:
** Name: Execution
** ID: TA0002
** Reference URL: https://attack.mitre.org/tactics/TA0002/
* Technique:
** Name: Command and Scripting Interpreter
** ID: T1059
** Reference URL: https://attack.mitre.org/techniques/T1059/

[[powershell-minidump-script-history]]
==== Rule version history

Version 6 (8.2.0 release)::
* Formatting only

Version 5 (8.1.0 release)::
* Formatting only

Version 3 (8.0.0 release)::
* Updated query, changed from:
+
[source, js]
----------------------------------
event.code:"4104" and
powershell.file.script_block_text:(MiniDumpWriteDump or
MiniDumpWithFullMemory or pmuDetirWpmuDiniM)
----------------------------------

