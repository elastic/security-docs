[[uac-bypass-attempt-via-elevated-com-internet-explorer-add-on-installer]]
=== UAC Bypass Attempt via Elevated COM Internet Explorer Add-On Installer

Identifies User Account Control (UAC) bypass attempts by abusing an elevated COM Interface to launch a malicious program. Attackers may attempt to bypass UAC to stealthily execute code with elevated permissions.

*Rule type*: eql

*Rule indices*: 

* winlogbeat-*
* logs-endpoint.events.*
* logs-windows.*
* endgame-*

*Severity*: medium

*Risk score*: 47

*Runs every*: 5m

*Searches indices from*: now-9m ({ref}/common-options.html#date-math[Date Math format], see also <<rule-schedule, `Additional look-back time`>>)

*Maximum alerts per execution*: 100

*References*: 

* https://swapcontext.blogspot.com/2020/11/uac-bypasses-from-comautoapprovallist.html

*Tags*: 

* Domain: Endpoint
* OS: Windows
* Use Case: Threat Detection
* Tactic: Privilege Escalation
* Tactic: Defense Evasion
* Tactic: Execution
* Data Source: Elastic Endgame
* Data Source: Elastic Defend

*Version*: 107

*Rule authors*: 

* Elastic

*Rule license*: Elastic License v2


==== Setup


[source, markdown]
----------------------------------

If enabling an EQL rule on a non-elastic-agent index (such as beats) for versions <8.2,
events will not define `event.ingested` and default fallback for EQL rules was not added until version 8.2.
Hence for this rule to work effectively, users will need to add a custom ingest pipeline to populate
`event.ingested` to @timestamp.
For more details on adding a custom ingest pipeline refer - https://www.elastic.co/guide/en/fleet/current/data-streams-pipeline-tutorial.html

----------------------------------

==== Rule query


[source, js]
----------------------------------
process where host.os.type == "windows" and event.type == "start" and
 process.executable : "C:\\*\\AppData\\*\\Temp\\IDC*.tmp\\*.exe" and
 process.parent.name : "ieinstal.exe" and process.parent.args : "-Embedding"

 /* uncomment once in winlogbeat */
 /* and not (process.code_signature.subject_name == "Microsoft Corporation" and process.code_signature.trusted == true) */

----------------------------------

*Framework*: MITRE ATT&CK^TM^

* Tactic:
** Name: Privilege Escalation
** ID: TA0004
** Reference URL: https://attack.mitre.org/tactics/TA0004/
* Technique:
** Name: Abuse Elevation Control Mechanism
** ID: T1548
** Reference URL: https://attack.mitre.org/techniques/T1548/
* Sub-technique:
** Name: Bypass User Account Control
** ID: T1548.002
** Reference URL: https://attack.mitre.org/techniques/T1548/002/
* Tactic:
** Name: Defense Evasion
** ID: TA0005
** Reference URL: https://attack.mitre.org/tactics/TA0005/
* Technique:
** Name: Abuse Elevation Control Mechanism
** ID: T1548
** Reference URL: https://attack.mitre.org/techniques/T1548/
* Sub-technique:
** Name: Bypass User Account Control
** ID: T1548.002
** Reference URL: https://attack.mitre.org/techniques/T1548/002/
* Tactic:
** Name: Execution
** ID: TA0002
** Reference URL: https://attack.mitre.org/tactics/TA0002/
* Technique:
** Name: Inter-Process Communication
** ID: T1559
** Reference URL: https://attack.mitre.org/techniques/T1559/
* Sub-technique:
** Name: Component Object Model
** ID: T1559.001
** Reference URL: https://attack.mitre.org/techniques/T1559/001/
