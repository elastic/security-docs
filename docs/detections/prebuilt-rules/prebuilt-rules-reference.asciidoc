[[prebuilt-rules]]
[role="xpack"]
== Prebuilt rule reference

This section lists all available prebuilt rules.

IMPORTANT: To run {ml} prebuilt rules, you must have the
https://www.elastic.co/subscriptions[appropriate license] or use a
{ess-trial}[Cloud] deployment. All {ml} prebuilt rules are tagged with `ML`,
and their rule type is `machine_learning`.

[width="100%",options="header"]
|==============================================
|Rule |Description |Tags |Added |Version


|<<aws-access-secret-in-secrets-manager, AWS Access Secret in Secrets Manager>> |An adversary may attempt to access the secrets in secrets manager to steal certificates, credentials, or other sensitive material |[Elastic] [Cloud] [AWS] [Continuous Monitoring] [SecOps] [Data Protection]  |7.9.0 |5 <<aws-access-secret-in-secrets-manager-history, Version history>>

|<<aws-cloudtrail-log-created, AWS CloudTrail Log Created>> |Identifies the creation of an AWS log trail that specifies the settings for delivery of log data. |[Elastic] [Cloud] [AWS] [Continuous Monitoring] [SecOps] [Log Auditing]  |7.9.0 |6 <<aws-cloudtrail-log-created-history, Version history>>

|<<aws-cloudtrail-log-deleted, AWS CloudTrail Log Deleted>> |Identifies the deletion of an AWS log trail. An adversary may delete trails in an attempt to evade defenses. |[Elastic] [Cloud] [AWS] [Continuous Monitoring] [SecOps] [Log Auditing]  |7.9.0 |7 <<aws-cloudtrail-log-deleted-history, Version history>>

|<<aws-cloudtrail-log-suspended, AWS CloudTrail Log Suspended>> |Identifies suspending the recording of AWS API calls and log file delivery for the specified trail. An adversary may suspend trails in an attempt to evade defenses. |[Elastic] [Cloud] [AWS] [Continuous Monitoring] [SecOps] [Log Auditing]  |7.9.0 |6 <<aws-cloudtrail-log-suspended-history, Version history>>

|<<aws-cloudtrail-log-updated, AWS CloudTrail Log Updated>> |Identifies an update to an AWS log trail setting that specifies the delivery of log files. |[Elastic] [Cloud] [AWS] [Continuous Monitoring] [SecOps] [Log Auditing]  |7.9.0 |6 <<aws-cloudtrail-log-updated-history, Version history>>

|<<aws-cloudwatch-alarm-deletion, AWS CloudWatch Alarm Deletion>> |Identifies the deletion of an AWS CloudWatch alarm. An adversary may delete alarms in an attempt to evade defenses. |[Elastic] [Cloud] [AWS] [Continuous Monitoring] [SecOps] [Monitoring]  |7.9.0 |7 <<aws-cloudwatch-alarm-deletion-history, Version history>>

|<<aws-cloudwatch-log-group-deletion, AWS CloudWatch Log Group Deletion>> |Identifies the deletion of a specified AWS CloudWatch log group. When a log group is deleted, all the archived log events associated with the log group are also permanently deleted. |[Elastic] [Cloud] [AWS] [Continuous Monitoring] [SecOps] [Log Auditing]  |7.9.0 |7 <<aws-cloudwatch-log-group-deletion-history, Version history>>

|<<aws-cloudwatch-log-stream-deletion, AWS CloudWatch Log Stream Deletion>> |Identifies the deletion of an AWS CloudWatch log stream, which permanently deletes all associated archived log events with the stream. |[Elastic] [Cloud] [AWS] [Continuous Monitoring] [SecOps] [Log Auditing]  |7.9.0 |7 <<aws-cloudwatch-log-stream-deletion-history, Version history>>

|<<aws-config-service-tampering, AWS Config Service Tampering>> |Identifies attempts to delete an AWS Config Service resource. An adversary may tamper with Config services in order to reduce visibility into the security posture of an account and / or its workload instances. |[Elastic] [Cloud] [AWS] [Continuous Monitoring] [SecOps] [Monitoring]  |7.9.0 |6 <<aws-config-service-tampering-history, Version history>>

|<<aws-configuration-recorder-stopped, AWS Configuration Recorder Stopped>> |Identifies an AWS configuration change to stop recording a designated set of resources. |[Elastic] [Cloud] [AWS] [Continuous Monitoring] [SecOps] [Monitoring]  |7.9.0 |6 <<aws-configuration-recorder-stopped-history, Version history>>

|<<aws-deletion-of-rds-instance-or-cluster, AWS Deletion of RDS Instance or Cluster>> |Identifies the deletion of an Amazon Relational Database Service (RDS) Aurora database cluster, global database cluster, or database instance. |[Elastic] [Cloud] [AWS] [Continuous Monitoring] [SecOps] [Asset Visibility]  |7.9.0 |7 <<aws-deletion-of-rds-instance-or-cluster-history, Version history>>

|<<aws-ec2-encryption-disabled, AWS EC2 Encryption Disabled>> |Identifies disabling of Amazon Elastic Block Store (EBS) encryption by default in the current region. Disabling encryption by default does not change the encryption status of your existing volumes. |[Elastic] [Cloud] [AWS] [Continuous Monitoring] [SecOps] [Data Protection]  |7.9.0 |6 <<aws-ec2-encryption-disabled-history, Version history>>

|<<aws-ec2-flow-log-deletion, AWS EC2 Flow Log Deletion>> |Identifies the deletion of one or more flow logs in AWS Elastic Compute Cloud (EC2). An adversary may delete flow logs in an attempt to evade defenses. |[Elastic] [Cloud] [AWS] [Continuous Monitoring] [SecOps] [Log Auditing]  |7.9.0 |7 <<aws-ec2-flow-log-deletion-history, Version history>>

|<<aws-ec2-full-network-packet-capture-detected, AWS EC2 Full Network Packet Capture Detected>> |Identifies potential Traffic Mirroring in an Amazon Elastic Compute Cloud (EC2) instance. Traffic Mirroring is an Amazon VPC feature that you can use to copy network traffic from an Elastic network interface. This feature can potentially be abused to exfiltrate sensitive data from unencrypted internal traffic. |[Elastic] [Cloud] [AWS] [Continuous Monitoring] [SecOps] [Network Security]  |7.14.0 |2 <<aws-ec2-full-network-packet-capture-detected-history, Version history>>

|<<aws-ec2-network-access-control-list-creation, AWS EC2 Network Access Control List Creation>> |Identifies the creation of an AWS Elastic Compute Cloud (EC2) network access control list (ACL) or an entry in a network ACL with a specified rule number. |[Elastic] [Cloud] [AWS] [Continuous Monitoring] [SecOps] [Network Security]  |7.9.0 |7 <<aws-ec2-network-access-control-list-creation-history, Version history>>

|<<aws-ec2-network-access-control-list-deletion, AWS EC2 Network Access Control List Deletion>> |Identifies the deletion of an Amazon Elastic Compute Cloud (EC2) network access control list (ACL) or one of its ingress/egress entries. |[Elastic] [Cloud] [AWS] [Continuous Monitoring] [SecOps] [Network Security]  |7.9.0 |7 <<aws-ec2-network-access-control-list-deletion-history, Version history>>

|<<aws-ec2-snapshot-activity, AWS EC2 Snapshot Activity>> |An attempt was made to modify AWS EC2 snapshot attributes. Snapshots are sometimes shared by threat actors in order to exfiltrate bulk data from an EC2 fleet. If the permissions were modified, verify the snapshot was not shared with an unauthorized or unexpected AWS account. |[Elastic] [Cloud] [AWS] [Continuous Monitoring] [SecOps] [Asset Visibility]  |7.9.0 |5 <<aws-ec2-snapshot-activity-history, Version history>>

|<<aws-ec2-vm-export-failure, AWS EC2 VM Export Failure>> |Identifies an attempt to export an AWS EC2 instance. A virtual machine (VM) export may indicate an attempt to extract or exfiltrate information. |[Elastic] [Cloud] [AWS] [Continuous Monitoring] [SecOps] [Asset Visibility]  |7.14.0 |

|<<aws-efs-file-system-or-mount-deleted, AWS EFS File System or Mount Deleted>> |Detects when an EFS File System or Mount is deleted. An adversary could break any file system using the mount target that is being deleted, which might disrupt instances or applications using those mounts. The mount must be deleted prior to deleting the File System, or the adversary will be unable to delete the File System. |[Elastic] [Cloud] [AWS] [Continuous Monitoring] [SecOps] [Data Protection]  |7.16.0 |3 <<aws-efs-file-system-or-mount-deleted-history, Version history>>

|<<aws-elasticache-security-group-created, AWS ElastiCache Security Group Created>> |Identifies when an ElastiCache security group has been created. |[Elastic] [Cloud] [AWS] [Continuous Monitoring] [SecOps] [Monitoring]  |7.16.0 |2 <<aws-elasticache-security-group-created-history, Version history>>

|<<aws-elasticache-security-group-modified-or-deleted, AWS ElastiCache Security Group Modified or Deleted>> |Identifies when an ElastiCache security group has been modified or deleted. |[Elastic] [Cloud] [AWS] [Continuous Monitoring] [SecOps] [Monitoring]  |7.16.0 |2 <<aws-elasticache-security-group-modified-or-deleted-history, Version history>>

|<<aws-eventbridge-rule-disabled-or-deleted, AWS EventBridge Rule Disabled or Deleted>> |Identifies when a user has disabled or deleted an EventBridge rule. This activity can result in an unintended loss of visibility in applications or a break in the flow with other AWS services. |[Elastic] [Cloud] [AWS] [Continuous Monitoring] [SecOps] [Monitoring]  |7.16.0 |3 <<aws-eventbridge-rule-disabled-or-deleted-history, Version history>>

|<<aws-execution-via-system-manager, AWS Execution via System Manager>> |Identifies the execution of commands and scripts via System Manager. Execution methods such as RunShellScript, RunPowerShellScript, and alike can be abused by an authenticated attacker to install a backdoor or to interact with a compromised instance via reverse-shell using system only commands. |[Elastic] [Cloud] [AWS] [Continuous Monitoring] [SecOps] [Log Auditing]  |7.9.0 |6 <<aws-execution-via-system-manager-history, Version history>>

|<<aws-guardduty-detector-deletion, AWS GuardDuty Detector Deletion>> |Identifies the deletion of an Amazon GuardDuty detector. Upon deletion, GuardDuty stops monitoring the environment and all existing findings are lost. |[Elastic] [Cloud] [AWS] [Continuous Monitoring] [SecOps] [Monitoring]  |7.9.0 |7 <<aws-guardduty-detector-deletion-history, Version history>>

|<<aws-iam-assume-role-policy-update, AWS IAM Assume Role Policy Update>> |Identifies attempts to modify an AWS IAM Assume Role Policy. An adversary may attempt to modify the AssumeRolePolicy of a misconfigured role in order to gain the privileges of that role. |[Elastic] [Cloud] [AWS] [Continuous Monitoring] [SecOps] [Identity and Access]  |7.9.0 |5 <<aws-iam-assume-role-policy-update-history, Version history>>

|<<aws-iam-brute-force-of-assume-role-policy, AWS IAM Brute Force of Assume Role Policy>> |Identifies a high number of failed attempts to assume an AWS Identity and Access Management (IAM) role. IAM roles are used to delegate access to users or services. An adversary may attempt to enumerate IAM roles in order to determine if a role exists before attempting to assume or hijack the discovered role. |[Elastic] [Cloud] [AWS] [Continuous Monitoring] [SecOps] [Identity and Access]  |7.9.0 |5 <<aws-iam-brute-force-of-assume-role-policy-history, Version history>>

|<<aws-iam-deactivation-of-mfa-device, AWS IAM Deactivation of MFA Device>> |Identifies the deactivation of a specified multi-factor authentication (MFA) device and removes it from association with the user name for which it was originally enabled. In AWS Identity and Access Management (IAM), a device must be deactivated before it can be deleted. |[Elastic] [Cloud] [AWS] [Continuous Monitoring] [SecOps] [Monitoring]  |7.9.0 |5 <<aws-iam-deactivation-of-mfa-device-history, Version history>>

|<<aws-iam-group-creation, AWS IAM Group Creation>> |Identifies the creation of a group in AWS Identity and Access Management (IAM). Groups specify permissions for multiple users. Any user in a group automatically has the permissions that are assigned to the group. |[Elastic] [Cloud] [AWS] [Continuous Monitoring] [SecOps] [Identity and Access]  |7.9.0 |7 <<aws-iam-group-creation-history, Version history>>

|<<aws-iam-group-deletion, AWS IAM Group Deletion>> |Identifies the deletion of a specified AWS Identity and Access Management (IAM) resource group. Deleting a resource group does not delete resources that are members of the group; it only deletes the group structure. |[Elastic] [Cloud] [AWS] [Continuous Monitoring] [SecOps] [Monitoring]  |7.9.0 |6 <<aws-iam-group-deletion-history, Version history>>

|<<aws-iam-password-recovery-requested, AWS IAM Password Recovery Requested>> |Identifies AWS IAM password recovery requests. An adversary may attempt to gain unauthorized AWS access by abusing password recovery mechanisms. |[Elastic] [Cloud] [AWS] [Continuous Monitoring] [SecOps] [Identity and Access]  |7.9.0 |5 <<aws-iam-password-recovery-requested-history, Version history>>

|<<aws-iam-user-addition-to-group, AWS IAM User Addition to Group>> |Identifies the addition of a user to a specified group in AWS Identity and Access Management (IAM). |[Elastic] [Cloud] [AWS] [Continuous Monitoring] [SecOps] [Identity and Access]  |7.9.0 |6 <<aws-iam-user-addition-to-group-history, Version history>>

|<<aws-management-console-brute-force-of-root-user-identity, AWS Management Console Brute Force of Root User Identity>> |Identifies a high number of failed authentication attempts to the AWS management console for the Root user identity. An adversary may attempt to brute force the password for the Root user identity, as it has complete access to all services and resources for the AWS account. |[Elastic] [Cloud] [AWS] [Continuous Monitoring] [SecOps] [Identity and Access]  |7.10.0 |3 <<aws-management-console-brute-force-of-root-user-identity-history, Version history>>

|<<aws-management-console-root-login, AWS Management Console Root Login>> |Identifies a successful login to the AWS Management Console by the Root user. |[Elastic] [Cloud] [AWS] [Continuous Monitoring] [SecOps] [Identity and Access]  |7.9.0 |5 <<aws-management-console-root-login-history, Version history>>

|<<aws-rds-cluster-creation, AWS RDS Cluster Creation>> |Identifies the creation of a new Amazon Relational Database Service (RDS) Aurora DB cluster or global database spread across multiple regions. |[Elastic] [Cloud] [AWS] [Continuous Monitoring] [SecOps] [Asset Visibility]  |7.9.0 |7 <<aws-rds-cluster-creation-history, Version history>>

|<<aws-rds-instance-creation, AWS RDS Instance Creation>> |Identifies the creation of an Amazon Relational Database Service (RDS) Aurora database instance. |[Elastic] [Cloud] [AWS] [Continuous Monitoring] [SecOps] [Asset Visibility]  |7.14.0 |3 <<aws-rds-instance-creation-history, Version history>>

|<<aws-rds-instance-cluster-stoppage, AWS RDS Instance/Cluster Stoppage>> |Identifies that an Amazon Relational Database Service (RDS) cluster or instance has been stopped. |[Elastic] [Cloud] [AWS] [Continuous Monitoring] [SecOps] [Asset Visibility]  |7.9.0 |5 <<aws-rds-instance-cluster-stoppage-history, Version history>>

|<<aws-rds-security-group-creation, AWS RDS Security Group Creation>> |Identifies the creation of an Amazon Relational Database Service (RDS) Security group. |[Elastic] [Cloud] [AWS] [Continuous Monitoring] [SecOps] [Monitoring]  |7.14.0 |3 <<aws-rds-security-group-creation-history, Version history>>

|<<aws-rds-security-group-deletion, AWS RDS Security Group Deletion>> |Identifies the deletion of an Amazon Relational Database Service (RDS) Security group. |[Elastic] [Cloud] [AWS] [Continuous Monitoring] [SecOps] [Monitoring]  |7.14.0 |3 <<aws-rds-security-group-deletion-history, Version history>>

|<<aws-rds-snapshot-export, AWS RDS Snapshot Export>> |Identifies the export of an Amazon Relational Database Service (RDS) Aurora database snapshot. |[Elastic] [Cloud] [AWS] [Continuous Monitoring] [SecOps] [Asset Visibility]  |7.16.0 |1

|<<aws-rds-snapshot-restored, AWS RDS Snapshot Restored>> |Identifies when an attempt was made to restore an RDS Snapshot. Snapshots are sometimes shared by threat actors in order to exfiltrate bulk data. If the permissions were modified, verify if the snapshot was shared with an unauthorized or unexpected AWS account. |[Elastic] [Cloud] [AWS] [Continuous Monitoring] [SecOps] [Asset Visibility]  |7.16.0 |3 <<aws-rds-snapshot-restored-history, Version history>>

|<<aws-root-login-without-mfa, AWS Root Login Without MFA>> |Identifies attempts to login to AWS as the root user without using multi-factor authentication (MFA). Amazon AWS best practices indicate that the root user should be protected by MFA. |[Elastic] [Cloud] [AWS] [Continuous Monitoring] [SecOps] [Identity and Access]  |7.9.0 |5 <<aws-root-login-without-mfa-history, Version history>>

|<<aws-route-53-domain-transfer-lock-disabled, AWS Route 53 Domain Transfer Lock Disabled>> |Identifies when a transfer lock was removed from a Route 53 domain. It is recommended to refrain from performing this action unless intending to transfer the domain to a different registrar. |[Elastic] [Cloud] [AWS] [Continuous Monitoring] [SecOps] [Asset Visibility]  |7.14.0 |1

|<<aws-route-53-domain-transferred-to-another-account, AWS Route 53 Domain Transferred to Another Account>> |Identifies when a request has been made to transfer a Route 53 domain to another AWS account. |[Elastic] [Cloud] [AWS] [Continuous Monitoring] [SecOps] [Asset Visibility]  |7.14.0 |1

|<<aws-route-table-created, AWS Route Table Created>> |Identifies when an AWS Route Table has been created. |[Elastic] [Cloud] [AWS] [Continuous Monitoring] [SecOps] [Network Security]  |7.16.0 |2 <<aws-route-table-created-history, Version history>>

|<<aws-route-table-modified-or-deleted, AWS Route Table Modified or Deleted>> |Identifies when an AWS Route Table has been modified or deleted. |[Elastic] [Cloud] [AWS] [Continuous Monitoring] [SecOps] [Network Security]  |7.16.0 |2 <<aws-route-table-modified-or-deleted-history, Version history>>

|<<aws-route53-private-hosted-zone-associated-with-a-vpc, AWS Route53 private hosted zone associated with a VPC>> |Identifies when a Route53 private hosted zone has been associated with VPC. |[Elastic] [Cloud] [AWS] [Continuous Monitoring] [SecOps] [Asset Visibility]  |7.16.0 |1

|<<aws-s3-bucket-configuration-deletion, AWS S3 Bucket Configuration Deletion>> |Identifies the deletion of various Amazon Simple Storage Service (S3) bucket configuration components. |[Elastic] [Cloud] [AWS] [Continuous Monitoring] [SecOps] [Asset Visibility]  |7.9.0 |6 <<aws-s3-bucket-configuration-deletion-history, Version history>>

|<<aws-saml-activity, AWS SAML Activity>> |Identifies when SAML activity has occurred in AWS. An adversary could manipulate SAML to maintain access to the target. |[Elastic] [Cloud] [AWS] [Continuous Monitoring] [SecOps] [Identity and Access]  |7.16.0 |2 <<aws-saml-activity-history, Version history>>

|<<aws-sts-getsessiontoken-abuse, AWS STS GetSessionToken Abuse>> |Identifies the suspicious use of GetSessionToken. Tokens could be created and used by attackers to move laterally and escalate privileges. |[Elastic] [Cloud] [AWS] [Continuous Monitoring] [SecOps] [Identity and Access]  |7.16.0 |1

|<<aws-security-group-configuration-change-detection, AWS Security Group Configuration Change Detection>> |Identifies a change to an AWS Security Group Configuration. A security group is like a virtual firewall, and modifying configurations may allow unauthorized access. Threat actors may abuse this to establish persistence, exfiltrate data, or pivot in an AWS environment. |[Elastic] [Cloud] [AWS] [Continuous Monitoring] [SecOps] [Network Security]  |7.15.0 |4 <<aws-security-group-configuration-change-detection-history, Version history>>

|<<aws-security-token-service-sts-assumerole-usage, AWS Security Token Service (STS) AssumeRole Usage>> |Identifies the use of AssumeRole. AssumeRole returns a set of temporary security credentials that can be used to access AWS resources. An adversary could use those credentials to move laterally and escalate privileges. |[Elastic] [Cloud] [AWS] [Continuous Monitoring] [SecOps] [Identity and Access]  |7.16.0 |2 <<aws-security-token-service-sts-assumerole-usage-history, Version history>>

|<<aws-waf-access-control-list-deletion, AWS WAF Access Control List Deletion>> |Identifies the deletion of a specified AWS Web Application Firewall (WAF) access control list. |[Elastic] [Cloud] [AWS] [Continuous Monitoring] [SecOps] [Network Security]  |7.9.0 |7 <<aws-waf-access-control-list-deletion-history, Version history>>

|<<aws-waf-rule-or-rule-group-deletion, AWS WAF Rule or Rule Group Deletion>> |Identifies the deletion of a specified AWS Web Application Firewall (WAF) rule or rule group. |[Elastic] [Cloud] [AWS] [Continuous Monitoring] [SecOps] [Network Security]  |7.9.0 |8 <<aws-waf-rule-or-rule-group-deletion-history, Version history>>

|<<abnormally-large-dns-response, Abnormally Large DNS Response>> |Specially crafted DNS requests can manipulate a known overflow vulnerability in some Windows DNS servers, resulting in Remote Code Execution (RCE) or a Denial of Service (DoS) from crashing the service. |[Elastic] [Network] [Threat Detection] [Lateral Movement]  |7.10.0 |7 <<abnormally-large-dns-response-history, Version history>>

|<<access-of-stored-browser-credentials, Access of Stored Browser Credentials>> |Identifies the execution of a process with arguments pointing to known browser files that store passwords and cookies. Adversaries may acquire credentials from web browsers by reading files specific to the target browser. |[Elastic] [Host] [macOS] [Threat Detection] [Credential Access]  |7.12.0 |2 <<access-of-stored-browser-credentials-history, Version history>>

|<<access-to-keychain-credentials-directories, Access to Keychain Credentials Directories>> |Adversaries may collect the keychain storage data from a system to acquire credentials. Keychains are the built-in way for macOS to keep track of users' passwords and credentials for many services and features such as WiFi passwords, websites, secure notes and certificates. |[Elastic] [Host] [macOS] [Threat Detection] [Credential Access]  |7.10.0 |6 <<access-to-keychain-credentials-directories-history, Version history>>

|<<account-discovery-command-via-system-account, Account Discovery Command via SYSTEM Account>> |Identifies when the SYSTEM account uses an account discovery utility. This could be a sign of discovery activity after an adversary has achieved privilege escalation. |[Elastic] [Host] [Windows] [Threat Detection] [Discovery]  |7.7.0 |11 <<account-discovery-command-via-system-account-history, Version history>>

|<<account-password-reset-remotely, Account Password Reset Remotely>> |Identifies an attempt to reset an account password remotely. Adversaries may manipulate account passwords to maintain access or evade password duration policies and preserve compromised credentials. |[Elastic] [Host] [Windows] [Threat Detection] [Persistence]  |8.0.0 |3 <<account-password-reset-remotely-history, Version history>>

|<<account-configured-with-never-expiring-password, Account configured with never Expiring Password>> |Detects the creation and modification of an account with the "Don't Expire Password" option Enabled. Attackers can abuse this misconfiguration to persist in the domain and maintain long-term access using compromised accounts with this property. |[Elastic] [Host] [Windows] [Threat Detection] [Persistence] [Active Directory]  |8.2.0 |1

|<<adfind-command-activity, AdFind Command Activity>> |This rule detects the Active Directory query tool, AdFind.exe. AdFind has legitimate purposes, but it is frequently leveraged by threat actors to perform post-exploitation Active Directory reconnaissance. The AdFind tool has been observed in Trickbot, Ryuk, Maze, and FIN6 campaigns. For Winlogbeat, this rule requires Sysmon. |[Elastic] [Host] [Windows] [Threat Detection] [Discovery]  |7.11.0 |7 <<adfind-command-activity-history, Version history>>

|<<adding-hidden-file-attribute-via-attrib, Adding Hidden File Attribute via Attrib>> |Adversaries can add the 'hidden' attribute to files to hide them from the user in an attempt to evade detection. |[Elastic] [Host] [Windows] [Threat Detection] [Defense Evasion]  |7.6.0 |11 <<adding-hidden-file-attribute-via-attrib-history, Version history>>

|<<adminsdholder-backdoor, AdminSDHolder Backdoor>> |Detects modifications in the AdminSDHolder object. Attackers can abuse the SDProp process to implement a persistent backdoor in Active Directory. SDProp compares the permissions on protected objects with those defined on the AdminSDHolder object. If the permissions on any of the protected accounts and groups do not match, the permissions on the protected accounts and groups are reset to match those of the domain's AdminSDHolder object, regaining their Administrative Privileges. |[Elastic] [Host] [Windows] [Threat Detection] [Persistence] [Active Directory]  |8.1.0 |2 <<adminsdholder-backdoor-history, Version history>>

|<<adminsdholder-sdprop-exclusion-added, AdminSDHolder SDProp Exclusion Added>> |Identifies a modification on the dsHeuristics attribute on the bit that holds the configuration of groups excluded from the SDProp process. The SDProp compares the permissions on protected objects with those defined on the AdminSDHolder object. If the permissions on any of the protected accounts and groups do not match, the permissions on the protected accounts and groups are reset to match those of the domain's AdminSDHolder object, meaning that groups excluded will remain unchanged. Attackers can abuse this misconfiguration to maintain long-term access to privileged accounts in these groups. |[Elastic] [Host] [Windows] [Threat Detection] [Persistence] [Active Directory]  |8.2.0 |1

|<<administrator-privileges-assigned-to-an-okta-group, Administrator Privileges Assigned to an Okta Group>> |Detects when an administrator role is assigned to an Okta group. An adversary may attempt to assign administrator privileges to an Okta group in order to assign additional permissions to compromised user accounts and maintain access to their target organization. |[Elastic] [Identity] [Okta] [Continuous Monitoring] [SecOps] [Monitoring]  |7.9.0 |6 <<administrator-privileges-assigned-to-an-okta-group-history, Version history>>

|<<administrator-role-assigned-to-an-okta-user, Administrator Role Assigned to an Okta User>> |Identifies when an administrator role is assigned to an Okta user. An adversary may attempt to assign an administrator role to an Okta user in order to assign additional permissions to a user account and maintain access to their target's environment. |[Elastic] [Okta] [SecOps] [Monitoring] [Continuous Monitoring]  |7.11.0 |4 <<administrator-role-assigned-to-an-okta-user-history, Version history>>

|<<adobe-hijack-persistence, Adobe Hijack Persistence>> |Detects writing executable files that will be automatically launched by Adobe on launch. |[Elastic] [Host] [Windows] [Threat Detection] [Persistence]  |7.6.0 |10 <<adobe-hijack-persistence-history, Version history>>

|<<adversary-behavior-detected-elastic-endgame, Adversary Behavior - Detected - Elastic Endgame>> |Elastic Endgame detected an Adversary Behavior. Click the Elastic Endgame icon in the event.module column or the link in the rule.reference column for additional information. |[Elastic] [Elastic Endgame]  |7.6.0 |7 <<adversary-behavior-detected-elastic-endgame-history, Version history>>

|<<agent-spoofing-mismatched-agent-id, Agent Spoofing - Mismatched Agent ID>> |Detects events that have a mismatch on the expected event agent ID. The status "agent_id_mismatch" occurs when the expected agent ID associated with the API key does not match the actual agent ID in an event. This could indicate attempts to spoof events in order to masquerade actual activity to evade detection. |[Elastic] [Threat Detection] [Defense Evasion]  |7.14.0 |3 <<agent-spoofing-mismatched-agent-id-history, Version history>>

|<<agent-spoofing-multiple-hosts-using-same-agent, Agent Spoofing - Multiple Hosts Using Same Agent>> |Detects when multiple hosts are using the same agent ID. This could occur in the event of an agent being taken over and used to inject illegitimate documents into an instance as an attempt to spoof events in order to masquerade actual activity to evade detection. |[Elastic] [Threat Detection] [Defense Evasion]  |7.14.0 |2 <<agent-spoofing-multiple-hosts-using-same-agent-history, Version history>>

|<<anomalous-kernel-module-activity, Anomalous Kernel Module Activity>> |Looks for unusual kernel module activity. Kernel modules are sometimes used by malware and persistence mechanisms for stealth. |[Elastic] [Host] [Linux] [Threat Detection] [ML]  |7.10.0 |4 <<anomalous-kernel-module-activity-history, Version history>>

|<<anomalous-linux-compiler-activity, Anomalous Linux Compiler Activity>> |Looks for compiler activity by a user context which does not normally run compilers. This can be the result of ad-hoc software changes or unauthorized software deployment. This can also be due to local privilege elevation via locally run exploits or malware activity. |[Elastic] [Host] [Linux] [Threat Detection] [ML]  |7.10.0 |3 <<anomalous-linux-compiler-activity-history, Version history>>

|<<anomalous-process-for-a-linux-population, Anomalous Process For a Linux Population>> |Searches for rare processes running on multiple Linux hosts in an entire fleet or network. This reduces the detection of false positives since automated maintenance processes usually only run occasionally on a single machine but are common to all or many hosts in a fleet. |[Elastic] [Host] [Linux] [Threat Detection] [ML]  |7.7.0 |7 <<anomalous-process-for-a-linux-population-history, Version history>>

|<<anomalous-process-for-a-windows-population, Anomalous Process For a Windows Population>> |Searches for rare processes running on multiple hosts in an entire fleet or network. This reduces the detection of false positives since automated maintenance processes usually only run occasionally on a single machine but are common to all or many hosts in a fleet. |[Elastic] [Host] [Windows] [Threat Detection] [ML]  |7.7.0 |7 <<anomalous-process-for-a-windows-population-history, Version history>>

|<<anomalous-windows-process-creation, Anomalous Windows Process Creation>> |Identifies unusual parent-child process relationships that can indicate malware execution or persistence mechanisms. Malicious scripts often call on other applications and processes as part of their exploit payload. For example, when a malicious Office document runs scripts as part of an exploit payload, Excel or Word may start a script interpreter process, which, in turn, runs a script that downloads and executes malware. Another common scenario is Outlook running an unusual process when malware is downloaded in an email. Monitoring and identifying anomalous process relationships is a method of detecting new and emerging malware that is not yet recognized by anti-virus scanners. |[Elastic] [Host] [Windows] [Threat Detection] [ML]  |7.7.0 |5 <<anomalous-windows-process-creation-history, Version history>>

|<<apple-script-execution-followed-by-network-connection, Apple Script Execution followed by Network Connection>> |Detects execution via the Apple script interpreter (osascript) followed by a network connection from the same process within a short time period. Adversaries may use malicious scripts for execution and command and control. |[Elastic] [Host] [macOS] [Threat Detection] [Command and Control] [Execution]  |7.11.0 |3 <<apple-script-execution-followed-by-network-connection-history, Version history>>

|<<apple-scripting-execution-with-administrator-privileges, Apple Scripting Execution with Administrator Privileges>> |Identifies execution of the Apple script interpreter (osascript) without a password prompt and with administrator privileges. |[Elastic] [Host] [macOS] [Threat Detection] [Execution] [Privilege Escalation]  |7.12.0 |2 <<apple-scripting-execution-with-administrator-privileges-history, Version history>>

|<<application-added-to-google-workspace-domain, Application Added to Google Workspace Domain>> |Detects when a Google marketplace application is added to the Google Workspace domain. An adversary may add a malicious application to an organization’s Google Workspace domain in order to maintain a presence in their target’s organization and steal data. |[Elastic] [Cloud] [Google Workspace] [Continuous Monitoring] [SecOps] [Configuration Audit]  |7.11.0 |10 <<application-added-to-google-workspace-domain-history, Version history>>

|<<attempt-to-create-okta-api-token, Attempt to Create Okta API Token>> |Detects attempts to create an Okta API token. An adversary may create an Okta API token to maintain access to an organization's network while they work to achieve their objectives. An attacker may abuse an API token to execute techniques such as creating user accounts or disabling security rules or policies. |[Elastic] [Identity] [Okta] [Continuous Monitoring] [SecOps] [Monitoring]  |7.9.0 |6 <<attempt-to-create-okta-api-token-history, Version history>>

|<<attempt-to-deactivate-mfa-for-an-okta-user-account, Attempt to Deactivate MFA for an Okta User Account>> |Detects attempts to deactivate multi-factor authentication (MFA) for an Okta user. An adversary may deactivate MFA for an Okta user account in order to weaken the authentication requirements for the account. |[Elastic] [Identity] [Okta] [Continuous Monitoring] [SecOps] [Identity and Access]  |7.9.0 |6 <<attempt-to-deactivate-mfa-for-an-okta-user-account-history, Version history>>

|<<attempt-to-deactivate-an-okta-application, Attempt to Deactivate an Okta Application>> |Detects attempts to deactivate an Okta application. An adversary may attempt to modify, deactivate, or delete an Okta application in order to weaken an organization's security controls or disrupt their business operations. |[Elastic] [Identity] [Okta] [Continuous Monitoring] [SecOps] [Monitoring]  |7.11.0 |4 <<attempt-to-deactivate-an-okta-application-history, Version history>>

|<<attempt-to-deactivate-an-okta-network-zone, Attempt to Deactivate an Okta Network Zone>> |Detects attempts to deactivate an Okta network zone. Okta network zones can be configured to limit or restrict access to a network based on IP addresses or geolocations. An adversary may attempt to modify, delete, or deactivate an Okta network zone in order to remove or weaken an organization's security controls. |[Elastic] [Identity] [Okta] [Continuous Monitoring] [SecOps] [Network Security]  |7.11.0 |4 <<attempt-to-deactivate-an-okta-network-zone-history, Version history>>

|<<attempt-to-deactivate-an-okta-policy, Attempt to Deactivate an Okta Policy>> |Detects attempts to deactivate an Okta policy. An adversary may attempt to deactivate an Okta policy in order to weaken an organization's security controls. For example, an adversary may attempt to deactivate an Okta multi-factor authentication (MFA) policy in order to weaken the authentication requirements for user accounts. |[Elastic] [Identity] [Okta] [Continuous Monitoring] [SecOps] [Monitoring]  |7.9.0 |6 <<attempt-to-deactivate-an-okta-policy-history, Version history>>

|<<attempt-to-deactivate-an-okta-policy-rule, Attempt to Deactivate an Okta Policy Rule>> |Detects attempts to deactivate a rule within an Okta policy. An adversary may attempt to deactivate a rule within an Okta policy in order to remove or weaken an organization's security controls. |[Elastic] [Identity] [Okta] [Continuous Monitoring] [SecOps] [Identity and Access]  |7.9.0 |6 <<attempt-to-deactivate-an-okta-policy-rule-history, Version history>>

|<<attempt-to-delete-an-okta-application, Attempt to Delete an Okta Application>> |Detects attempts to delete an Okta application. An adversary may attempt to modify, deactivate, or delete an Okta application in order to weaken an organization's security controls or disrupt their business operations. |[Elastic] [Identity] [Okta] [Continuous Monitoring] [SecOps] [Monitoring]  |7.11.0 |4 <<attempt-to-delete-an-okta-application-history, Version history>>

|<<attempt-to-delete-an-okta-network-zone, Attempt to Delete an Okta Network Zone>> |Detects attempts to delete an Okta network zone. Okta network zones can be configured to limit or restrict access to a network based on IP addresses or geolocations. An adversary may attempt to modify, delete, or deactivate an Okta network zone in order to remove or weaken an organization's security controls. |[Elastic] [Identity] [Okta] [Continuous Monitoring] [SecOps] [Network Security]  |7.11.0 |4 <<attempt-to-delete-an-okta-network-zone-history, Version history>>

|<<attempt-to-delete-an-okta-policy, Attempt to Delete an Okta Policy>> |Detects attempts to delete an Okta policy. An adversary may attempt to delete an Okta policy in order to weaken an organization's security controls. For example, an adversary may attempt to delete an Okta multi-factor authentication (MFA) policy in order to weaken the authentication requirements for user accounts. |[Elastic] [Identity] [Okta] [Continuous Monitoring] [SecOps] [Monitoring]  |7.9.0 |6 <<attempt-to-delete-an-okta-policy-history, Version history>>

|<<attempt-to-delete-an-okta-policy-rule, Attempt to Delete an Okta Policy Rule>> |Detects attempts to delete a rule within an Okta policy. An adversary may attempt to delete an Okta policy rule in order to weaken an organization's security controls. |[Elastic] [Identity] [Okta] [Continuous Monitoring] [SecOps] [Monitoring]  |7.11.0 |4 <<attempt-to-delete-an-okta-policy-rule-history, Version history>>

|<<attempt-to-disable-gatekeeper, Attempt to Disable Gatekeeper>> |Detects attempts to disable Gatekeeper on macOS. Gatekeeper is a security feature that's designed to ensure that only trusted software is run. Adversaries may attempt to disable Gatekeeper before executing malicious code. |[Elastic] [Host] [macOS] [Threat Detection] [Defense Evasion]  |7.12.0 |1

|<<attempt-to-disable-iptables-or-firewall, Attempt to Disable IPTables or Firewall>> |Adversaries may attempt to disable the iptables or firewall service in an attempt to affect how a host is allowed to receive or send network traffic. |[Elastic] [Host] [Linux] [Threat Detection] [Defense Evasion]  |7.8.0 |7 <<attempt-to-disable-iptables-or-firewall-history, Version history>>

|<<attempt-to-disable-syslog-service, Attempt to Disable Syslog Service>> |Adversaries may attempt to disable the syslog service in an attempt to an attempt to disrupt event logging and evade detection by security controls. |[Elastic] [Host] [Linux] [Threat Detection] [Defense Evasion]  |7.8.0 |7 <<attempt-to-disable-syslog-service-history, Version history>>

|<<attempt-to-enable-the-root-account, Attempt to Enable the Root Account>> |Identifies attempts to enable the root account using the dsenableroot command. This command may be abused by adversaries for persistence, as the root account is disabled by default. |[Elastic] [Host] [macOS] [Threat Detection] [Persistence]  |7.12.0 |1

|<<attempt-to-install-root-certificate, Attempt to Install Root Certificate>> |Adversaries may install a root certificate on a compromised system to avoid warnings when connecting to their command and control servers. Root certificates are used in public key cryptography to identify a root certificate authority (CA). When a root certificate is installed, the system or application will trust certificates in the root's chain of trust that have been signed by the root certificate. |[Elastic] [Host] [macOS] [Threat Detection] [Defense Evasion]  |7.12.0 |1

|<<attempt-to-modify-an-okta-application, Attempt to Modify an Okta Application>> |Detects attempts to modify an Okta application. An adversary may attempt to modify, deactivate, or delete an Okta application in order to weaken an organization's security controls or disrupt their business operations. |[Elastic] [Identity] [Okta] [Continuous Monitoring] [SecOps] [Monitoring]  |7.11.0 |4 <<attempt-to-modify-an-okta-application-history, Version history>>

|<<attempt-to-modify-an-okta-network-zone, Attempt to Modify an Okta Network Zone>> |Detects attempts to modify an Okta network zone. Okta network zones can be configured to limit or restrict access to a network based on IP addresses or geolocations. An adversary may attempt to modify, delete, or deactivate an Okta network zone in order to remove or weaken an organization's security controls. |[Elastic] [Identity] [Okta] [Continuous Monitoring] [SecOps] [Network Security]  |7.9.0 |6 <<attempt-to-modify-an-okta-network-zone-history, Version history>>

|<<attempt-to-modify-an-okta-policy, Attempt to Modify an Okta Policy>> |Detects attempts to modify an Okta policy. An adversary may attempt to modify an Okta policy in order to weaken an organization's security controls. For example, an adversary may attempt to modify an Okta multi-factor authentication (MFA) policy in order to weaken the authentication requirements for user accounts. |[Elastic] [Identity] [Okta] [Continuous Monitoring] [SecOps] [Monitoring]  |7.9.0 |6 <<attempt-to-modify-an-okta-policy-history, Version history>>

|<<attempt-to-modify-an-okta-policy-rule, Attempt to Modify an Okta Policy Rule>> |Detects attempts to modify a rule within an Okta policy. An adversary may attempt to modify an Okta policy rule in order to weaken an organization's security controls. |[Elastic] [Identity] [Okta] [Continuous Monitoring] [SecOps] [Identity and Access]  |7.9.0 |6 <<attempt-to-modify-an-okta-policy-rule-history, Version history>>

|<<attempt-to-mount-smb-share-via-command-line, Attempt to Mount SMB Share via Command Line>> |Identifies the execution of macOS built-in commands to mount a Server Message Block (SMB) network share. Adversaries may use valid accounts to interact with a remote network share using SMB. |[Elastic] [Host] [macOS] [Threat Detection] [Lateral Movement]  |7.12.0 |2 <<attempt-to-mount-smb-share-via-command-line-history, Version history>>

|<<attempt-to-remove-file-quarantine-attribute, Attempt to Remove File Quarantine Attribute>> |Identifies a potential Gatekeeper bypass. In macOS, when applications or programs are downloaded from the internet, there is a quarantine flag set on the file. This attribute is read by Apple's Gatekeeper defense program at execution time. An adversary may disable this attribute to evade defenses. |[Elastic] [Host] [macOS] [Threat Detection] [Defense Evasion]  |7.11.0 |4 <<attempt-to-remove-file-quarantine-attribute-history, Version history>>

|<<attempt-to-reset-mfa-factors-for-an-okta-user-account, Attempt to Reset MFA Factors for an Okta User Account>> |Detects attempts to reset an Okta user's enrolled multi-factor authentication (MFA) factors. An adversary may attempt to reset the MFA factors for an Okta user's account in order to register new MFA factors and abuse the account to blend in with normal activity in the victim's environment. |[Elastic] [Identity] [Okta] [Continuous Monitoring] [SecOps] [Identity and Access]  |7.9.0 |6 <<attempt-to-reset-mfa-factors-for-an-okta-user-account-history, Version history>>

|<<attempt-to-revoke-okta-api-token, Attempt to Revoke Okta API Token>> |Identifies attempts to revoke an Okta API token. An adversary may attempt to revoke or delete an Okta API token to disrupt an organization's business operations. |[Elastic] [Identity] [Okta] [Continuous Monitoring] [SecOps] [Monitoring]  |7.9.0 |6 <<attempt-to-revoke-okta-api-token-history, Version history>>

|<<attempt-to-unload-elastic-endpoint-security-kernel-extension, Attempt to Unload Elastic Endpoint Security Kernel Extension>> |Identifies attempts to unload the Elastic Endpoint Security kernel extension via the kextunload command. |[Elastic] [Host] [macOS] [Threat Detection] [Defense Evasion]  |7.12.0 |1

|<<attempted-bypass-of-okta-mfa, Attempted Bypass of Okta MFA>> |Detects attempts to bypass Okta multi-factor authentication (MFA). An adversary may attempt to bypass the Okta MFA policies configured for an organization in order to obtain unauthorized access to an application. |[Elastic] [Identity] [Okta] [Continuous Monitoring] [SecOps] [Identity and Access]  |7.9.0 |6 <<attempted-bypass-of-okta-mfa-history, Version history>>

|<<attempts-to-brute-force-a-microsoft-365-user-account, Attempts to Brute Force a Microsoft 365 User Account>> |Identifies attempts to brute force a Microsoft 365 user account. An adversary may attempt a brute force attack to obtain unauthorized access to user accounts. |[Elastic] [Cloud] [Microsoft 365] [Continuous Monitoring] [SecOps] [Identity and Access]  |7.11.0 |6 <<attempts-to-brute-force-a-microsoft-365-user-account-history, Version history>>

|<<attempts-to-brute-force-an-okta-user-account, Attempts to Brute Force an Okta User Account>> |Identifies when an Okta user account is locked out 3 times within a 3 hour window. An adversary may attempt a brute force or password spraying attack to obtain unauthorized access to user accounts. The default Okta authentication policy ensures that a user account is locked out after 10 failed authentication attempts. |[Elastic] [Identity] [Okta] [Continuous Monitoring] [SecOps] [Identity and Access]  |7.10.0 |5 <<attempts-to-brute-force-an-okta-user-account-history, Version history>>

|<<auditd-login-attempt-at-forbidden-time, Auditd Login Attempt at Forbidden Time>> |Identifies that a login attempt occurred at a forbidden time. |[Elastic] [Host] [Linux] [Threat Detection] [Initial Access]  |7.12.0 |1

|<<auditd-login-from-forbidden-location, Auditd Login from Forbidden Location>> |Identifies that a login attempt has happened from a forbidden location. |[Elastic] [Host] [Linux] [Threat Detection] [Initial Access]  |7.12.0 |1

|<<auditd-max-failed-login-attempts, Auditd Max Failed Login Attempts>> |Identifies that the maximum number of failed login attempts has been reached for a user. |[Elastic] [Host] [Linux] [Threat Detection] [Initial Access]  |7.12.0 |1

|<<auditd-max-login-sessions, Auditd Max Login Sessions>> |Identifies that the maximum number login sessions has been reached for a user. |[Elastic] [Host] [Linux] [Threat Detection] [Initial Access]  |7.12.0 |1

|<<authorization-plugin-modification, Authorization Plugin Modification>> |Authorization plugins are used to extend the authorization services API and implement mechanisms that are not natively supported by the OS, such as multi-factor authentication with third party software. Adversaries may abuse this feature to persist and/or collect clear text credentials as they traverse the registered plugins during user logon. |[Elastic] [Host] [macOS] [Threat Detection] [Persistence]  |7.12.0 |1

|<<azure-ad-global-administrator-role-assigned, Azure AD Global Administrator Role Assigned>> |In Azure Active Directory (Azure AD), permissions to manage resources are assigned using roles. The Global Administrator is a role that enables users to have access to all administrative features in Azure AD and services that use Azure AD identities like the Microsoft 365 Defender portal, the Microsoft 365 compliance center, Exchange, SharePoint Online, and Skype for Business Online. Attackers can add users as Global Administrators to maintain access and manage all subscriptions and their settings and resources. |[Elastic] [Cloud] [Azure] [Continuous Monitoring] [SecOps] [Identity and Access]  |8.1.0 |2 <<azure-ad-global-administrator-role-assigned-history, Version history>>

|<<azure-active-directory-high-risk-sign-in, Azure Active Directory High Risk Sign-in>> |Identifies high risk Azure Active Directory (AD) sign-ins by leveraging Microsoft's Identity Protection machine learning and heuristics. Identity Protection categorizes risk into three tiers: low, medium, and high. While Microsoft does not provide specific details about how risk is calculated, each level brings higher confidence that the user or sign-in is compromised. |[Elastic] [Cloud] [Azure] [Continuous Monitoring] [SecOps] [Identity and Access]  |7.12.0 |3 <<azure-active-directory-high-risk-sign-in-history, Version history>>

|<<azure-active-directory-high-risk-user-sign-in-heuristic, Azure Active Directory High Risk User Sign-in Heuristic>> |Identifies high risk Azure Active Directory (AD) sign-ins by leveraging Microsoft Identity Protection machine learning and heuristics. |[Elastic] [Cloud] [Azure] [Continuous Monitoring] [SecOps] [Identity and Access]  |8.0.0 |1

|<<azure-active-directory-powershell-sign-in, Azure Active Directory PowerShell Sign-in>> |Identifies a sign-in using the Azure Active Directory PowerShell module. PowerShell for Azure Active Directory allows for managing settings from the command line, which is intended for users who are members of an admin role. |[Elastic] [Cloud] [Azure] [Continuous Monitoring] [SecOps] [Identity and Access]  |7.11.0 |4 <<azure-active-directory-powershell-sign-in-history, Version history>>

|<<azure-alert-suppression-rule-created-or-modified, Azure Alert Suppression Rule Created or Modified>> |Identifies the creation of suppression rules in Azure. Suppression rules are a mechanism used to suppress alerts previously identified as false positives or too noisy to be in production. This mechanism can be abused or mistakenly configured, resulting in defense evasions and loss of security visibility. |[Elastic] [Cloud] [Azure] [Continuous Monitoring] [SecOps] [Configuration Audit]  |8.0.0 |2 <<azure-alert-suppression-rule-created-or-modified-history, Version history>>

|<<azure-application-credential-modification, Azure Application Credential Modification>> |Identifies when a new credential is added to an application in Azure. An application may use a certificate or secret string to prove its identity when requesting a token. Multiple certificates and secrets can be added for an application and an adversary may abuse this by creating an additional authentication method to evade defenses or persist in an environment. |[Elastic] [Cloud] [Azure] [Continuous Monitoring] [SecOps] [Identity and Access]  |7.11.0 |4 <<azure-application-credential-modification-history, Version history>>

|<<azure-automation-account-created, Azure Automation Account Created>> |Identifies when an Azure Automation account is created. Azure Automation accounts can be used to automate management tasks and orchestrate actions across systems. An adversary may create an Automation account in order to maintain persistence in their target's environment. |[Elastic] [Cloud] [Azure] [Continuous Monitoring] [SecOps] [Identity and Access]  |7.10.0 |5 <<azure-automation-account-created-history, Version history>>

|<<azure-automation-runbook-created-or-modified, Azure Automation Runbook Created or Modified>> |Identifies when an Azure Automation runbook is created or modified. An adversary may create or modify an Azure Automation runbook to execute malicious code and maintain persistence in their target's environment. |[Elastic] [Cloud] [Azure] [Continuous Monitoring] [SecOps] [Configuration Audit]  |7.10.0 |5 <<azure-automation-runbook-created-or-modified-history, Version history>>

|<<azure-automation-runbook-deleted, Azure Automation Runbook Deleted>> |Identifies when an Azure Automation runbook is deleted. An adversary may delete an Azure Automation runbook in order to disrupt their target's automated business operations or to remove a malicious runbook that was used for persistence. |[Elastic] [Cloud] [Azure] [Continuous Monitoring] [SecOps] [Configuration Audit]  |7.10.0 |5 <<azure-automation-runbook-deleted-history, Version history>>

|<<azure-automation-webhook-created, Azure Automation Webhook Created>> |Identifies when an Azure Automation webhook is created. Azure Automation runbooks can be configured to execute via a webhook. A webhook uses a custom URL passed to Azure Automation along with a data payload specific to the runbook. An adversary may create a webhook in order to trigger a runbook that contains malicious code. |[Elastic] [Cloud] [Azure] [Continuous Monitoring] [SecOps] [Configuration Audit]  |7.10.0 |5 <<azure-automation-webhook-created-history, Version history>>

|<<azure-blob-container-access-level-modification, Azure Blob Container Access Level Modification>> |Identifies changes to container access levels in Azure. Anonymous public read access to containers and blobs in Azure is a way to share data broadly, but can present a security risk if access to sensitive data is not managed judiciously. |[Elastic] [Cloud] [Azure] [Continuous Monitoring] [SecOps] [Asset Visibility]  |7.10.0 |5 <<azure-blob-container-access-level-modification-history, Version history>>

|<<azure-blob-permissions-modification, Azure Blob Permissions Modification>> |Identifies when the Azure role-based access control (Azure RBAC) permissions are modified for an Azure Blob. An adversary may modify the permissions on a blob to weaken their target's security controls or an administrator may inadvertently modify the permissions, which could lead to data exposure or loss. |[Elastic] [Cloud] [Azure] [Continuous Monitoring] [SecOps] [Identity and Access]  |7.16.0 |1

|<<azure-command-execution-on-virtual-machine, Azure Command Execution on Virtual Machine>> |Identifies command execution on a virtual machine (VM) in Azure. A Virtual Machine Contributor role lets you manage virtual machines, but not access them, nor access the virtual network or storage account they’re connected to. However, commands can be run via PowerShell on the VM, which execute as System. Other roles, such as certain Administrator roles may be able to execute commands on a VM as well. |[Elastic] [Cloud] [Azure] [Continuous Monitoring] [SecOps] [Log Auditing]  |7.10.0 |5 <<azure-command-execution-on-virtual-machine-history, Version history>>

|<<azure-conditional-access-policy-modified, Azure Conditional Access Policy Modified>> |Identifies when an Azure Conditional Access policy is modified. Azure Conditional Access policies control access to resources via if-then statements. For example, if a user wants to access a resource, then they must complete an action such as using multi-factor authentication to access it. An adversary may modify a Conditional Access policy in order to weaken their target's security controls. |[Elastic] [Cloud] [Azure] [Continuous Monitoring] [SecOps] [Configuration Audit]  |7.10.0 |6 <<azure-conditional-access-policy-modified-history, Version history>>

|<<azure-diagnostic-settings-deletion, Azure Diagnostic Settings Deletion>> |Identifies the deletion of diagnostic settings in Azure, which send platform logs and metrics to different destinations. An adversary may delete diagnostic settings in an attempt to evade defenses. |[Elastic] [Cloud] [Azure] [Continuous Monitoring] [SecOps] [Monitoring]  |7.10.0 |5 <<azure-diagnostic-settings-deletion-history, Version history>>

|<<azure-event-hub-authorization-rule-created-or-updated, Azure Event Hub Authorization Rule Created or Updated>> |Identifies when an Event Hub Authorization Rule is created or updated in Azure. An authorization rule is associated with specific rights, and carries a pair of cryptographic keys. When you create an Event Hubs namespace, a policy rule named RootManageSharedAccessKey is created for the namespace. This has manage permissions for the entire namespace and it's recommended that you treat this rule like an administrative root account and don't use it in your application. |[Elastic] [Cloud] [Azure] [Continuous Monitoring] [SecOps] [Log Auditing]  |7.10.0 |5 <<azure-event-hub-authorization-rule-created-or-updated-history, Version history>>

|<<azure-event-hub-deletion, Azure Event Hub Deletion>> |Identifies an Event Hub deletion in Azure. An Event Hub is an event processing service that ingests and processes large volumes of events and data. An adversary may delete an Event Hub in an attempt to evade detection. |[Elastic] [Cloud] [Azure] [Continuous Monitoring] [SecOps] [Log Auditing]  |7.10.0 |6 <<azure-event-hub-deletion-history, Version history>>

|<<azure-external-guest-user-invitation, Azure External Guest User Invitation>> |Identifies an invitation to an external user in Azure Active Directory (AD). Azure AD is extended to include collaboration, allowing you to invite people from outside your organization to be guest users in your cloud account. Unless there is a business need to provision guest access, it is best practice avoid creating guest users. Guest users could potentially be overlooked indefinitely leading to a potential vulnerability. |[Elastic] [Cloud] [Azure] [Continuous Monitoring] [SecOps] [Identity and Access]  |7.10.0 |5 <<azure-external-guest-user-invitation-history, Version history>>

|<<azure-firewall-policy-deletion, Azure Firewall Policy Deletion>> |Identifies the deletion of a firewall policy in Azure. An adversary may delete a firewall policy in an attempt to evade defenses and/or to eliminate barriers to their objective. |[Elastic] [Cloud] [Azure] [Continuous Monitoring] [SecOps] [Network Security]  |7.10.0 |6 <<azure-firewall-policy-deletion-history, Version history>>

|<<azure-frontdoor-web-application-firewall-waf-policy-deleted, Azure Frontdoor Web Application Firewall (WAF) Policy Deleted>> |Identifies the deletion of a Frontdoor Web Application Firewall (WAF) Policy in Azure. An adversary may delete a Frontdoor Web Application Firewall (WAF) Policy in an attempt to evade defenses and/or to eliminate barriers to their objective. |[Elastic] [Cloud] [Azure] [Continuous Monitoring] [SecOps] [Network Security]  |7.16.0 |2 <<azure-frontdoor-web-application-firewall-waf-policy-deleted-history, Version history>>

|<<azure-full-network-packet-capture-detected, Azure Full Network Packet Capture Detected>> |Identifies potential full network packet capture in Azure. Packet Capture is an Azure Network Watcher feature that can be used to inspect network traffic. This feature can potentially be abused to read sensitive data from unencrypted internal traffic. |[Elastic] [Cloud] [Azure] [Continuous Monitoring] [SecOps] [Monitoring]  |7.16.0 |1

|<<azure-global-administrator-role-addition-to-pim-user, Azure Global Administrator Role Addition to PIM User>> |Identifies an Azure Active Directory (AD) Global Administrator role addition to a Privileged Identity Management (PIM) user account. PIM is a service that enables you to manage, control, and monitor access to important resources in an organization. Users who are assigned to the Global administrator role can read and modify any administrative setting in your Azure AD organization. |[Elastic] [Cloud] [Azure] [Continuous Monitoring] [SecOps] [Identity and Access]  |7.10.0 |5 <<azure-global-administrator-role-addition-to-pim-user-history, Version history>>

|<<azure-key-vault-modified, Azure Key Vault Modified>> |Identifies modifications to a Key Vault in Azure. The Key Vault is a service that safeguards encryption keys and secrets like certificates, connection strings, and passwords. Because this data is sensitive and business critical, access to key vaults should be secured to allow only authorized applications and users. |[Elastic] [Cloud] [Azure] [Continuous Monitoring] [SecOps] [Data Protection]  |7.10.0 |5 <<azure-key-vault-modified-history, Version history>>

|<<azure-kubernetes-events-deleted, Azure Kubernetes Events Deleted>> |Identifies when events are deleted in Azure Kubernetes. Kubernetes events are objects that log any state changes. Example events are a container creation, an image pull, or a pod scheduling on a node. An adversary may delete events in Azure Kubernetes in an attempt to evade detection. |[Elastic] [Cloud] [Azure] [Continuous Monitoring] [SecOps] [Log Auditing]  |7.16.0 |4 <<azure-kubernetes-events-deleted-history, Version history>>

|<<azure-kubernetes-pods-deleted, Azure Kubernetes Pods Deleted>> |Identifies the deletion of Azure Kubernetes Pods. Adversaries may delete a Kubernetes pod to disrupt the normal behavior of the environment. |[Elastic] [Cloud] [Azure] [Continuous Monitoring] [SecOps] [Asset Visibility]  |7.16.0 |3 <<azure-kubernetes-pods-deleted-history, Version history>>

|<<azure-kubernetes-rolebindings-created, Azure Kubernetes Rolebindings Created>> |Identifies the creation of role binding or cluster role bindings. You can assign these roles to Kubernetes subjects (users, groups, or service accounts) with role bindings and cluster role bindings. An adversary who has permissions to create bindings and cluster-bindings in the cluster can create a binding to the cluster-admin ClusterRole or to other high privileges roles. |[Elastic] [Cloud] [Azure] [Continuous Monitoring] [SecOps] [Identity and Access]  |8.0.0 |1

|<<azure-network-watcher-deletion, Azure Network Watcher Deletion>> |Identifies the deletion of a Network Watcher in Azure. Network Watchers are used to monitor, diagnose, view metrics, and enable or disable logs for resources in an Azure virtual network. An adversary may delete a Network Watcher in an attempt to evade defenses. |[Elastic] [Cloud] [Azure] [Continuous Monitoring] [SecOps] [Network Security]  |7.10.0 |6 <<azure-network-watcher-deletion-history, Version history>>

|<<azure-privilege-identity-management-role-modified, Azure Privilege Identity Management Role Modified>> |Azure Active Directory (AD) Privileged Identity Management (PIM) is a service that enables you to manage, control, and monitor access to important resources in an organization. PIM can be used to manage the built-in Azure resource roles such as Global Administrator and Application Administrator. An adversary may add a user to a PIM role in order to maintain persistence in their target's environment or modify a PIM role to weaken their target's security controls. |[Elastic] [Cloud] [Azure] [Continuous Monitoring] [SecOps] [Identity and Access]  |7.10.0 |5 <<azure-privilege-identity-management-role-modified-history, Version history>>

|<<azure-resource-group-deletion, Azure Resource Group Deletion>> |Identifies the deletion of a resource group in Azure, which includes all resources within the group. Deletion is permanent and irreversible. An adversary may delete a resource group in an attempt to evade defenses or intentionally destroy data. |[Elastic] [Cloud] [Azure] [Continuous Monitoring] [SecOps] [Log Auditing]  |7.10.0 |5 <<azure-resource-group-deletion-history, Version history>>

|<<azure-service-principal-addition, Azure Service Principal Addition>> |Identifies when a new service principal is added in Azure. An application, hosted service, or automated tool that accesses or modifies resources needs an identity created. This identity is known as a service principal. For security reasons, it's always recommended to use service principals with automated tools rather than allowing them to log in with a user identity. |[Elastic] [Cloud] [Azure] [Continuous Monitoring] [SecOps] [Identity and Access]  |7.11.0 |4 <<azure-service-principal-addition-history, Version history>>

|<<azure-service-principal-credentials-added, Azure Service Principal Credentials Added>> |Identifies when new Service Principal credentials have been added in Azure. In most organizations, credentials will be added to service principals infrequently. Hijacking an application (by adding a rogue secret or certificate) with granted permissions will allow the attacker to access data that is normally protected by MFA requirements. |[Elastic] [Cloud] [Azure] [Continuous Monitoring] [SecOps] [Identity and Access]  |7.14.0 |2 <<azure-service-principal-credentials-added-history, Version history>>

|<<azure-storage-account-key-regenerated, Azure Storage Account Key Regenerated>> |Identifies a rotation to storage account access keys in Azure. Regenerating access keys can affect any applications or Azure services that are dependent on the storage account key. Adversaries may regenerate a key as a means of acquiring credentials to access systems and resources. |[Elastic] [Cloud] [Azure] [Continuous Monitoring] [SecOps] [Identity and Access]  |7.10.0 |5 <<azure-storage-account-key-regenerated-history, Version history>>

|<<azure-virtual-network-device-modified-or-deleted, Azure Virtual Network Device Modified or Deleted>> |Identifies when a virtual network device is modified or deleted. This can be a network virtual appliance, virtual hub, or virtual router. |[Elastic] [Cloud] [Azure] [Continuous Monitoring] [SecOps] [Network Security]  |7.16.0 |2 <<azure-virtual-network-device-modified-or-deleted-history, Version history>>

|<<base16-or-base32-encoding-decoding-activity, Base16 or Base32 Encoding/Decoding Activity>> |Adversaries may encode/decode data in an attempt to evade detection by host- or network-based security controls. |[Elastic] [Host] [Linux] [Threat Detection] [Defense Evasion]  |7.8.0 |7 <<base16-or-base32-encoding-decoding-activity-history, Version history>>

|<<bash-shell-profile-modification, Bash Shell Profile Modification>> |Both ~/.bash_profile and ~/.bashrc are files containing shell commands that are run when Bash is invoked. These files are executed in a user's context, either interactively or non-interactively, when a user logs in so that their environment is set correctly. Adversaries may abuse this to establish persistence by executing malicious content triggered by a user’s shell. |[Elastic] [Host] [macOS] [Linux] [Threat Detection] [Persistence]  |7.12.0 |2 <<bash-shell-profile-modification-history, Version history>>

|<<bypass-uac-via-event-viewer, Bypass UAC via Event Viewer>> |Identifies User Account Control (UAC) bypass via eventvwr.exe. Attackers bypass UAC to stealthily execute code with elevated permissions. |[Elastic] [Host] [Windows] [Threat Detection] [Privilege Escalation]  |7.7.0 |10 <<bypass-uac-via-event-viewer-history, Version history>>

|<<clearing-windows-console-history, Clearing Windows Console History>> |Identifies when a user attempts to clear console history. An adversary may clear the command history of a compromised account to conceal the actions undertaken during an intrusion. |[Elastic] [Host] [Windows] [Threat Detection] [Defense Evasion]  |8.0.0 |2 <<clearing-windows-console-history-history, Version history>>

|<<clearing-windows-event-logs, Clearing Windows Event Logs>> |Identifies attempts to clear or disable Windows event log stores using Windows wevetutil command. This is often done by attackers in an attempt to evade detection or destroy forensic evidence on a system. |[Elastic] [Host] [Windows] [Threat Detection] [Defense Evasion]  |7.6.0 |12 <<clearing-windows-event-logs-history, Version history>>

|<<cobalt-strike-command-and-control-beacon, Cobalt Strike Command and Control Beacon>> |Cobalt Strike is a threat emulation platform commonly modified and used by adversaries to conduct network attack and exploitation campaigns. This rule detects a network activity algorithm leveraged by Cobalt Strike implant beacons for command and control. |[Elastic] [Network] [Threat Detection] [Command and Control] [Host]  |7.10.0 |6 <<cobalt-strike-command-and-control-beacon-history, Version history>>

|<<command-execution-via-solarwinds-process, Command Execution via SolarWinds Process>> |A suspicious SolarWinds child process (Cmd.exe or Powershell.exe) was detected. |[Elastic] [Host] [Windows] [Threat Detection] [Execution]  |7.11.0 |4 <<command-execution-via-solarwinds-process-history, Version history>>

|<<command-prompt-network-connection, Command Prompt Network Connection>> |Identifies cmd.exe making a network connection. Adversaries could abuse cmd.exe to download or execute malware from a remote URL. |[Elastic] [Host] [Windows] [Threat Detection] [Execution]  |7.6.0 |7 <<command-prompt-network-connection-history, Version history>>

|<<command-shell-activity-started-via-rundll32, Command Shell Activity Started via RunDLL32>> |Identifies command shell activity started via RunDLL32, which is commonly abused by attackers to host malicious code. |[Elastic] [Host] [Windows] [Threat Detection] [Execution]  |7.11.0 |5 <<command-shell-activity-started-via-rundll32-history, Version history>>

|<<component-object-model-hijacking, Component Object Model Hijacking>> |Identifies Component Object Model (COM) hijacking via registry modification. Adversaries may establish persistence by executing malicious content triggered by hijacked references to COM objects. |[Elastic] [Host] [Windows] [Threat Detection] [Persistence]  |7.11.0 |6 <<component-object-model-hijacking-history, Version history>>

|<<conhost-spawned-by-suspicious-parent-process, Conhost Spawned By Suspicious Parent Process>> |Detects when the Console Window Host (conhost.exe) process is spawned by a suspicious parent process, which could be indicative of code injection. |[Elastic] [Host] [Windows] [Threat Detection] [Execution]  |7.10.0 |5 <<conhost-spawned-by-suspicious-parent-process-history, Version history>>

|<<connection-to-commonly-abused-free-ssl-certificate-providers, Connection to Commonly Abused Free SSL Certificate Providers>> |Identifies unusual processes connecting to domains using known free SSL certificates. Adversaries may employ a known encryption algorithm to conceal command and control traffic. |[Elastic] [Host] [Windows] [Threat Detection] [Command and Control]  |7.11.0 |4 <<connection-to-commonly-abused-free-ssl-certificate-providers-history, Version history>>

|<<connection-to-commonly-abused-web-services, Connection to Commonly Abused Web Services>> |Adversaries may implement command and control (C2) communications that use common web services to hide their activity. This attack technique is typically targeted at an organization and uses web services common to the victim network, which allows the adversary to blend into legitimate traffic activity. These popular services are typically targeted since they have most likely been used before compromise, which helps malicious traffic blend in. |[Elastic] [Host] [Windows] [Threat Detection] [Command and Control]  |7.11.0 |8 <<connection-to-commonly-abused-web-services-history, Version history>>

|<<connection-to-external-network-via-telnet, Connection to External Network via Telnet>> |Telnet provides a command line interface for communication with a remote device or server. This rule identifies Telnet network connections to publicly routable IP addresses. |[Elastic] [Host] [Linux] [Threat Detection] [Lateral Movement]  |7.8.0 |6 <<connection-to-external-network-via-telnet-history, Version history>>

|<<connection-to-internal-network-via-telnet, Connection to Internal Network via Telnet>> |Telnet provides a command line interface for communication with a remote device or server. This rule identifies Telnet network connections to non-publicly routable IP addresses. |[Elastic] [Host] [Linux] [Threat Detection] [Lateral Movement]  |7.8.0 |6 <<connection-to-internal-network-via-telnet-history, Version history>>

|<<control-panel-process-with-unusual-arguments, Control Panel Process with Unusual Arguments>> |Identifies unusual instances of Control Panel with suspicious keywords or paths in the process command line value. Adversaries may abuse control.exe to proxy execution of malicious code. |[Elastic] [Host] [Windows] [Threat Detection] [Defense Evasion]  |7.16.0 |3 <<control-panel-process-with-unusual-arguments-history, Version history>>

|<<creation-of-hidden-files-and-directories, Creation of Hidden Files and Directories>> |Users can mark specific files as hidden simply by putting a "." as the first character in the file or folder name. Adversaries can use this to their advantage to hide files and folders on the system for persistence and defense evasion. This rule looks for hidden files or folders in common writable directories. |[Elastic] [Host] [Linux] [Threat Detection] [Defense Evasion]  |7.9.0 |8 <<creation-of-hidden-files-and-directories-history, Version history>>

|<<creation-of-hidden-launch-agent-or-daemon, Creation of Hidden Launch Agent or Daemon>> |Identifies the creation of a hidden launch agent or daemon. An adversary may establish persistence by installing a new launch agent or daemon which executes at login. |[Elastic] [Host] [macOS] [Threat Detection] [Persistence] [Defense Evasion]  |7.12.0 |2 <<creation-of-hidden-launch-agent-or-daemon-history, Version history>>

|<<creation-of-hidden-login-item-via-apple-script, Creation of Hidden Login Item via Apple Script>> |Identifies the execution of osascript to create a hidden login item. This may indicate an attempt to persist a malicious program while concealing its presence. |[Elastic] [Host] [macOS] [Threat Detection] [Persistence] [Execution]  |7.12.0 |2 <<creation-of-hidden-login-item-via-apple-script-history, Version history>>

|<<creation-of-a-hidden-local-user-account, Creation of a Hidden Local User Account>> |Identifies the creation of a hidden local user account by appending the dollar sign to the account name. This is sometimes done by attackers to increase access to a system and avoid appearing in the results of accounts listing using the net users command. |[Elastic] [Host] [Windows] [Threat Detection] [Persistence]  |7.12.0 |3 <<creation-of-a-hidden-local-user-account-history, Version history>>

|<<creation-or-modification-of-domain-backup-dpapi-private-key, Creation or Modification of Domain Backup DPAPI private key>> |Identifies the creation or modification of Domain Backup private keys. Adversaries may extract the Data Protection API (DPAPI) domain backup key from a Domain Controller (DC) to be able to decrypt any domain user master key file. |[Elastic] [Host] [Windows] [Threat Detection] [Credential Access]  |7.10.0 |7 <<creation-or-modification-of-domain-backup-dpapi-private-key-history, Version history>>

|<<creation-or-modification-of-root-certificate, Creation or Modification of Root Certificate>> |Identifies the creation or modification of a local trusted root certificate in Windows. The install of a malicious root certificate would allow an attacker the ability to masquerade malicious files as valid signed components from any entity (e.g. Microsoft). It could also allow an attacker to decrypt SSL traffic. |[Elastic] [Host] [Windows] [Threat Detection] [Defense Evasion]  |7.12.0 |2 <<creation-or-modification-of-root-certificate-history, Version history>>

|<<creation-or-modification-of-a-new-gpo-scheduled-task-or-service, Creation or Modification of a new GPO Scheduled Task or Service>> |Detects the creation or modification of a new Group Policy based scheduled task or service. These methods are used for legitimate system administration, but can also be abused by an attacker with domain admin permissions to execute a malicious payload remotely on all or a subset of the domain joined machines. |[Elastic] [Host] [Windows] [Threat Detection] [Persistence]  |7.10.0 |7 <<creation-or-modification-of-a-new-gpo-scheduled-task-or-service-history, Version history>>

|<<credential-acquisition-via-registry-hive-dumping, Credential Acquisition via Registry Hive Dumping>> |Identifies attempts to export a registry hive which may contain credentials using the Windows reg.exe tool. |[Elastic] [Host] [Windows] [Threat Detection] [Credential Access]  |7.11.0 |5 <<credential-acquisition-via-registry-hive-dumping-history, Version history>>

|<<credential-dumping-detected-elastic-endgame, Credential Dumping - Detected - Elastic Endgame>> |Elastic Endgame detected Credential Dumping. Click the Elastic Endgame icon in the event.module column or the link in the rule.reference column for additional information. |[Elastic] [Elastic Endgame]  |7.6.0 |7 <<credential-dumping-detected-elastic-endgame-history, Version history>>

|<<credential-dumping-prevented-elastic-endgame, Credential Dumping - Prevented - Elastic Endgame>> |Elastic Endgame prevented Credential Dumping. Click the Elastic Endgame icon in the event.module column or the link in the rule.reference column for additional information. |[Elastic] [Elastic Endgame]  |7.6.0 |7 <<credential-dumping-prevented-elastic-endgame-history, Version history>>

|<<credential-manipulation-detected-elastic-endgame, Credential Manipulation - Detected - Elastic Endgame>> |Elastic Endgame detected Credential Manipulation. Click the Elastic Endgame icon in the event.module column or the link in the rule.reference column for additional information. |[Elastic] [Elastic Endgame]  |7.6.0 |7 <<credential-manipulation-detected-elastic-endgame-history, Version history>>

|<<credential-manipulation-prevented-elastic-endgame, Credential Manipulation - Prevented - Elastic Endgame>> |Elastic Endgame prevented Credential Manipulation. Click the Elastic Endgame icon in the event.module column or the link in the rule.reference column for additional information. |[Elastic] [Elastic Endgame]  |7.6.0 |7 <<credential-manipulation-prevented-elastic-endgame-history, Version history>>

|<<cyberark-privileged-access-security-error, CyberArk Privileged Access Security Error>> |Identifies the occurrence of a CyberArk Privileged Access Security (PAS) error level audit event. The event.code correlates to the CyberArk Vault Audit Action Code. |[Elastic] [cyberarkpas] [SecOps] [Log Auditing] [Threat Detection] [Privilege Escalation]  |7.14.0 |1

|<<cyberark-privileged-access-security-recommended-monitor, CyberArk Privileged Access Security Recommended Monitor>> |Identifies the occurrence of a CyberArk Privileged Access Security (PAS) non-error level audit event which is recommended for monitoring by the vendor. The event.code correlates to the CyberArk Vault Audit Action Code. |[Elastic] [cyberarkpas] [SecOps] [Log Auditing] [Threat Detection] [Privilege Escalation]  |7.14.0 |1

|<<dns-activity-to-the-internet, DNS Activity to the Internet>> |This rule detects when an internal network client sends DNS traffic directly to the Internet. This is atypical behavior for a managed network and can be indicative of malware, exfiltration, command and control, or simply misconfiguration. This DNS activity also impacts your organization's ability to provide enterprise monitoring and logging of DNS, and it opens your network to a variety of abuses and malicious communications. |[Elastic] [Network] [Threat Detection] [Command and Control] [Host]  |7.6.0 |12 <<dns-activity-to-the-internet-history, Version history>>

|<<dns-tunneling, DNS Tunneling>> |A machine learning job detected unusually large numbers of DNS queries for a single top-level DNS domain, which is often used for DNS tunneling. DNS tunneling can be used for command-and-control, persistence, or data exfiltration activity. For example, dnscat tends to generate many DNS questions for a top-level domain as it uses the DNS protocol to tunnel data. |[Elastic] [Network] [Threat Detection] [ML]  |7.7.0 |4 <<dns-tunneling-history, Version history>>

|<<dns-over-https-enabled-via-registry, DNS-over-HTTPS Enabled via Registry>> |Identifies when a user enables DNS-over-HTTPS. This can be used to hide internet activity or the process of exfiltrating data. With this enabled, an organization will lose visibility into data such as query type, response, and originating IP, which are used to determine bad actors. |[Elastic] [Host] [Windows] [Threat Detection] [Defense Evasion]  |7.16.0 |3 <<dns-over-https-enabled-via-registry-history, Version history>>

|<<default-cobalt-strike-team-server-certificate, Default Cobalt Strike Team Server Certificate>> |This rule detects the use of the default Cobalt Strike Team Server TLS certificate. Cobalt Strike is software for Adversary Simulations and Red Team Operations which are security assessments that replicate the tactics and techniques of an advanced adversary in a network. Modifications to the Packetbeat configuration can be made to include MD5 and SHA256 hashing algorithms (the default is SHA1). See the References section for additional information on module configuration. |[Command and Control] [Post-Execution] [Threat Detection] [Elastic] [Network] [Host]  |7.11.0 |6 <<default-cobalt-strike-team-server-certificate-history, Version history>>

|<<delete-volume-usn-journal-with-fsutil, Delete Volume USN Journal with Fsutil>> |Identifies use of the fsutil.exe to delete the volume USNJRNL. This technique is used by attackers to eliminate evidence of files created during post-exploitation activities. |[Elastic] [Host] [Windows] [Threat Detection] [Defense Evasion]  |7.6.0 |10 <<delete-volume-usn-journal-with-fsutil-history, Version history>>

|<<deleting-backup-catalogs-with-wbadmin, Deleting Backup Catalogs with Wbadmin>> |Identifies use of the wbadmin.exe to delete the backup catalog. Ransomware and other malware may do this to prevent system recovery. |[Elastic] [Host] [Windows] [Threat Detection] [Impact]  |7.6.0 |11 <<deleting-backup-catalogs-with-wbadmin-history, Version history>>

|<<direct-outbound-smb-connection, Direct Outbound SMB Connection>> |Identifies unexpected processes making network connections over port 445. Windows File Sharing is typically implemented over Server Message Block (SMB), which communicates between hosts using port 445. When legitimate, these network connections are established by the kernel. Processes making 445/tcp connections may be port scanners, exploits, or suspicious user-level processes moving laterally. |[Elastic] [Host] [Windows] [Threat Detection] [Lateral Movement]  |7.6.0 |7 <<direct-outbound-smb-connection-history, Version history>>

|<<disable-windows-event-and-security-logs-using-built-in-tools, Disable Windows Event and Security Logs Using Built-in Tools>> |Identifies attempts to disable EventLog via the logman Windows utility, PowerShell, or auditpol. This is often done by attackers in an attempt to evade detection on a system. |[Elastic] [Host] [Windows] [Threat Detection] [Defense Evasion]  |7.14.0 |3 <<disable-windows-event-and-security-logs-using-built-in-tools-history, Version history>>

|<<disable-windows-firewall-rules-via-netsh, Disable Windows Firewall Rules via Netsh>> |Identifies use of the netsh.exe to disable or weaken the local firewall. Attackers will use this command line tool to disable the firewall during troubleshooting or to enable network mobility. |[Elastic] [Host] [Windows] [Threat Detection] [Defense Evasion]  |7.6.0 |11 <<disable-windows-firewall-rules-via-netsh-history, Version history>>

|<<disabling-user-account-control-via-registry-modification, Disabling User Account Control via Registry Modification>> |User Account Control (UAC) can help mitigate the impact of malware on Windows hosts. With UAC, apps and tasks always run in the security context of a non-administrator account, unless an administrator specifically authorizes administrator-level access to the system. This rule identifies registry value changes to bypass User Access Control (UAC) protection. |[Elastic] [Host] [Windows] [Threat Detection] [Privilege Escalation]  |7.12.0 |4 <<disabling-user-account-control-via-registry-modification-history, Version history>>

|<<disabling-windows-defender-security-settings-via-powershell, Disabling Windows Defender Security Settings via PowerShell>> |Identifies use of the Set-MpPreference PowerShell command to disable or weaken certain Windows Defender settings. |[Elastic] [Host] [Windows] [Threat Detection] [Defense Evasion]  |7.14.0 |3 <<disabling-windows-defender-security-settings-via-powershell-history, Version history>>

|<<domain-added-to-google-workspace-trusted-domains, Domain Added to Google Workspace Trusted Domains>> |Detects when a domain is added to the list of trusted Google Workspace domains. An adversary may add a trusted domain in order to collect and exfiltrate data from their target’s organization with less restrictive security controls. |[Elastic] [Cloud] [Google Workspace] [Continuous Monitoring] [SecOps] [Configuration Audit]  |7.11.0 |10 <<domain-added-to-google-workspace-trusted-domains-history, Version history>>

|<<dumping-account-hashes-via-built-in-commands, Dumping Account Hashes via Built-In Commands>> |Identifies the execution of macOS built-in commands used to dump user account hashes. Adversaries may attempt to dump credentials to obtain account login information in the form of a hash. These hashes can be cracked or leveraged for lateral movement. |[Elastic] [Host] [macOS] [Threat Detection] [Credential Access]  |7.12.0 |1

|<<dumping-of-keychain-content-via-security-command, Dumping of Keychain Content via Security Command>> |Adversaries may dump the content of the keychain storage data from a system to acquire credentials. Keychains are the built-in way for macOS to keep track of users' passwords and credentials for many services and features, including Wi-Fi and website passwords, secure notes, certificates, and Kerberos. |[Elastic] [Host] [macOS] [Threat Detection] [Credential Access]  |7.12.0 |2 <<dumping-of-keychain-content-via-security-command-history, Version history>>

|<<eggshell-backdoor-execution, EggShell Backdoor Execution>> |Identifies the execution of and EggShell Backdoor. EggShell is a known post exploitation tool for macOS and Linux. |[Elastic] [Host] [Linux] [macOS] [Threat Detection] [Execution]  |7.12.0 |1

|<<emond-rules-creation-or-modification, Emond Rules Creation or Modification>> |Identifies the creation or modification of the Event Monitor Daemon (emond) rules. Adversaries may abuse this service by writing a rule to execute commands when a defined event occurs, such as system start up or user authentication. |[Elastic] [Host] [macOS] [Threat Detection] [Persistence]  |7.12.0 |2 <<emond-rules-creation-or-modification-history, Version history>>

|<<enable-host-network-discovery-via-netsh, Enable Host Network Discovery via Netsh>> |Identifies use of the netsh.exe program to enable host discovery via the network. Attackers can use this command-line tool to weaken the host firewall settings. |[Elastic] [Host] [Windows] [Threat Detection] [Defense Evasion]  |7.14.0 |3 <<enable-host-network-discovery-via-netsh-history, Version history>>

|<<encoded-executable-stored-in-the-registry, Encoded Executable Stored in the Registry>> |Identifies registry write modifications to hide an encoded portable executable. This could be indicative of adversary defense evasion by avoiding the storing of malicious content directly on disk. |[Elastic] [Host] [Windows] [Threat Detection] [Defense Evasion]  |7.11.0 |5 <<encoded-executable-stored-in-the-registry-history, Version history>>

|<<encrypting-files-with-winrar-or-7z, Encrypting Files with WinRar or 7z>> |Identifies use of WinRar or 7z to create an encrypted files. Adversaries will often compress and encrypt data in preparation for exfiltration. |[Elastic] [Host] [Windows] [Threat Detection] [Collection]  |7.11.0 |5 <<encrypting-files-with-winrar-or-7z-history, Version history>>

|<<endpoint-security, Endpoint Security>> |Generates a detection alert each time an Elastic Endpoint Security alert is received. Enabling this rule allows you to immediately begin investigating your Endpoint alerts. |[Elastic] [Endpoint Security]  |7.9.0 |3 <<endpoint-security-history, Version history>>

|<<enumeration-command-spawned-via-wmiprvse, Enumeration Command Spawned via WMIPrvSE>> |Identifies native Windows host and network enumeration commands spawned by the Windows Management Instrumentation Provider Service (WMIPrvSE). |[Elastic] [Host] [Windows] [Threat Detection] [Execution]  |7.12.0 |3 <<enumeration-command-spawned-via-wmiprvse-history, Version history>>

|<<enumeration-of-administrator-accounts, Enumeration of Administrator Accounts>> |Identifies instances of lower privilege accounts enumerating Administrator accounts or groups using built-in Windows tools. |[Elastic] [Host] [Windows] [Threat Detection] [Discovery]  |7.11.0 |5 <<enumeration-of-administrator-accounts-history, Version history>>

|<<enumeration-of-kernel-modules, Enumeration of Kernel Modules>> |Loadable Kernel Modules (or LKMs) are pieces of code that can be loaded and unloaded into the kernel upon demand. They extend the functionality of the kernel without the need to reboot the system. This identifies attempts to enumerate information about a kernel module. |[Elastic] [Host] [Linux] [Threat Detection] [Discovery]  |7.8.0 |6 <<enumeration-of-kernel-modules-history, Version history>>

|<<enumeration-of-privileged-local-groups-membership, Enumeration of Privileged Local Groups Membership>> |Identifies instances of an unusual process enumerating built-in Windows privileged local groups membership like Administrators or Remote Desktop users. |[Elastic] [Host] [Windows] [Threat Detection] [Discovery]  |8.0.0 |3 <<enumeration-of-privileged-local-groups-membership-history, Version history>>

|<<enumeration-of-users-or-groups-via-built-in-commands, Enumeration of Users or Groups via Built-in Commands>> |Identifies the execution of macOS built-in commands related to account or group enumeration. |[Elastic] [Host] [macOS] [Threat Detection] [Discovery]  |7.12.0 |3 <<enumeration-of-users-or-groups-via-built-in-commands-history, Version history>>

|<<executable-file-creation-with-multiple-extensions, Executable File Creation with Multiple Extensions>> |Masquerading can allow an adversary to evade defenses and better blend in with the environment. One way it occurs is when the name or location of a file is manipulated as a means of tricking a user into executing what they think is a benign file type but is actually executable code. |[Elastic] [Host] [Windows] [Threat Detection] [Defense Evasion]  |7.12.0 |4 <<executable-file-creation-with-multiple-extensions-history, Version history>>

|<<execution-from-unusual-directory-command-line, Execution from Unusual Directory - Command Line>> |Identifies process execution from suspicious default Windows directories. This may be abused by adversaries to hide malware in trusted paths. |[Elastic] [Host] [Windows] [Threat Detection] [Execution]  |7.11.0 |5 <<execution-from-unusual-directory-command-line-history, Version history>>

|<<execution-of-com-object-via-xwizard, Execution of COM object via Xwizard>> |Windows Component Object Model (COM) is an inter-process communication (IPC) component of the native Windows application programming interface (API) that enables interaction between software objects or executable code. Xwizard can be used to run a COM object created in registry to evade defensive counter measures. |[Elastic] [Host] [Windows] [Threat Detection] [Execution]  |7.12.0 |2 <<execution-of-com-object-via-xwizard-history, Version history>>

|<<execution-of-file-written-or-modified-by-microsoft-office, Execution of File Written or Modified by Microsoft Office>> |Identifies an executable created by a Microsoft Office application and subsequently executed. These processes are often launched via scripts inside documents or during exploitation of Microsoft Office applications. |[Elastic] [Host] [Windows] [Threat Detection] [Execution]  |7.10.0 |5 <<execution-of-file-written-or-modified-by-microsoft-office-history, Version history>>

|<<execution-of-file-written-or-modified-by-pdf-reader, Execution of File Written or Modified by PDF Reader>> |Identifies a suspicious file that was written by a PDF reader application and subsequently executed. These processes are often launched via exploitation of PDF applications. |[Elastic] [Host] [Windows] [Threat Detection] [Execution]  |7.10.0 |4 <<execution-of-file-written-or-modified-by-pdf-reader-history, Version history>>

|<<execution-of-persistent-suspicious-program, Execution of Persistent Suspicious Program>> |Identifies execution of suspicious persistent programs (scripts, rundll32, etc.) by looking at process lineage and command line usage. |[Elastic] [Host] [Windows] [Threat Detection] [Persistence]  |7.11.0 |2 <<execution-of-persistent-suspicious-program-history, Version history>>

|<<execution-via-electron-child-process-node.js-module, Execution via Electron Child Process Node.js Module>> |Identifies attempts to execute a child process from within the context of an Electron application using the child_process Node.js module. Adversaries may abuse this technique to inherit permissions from parent processes. |[Elastic] [Host] [macOS] [Threat Detection] [Defense Evasion] [Execution]  |7.12.0 |1

|<<execution-via-mssql-xp_cmdshell-stored-procedure, Execution via MSSQL xp_cmdshell Stored Procedure>> |Identifies execution via MSSQL xp_cmdshell stored procedure. Malicious users may attempt to elevate their privileges by using xp_cmdshell, which is disabled by default, thus, it's important to review the context of it's use. |[Elastic] [Host] [Windows] [Threat Detection] [Execution]  |7.10.0 |5 <<execution-via-mssql-xp_cmdshell-stored-procedure-history, Version history>>

|<<execution-via-tsclient-mountpoint, Execution via TSClient Mountpoint>> |Identifies execution from the Remote Desktop Protocol (RDP) shared mountpoint tsclient on the target host. This may indicate a lateral movement attempt. |[Elastic] [Host] [Windows] [Threat Detection] [Lateral Movement]  |7.11.0 |4 <<execution-via-tsclient-mountpoint-history, Version history>>

|<<execution-via-local-sxs-shared-module, Execution via local SxS Shared Module>> |Identifies the creation, change, or deletion of a DLL module within a Windows SxS local folder. Adversaries may abuse shared modules to execute malicious payloads by instructing the Windows module loader to load DLLs from arbitrary local paths. |[Elastic] [Host] [Windows] [Threat Detection] [Execution]  |7.11.0 |5 <<execution-via-local-sxs-shared-module-history, Version history>>

|<<execution-with-explicit-credentials-via-scripting, Execution with Explicit Credentials via Scripting>> |Identifies execution of the security_authtrampoline process via a scripting interpreter. This occurs when programs use AuthorizationExecute-WithPrivileges from the Security.framework to run another program with root privileges. It should not be run by itself, as this is a sign of execution with explicit logon credentials. |[Elastic] [Host] [macOS] [Threat Detection] [Execution] [Privilege Escalation]  |7.11.0 |2 <<execution-with-explicit-credentials-via-scripting-history, Version history>>

|<<exploit-detected-elastic-endgame, Exploit - Detected - Elastic Endgame>> |Elastic Endgame detected an Exploit. Click the Elastic Endgame icon in the event.module column or the link in the rule.reference column for additional information. |[Elastic] [Elastic Endgame]  |7.6.0 |7 <<exploit-detected-elastic-endgame-history, Version history>>

|<<exploit-prevented-elastic-endgame, Exploit - Prevented - Elastic Endgame>> |Elastic Endgame prevented an Exploit. Click the Elastic Endgame icon in the event.module column or the link in the rule.reference column for additional information. |[Elastic] [Elastic Endgame]  |7.6.0 |7 <<exploit-prevented-elastic-endgame-history, Version history>>

|<<exporting-exchange-mailbox-via-powershell, Exporting Exchange Mailbox via PowerShell>> |Identifies the use of the Exchange PowerShell cmdlet, New-MailBoxExportRequest, to export the contents of a primary mailbox or archive to a .pst file. Adversaries may target user email to collect sensitive information. |[Elastic] [Host] [Windows] [Threat Detection] [Collection]  |7.11.0 |7 <<exporting-exchange-mailbox-via-powershell-history, Version history>>

|<<external-alerts, External Alerts>> |Generates a detection alert for each external alert written to the configured indices. Enabling this rule allows you to immediately begin investigating external alerts in the app. |[Elastic] [Network] [Windows] [APM] [macOS] [Linux]  |7.9.0 |4 <<external-alerts-history, Version history>>

|<<external-ip-lookup-from-non-browser-process, External IP Lookup from Non-Browser Process>> |Identifies domains commonly used by adversaries for post-exploitation IP lookups. It is common for adversaries to test for Internet access and acquire their external IP address after they have gained access to a system. Among others, this has been observed in campaigns leveraging the information stealer, Trickbot. |[Elastic] [Host] [Windows] [Threat Detection] [Discovery]  |7.10.0 |7 <<external-ip-lookup-from-non-browser-process-history, Version history>>

|<<file-deletion-via-shred, File Deletion via Shred>> |Malware or other files dropped or created on a system by an adversary may leave traces behind as to what was done within a network and how. Adversaries may remove these files over the course of an intrusion to keep their footprint low or remove them at the end as part of the post-intrusion cleanup process. |[Elastic] [Host] [Linux] [Threat Detection] [Defense Evasion]  |7.8.0 |7 <<file-deletion-via-shred-history, Version history>>

|<<file-permission-modification-in-writable-directory, File Permission Modification in Writable Directory>> |Identifies file permission modifications in common writable directories by a non-root user. Adversaries often drop files or payloads into a writable directory and change permissions prior to execution. |[Elastic] [Host] [Linux] [Threat Detection] [Defense Evasion]  |7.8.0 |6 <<file-permission-modification-in-writable-directory-history, Version history>>

|<<file-and-directory-discovery, File and Directory Discovery>> |Enumeration of files and directories using built-in tools. Adversaries may use the information discovered to plan follow-on activity. |[Elastic] [Host] [Windows] [Threat Detection] [Discovery]  |7.11.0 |4 <<file-and-directory-discovery-history, Version history>>

|<<finder-sync-plugin-registered-and-enabled, Finder Sync Plugin Registered and Enabled>> |Finder Sync plugins enable users to extend Finder’s functionality by modifying the user interface. Adversaries may abuse this feature by adding a rogue Finder Plugin to repeatedly execute malicious payloads for persistence. |[Elastic] [Host] [macOS] [Threat Detection] [Persistence]  |7.12.0 |2 <<finder-sync-plugin-registered-and-enabled-history, Version history>>

|<<gcp-firewall-rule-creation, GCP Firewall Rule Creation>> |Identifies when a firewall rule is created in Google Cloud Platform (GCP). Virtual Private Cloud (VPC) firewall rules can be configured to allow or deny connections to or from virtual machine (VM) instances. An adversary may create a new firewall rule in order to weaken their target's security controls and allow more permissive ingress or egress traffic flows for their benefit. |[Elastic] [Cloud] [GCP] [Continuous Monitoring] [SecOps] [Configuration Audit]  |7.10.0 |5 <<gcp-firewall-rule-creation-history, Version history>>

|<<gcp-firewall-rule-deletion, GCP Firewall Rule Deletion>> |Identifies when a firewall rule is deleted in Google Cloud Platform (GCP). Virtual Private Cloud (VPC) firewall rules can be configured to allow or deny connections to or from virtual machine (VM) instances. An adversary may delete a firewall rule in order to weaken their target's security controls. |[Elastic] [Cloud] [GCP] [Continuous Monitoring] [SecOps] [Configuration Audit]  |7.10.0 |5 <<gcp-firewall-rule-deletion-history, Version history>>

|<<gcp-firewall-rule-modification, GCP Firewall Rule Modification>> |Identifies when a firewall rule is modified in Google Cloud Platform (GCP). Virtual Private Cloud (VPC) firewall rules can be configured to allow or deny connections to or from virtual machine (VM) instances. An adversary may modify a firewall rule in order to weaken their target's security controls. |[Elastic] [Cloud] [GCP] [Continuous Monitoring] [SecOps] [Configuration Audit]  |7.10.0 |5 <<gcp-firewall-rule-modification-history, Version history>>

|<<gcp-iam-custom-role-creation, GCP IAM Custom Role Creation>> |Identifies an Identity and Access Management (IAM) custom role creation in Google Cloud Platform (GCP). Custom roles are user-defined, and allow for the bundling of one or more supported permissions to meet specific needs. Custom roles will not be updated automatically and could lead to privilege creep if not carefully scrutinized. |[Elastic] [Cloud] [GCP] [Continuous Monitoring] [SecOps] [Identity and Access]  |7.10.0 |6 <<gcp-iam-custom-role-creation-history, Version history>>

|<<gcp-iam-role-deletion, GCP IAM Role Deletion>> |Identifies an Identity and Access Management (IAM) role deletion in Google Cloud Platform (GCP). A role contains a set of permissions that allows you to perform specific actions on Google Cloud resources. An adversary may delete an IAM role to inhibit access to accounts utilized by legitimate users. |[Elastic] [Cloud] [GCP] [Continuous Monitoring] [SecOps] [Identity and Access]  |7.10.0 |6 <<gcp-iam-role-deletion-history, Version history>>

|<<gcp-iam-service-account-key-deletion, GCP IAM Service Account Key Deletion>> |Identifies the deletion of an Identity and Access Management (IAM) service account key in Google Cloud Platform (GCP). Each service account is associated with two sets of public/private RSA key pairs that are used to authenticate. If a key is deleted, the application will no longer be able to access Google Cloud resources using that key. A security best practice is to rotate your service account keys regularly. |[Elastic] [Cloud] [GCP] [Continuous Monitoring] [SecOps] [Identity and Access]  |7.10.0 |6 <<gcp-iam-service-account-key-deletion-history, Version history>>

|<<gcp-kubernetes-rolebindings-created-or-patched, GCP Kubernetes Rolebindings Created or Patched>> |Identifies the creation or patching of potentially malicious role bindings. Users can use role bindings and cluster role bindings to assign roles to Kubernetes subjects (users, groups, or service accounts). |[Elastic] [Cloud] [GCP] [Continuous Monitoring] [SecOps] [Configuration Audit]  |7.16.0 |2 <<gcp-kubernetes-rolebindings-created-or-patched-history, Version history>>

|<<gcp-logging-bucket-deletion, GCP Logging Bucket Deletion>> |Identifies a Logging bucket deletion in Google Cloud Platform (GCP). Log buckets are containers that store and organize log data. A deleted bucket stays in a pending state for 7 days, and Logging continues to route logs to the bucket during that time. To stop routing logs to a deleted bucket, you can delete the log sinks that have the bucket as their destination, or modify the filter for the sinks to stop it from routing logs to the deleted bucket. An adversary may delete a log bucket to evade detection. |[Elastic] [Cloud] [GCP] [Continuous Monitoring] [SecOps] [Log Auditing]  |7.10.0 |7 <<gcp-logging-bucket-deletion-history, Version history>>

|<<gcp-logging-sink-deletion, GCP Logging Sink Deletion>> |Identifies a Logging sink deletion in Google Cloud Platform (GCP). Every time a log entry arrives, Logging compares the log entry to the sinks in that resource. Each sink whose filter matches the log entry writes a copy of the log entry to the sink's export destination. An adversary may delete a Logging sink to evade detection. |[Elastic] [Cloud] [GCP] [Continuous Monitoring] [SecOps] [Log Auditing]  |7.10.0 |6 <<gcp-logging-sink-deletion-history, Version history>>

|<<gcp-logging-sink-modification, GCP Logging Sink Modification>> |Identifies a modification to a Logging sink in Google Cloud Platform (GCP). Logging compares the log entry to the sinks in that resource. Each sink whose filter matches the log entry writes a copy of the log entry to the sink's export destination. An adversary may update a Logging sink to exfiltrate logs to a different export destination. |[Elastic] [Cloud] [GCP] [Continuous Monitoring] [SecOps] [Log Auditing]  |7.10.0 |5 <<gcp-logging-sink-modification-history, Version history>>

|<<gcp-pub-sub-subscription-creation, GCP Pub/Sub Subscription Creation>> |Identifies the creation of a subscription in Google Cloud Platform (GCP). In GCP, the publisher-subscriber relationship (Pub/Sub) is an asynchronous messaging service that decouples event-producing and event-processing services. A subscription is a named resource representing the stream of messages to be delivered to the subscribing application. |[Elastic] [Cloud] [GCP] [Continuous Monitoring] [SecOps] [Log Auditing]  |7.10.0 |6 <<gcp-pub-sub-subscription-creation-history, Version history>>

|<<gcp-pub-sub-subscription-deletion, GCP Pub/Sub Subscription Deletion>> |Identifies the deletion of a subscription in Google Cloud Platform (GCP). In GCP, the publisher-subscriber relationship (Pub/Sub) is an asynchronous messaging service that decouples event-producing and event-processing services. A subscription is a named resource representing the stream of messages to be delivered to the subscribing application. |[Elastic] [Cloud] [GCP] [Continuous Monitoring] [SecOps] [Log Auditing]  |7.10.0 |6 <<gcp-pub-sub-subscription-deletion-history, Version history>>

|<<gcp-pub-sub-topic-creation, GCP Pub/Sub Topic Creation>> |Identifies the creation of a topic in Google Cloud Platform (GCP). In GCP, the publisher-subscriber relationship (Pub/Sub) is an asynchronous messaging service that decouples event-producing and event-processing services. A topic is used to forward messages from publishers to subscribers. |[Elastic] [Cloud] [GCP] [Continuous Monitoring] [SecOps] [Log Auditing]  |7.10.0 |6 <<gcp-pub-sub-topic-creation-history, Version history>>

|<<gcp-pub-sub-topic-deletion, GCP Pub/Sub Topic Deletion>> |Identifies the deletion of a topic in Google Cloud Platform (GCP). In GCP, the publisher-subscriber relationship (Pub/Sub) is an asynchronous messaging service that decouples event-producing and event-processing services. A publisher application creates and sends messages to a topic. Deleting a topic can interrupt message flow in the Pub/Sub pipeline. |[Elastic] [Cloud] [GCP] [Continuous Monitoring] [SecOps] [Log Auditing]  |7.10.0 |6 <<gcp-pub-sub-topic-deletion-history, Version history>>

|<<gcp-service-account-creation, GCP Service Account Creation>> |Identifies when a new service account is created in Google Cloud Platform (GCP). A service account is a special type of account used by an application or a virtual machine (VM) instance, not a person. Applications use service accounts to make authorized API calls, authorized as either the service account itself, or as G Suite or Cloud Identity users through domain-wide delegation. If service accounts are not tracked and managed properly, they can present a security risk. An adversary may create a new service account to use during their operations in order to avoid using a standard user account and attempt to evade detection. |[Elastic] [Cloud] [GCP] [Continuous Monitoring] [SecOps] [Identity and Access]  |7.10.0 |5 <<gcp-service-account-creation-history, Version history>>

|<<gcp-service-account-deletion, GCP Service Account Deletion>> |Identifies when a service account is deleted in Google Cloud Platform (GCP). A service account is a special type of account used by an application or a virtual machine (VM) instance, not a person. Applications use service accounts to make authorized API calls, authorized as either the service account itself, or as G Suite or Cloud Identity users through domain-wide delegation. An adversary may delete a service account in order to disrupt their target's business operations. |[Elastic] [Cloud] [GCP] [Continuous Monitoring] [SecOps] [Identity and Access]  |7.10.0 |5 <<gcp-service-account-deletion-history, Version history>>

|<<gcp-service-account-disabled, GCP Service Account Disabled>> |Identifies when a service account is disabled in Google Cloud Platform (GCP). A service account is a special type of account used by an application or a virtual machine (VM) instance, not a person. Applications use service accounts to make authorized API calls, authorized as either the service account itself, or as G Suite or Cloud Identity users through domain-wide delegation. An adversary may disable a service account in order to disrupt to disrupt their target's business operations. |[Elastic] [Cloud] [GCP] [Continuous Monitoring] [SecOps] [Identity and Access]  |7.10.0 |5 <<gcp-service-account-disabled-history, Version history>>

|<<gcp-service-account-key-creation, GCP Service Account Key Creation>> |Identifies when a new key is created for a service account in Google Cloud Platform (GCP). A service account is a special type of account used by an application or a virtual machine (VM) instance, not a person. Applications use service accounts to make authorized API calls, authorized as either the service account itself, or as G Suite or Cloud Identity users through domain-wide delegation. If private keys are not tracked and managed properly, they can present a security risk. An adversary may create a new key for a service account in order to attempt to abuse the permissions assigned to that account and evade detection. |[Elastic] [Cloud] [GCP] [Continuous Monitoring] [SecOps] [Identity and Access]  |7.10.0 |5 <<gcp-service-account-key-creation-history, Version history>>

|<<gcp-storage-bucket-configuration-modification, GCP Storage Bucket Configuration Modification>> |Identifies when the configuration is modified for a storage bucket in Google Cloud Platform (GCP). An adversary may modify the configuration of a storage bucket in order to weaken the security controls of their target's environment. |[Elastic] [Cloud] [GCP] [Continuous Monitoring] [SecOps] [Identity and Access]  |7.10.0 |5 <<gcp-storage-bucket-configuration-modification-history, Version history>>

|<<gcp-storage-bucket-deletion, GCP Storage Bucket Deletion>> |Identifies when a Google Cloud Platform (GCP) storage bucket is deleted. An adversary may delete a storage bucket in order to disrupt their target's business operations. |[Elastic] [Cloud] [GCP] [Continuous Monitoring] [SecOps] [Monitoring]  |7.10.0 |6 <<gcp-storage-bucket-deletion-history, Version history>>

|<<gcp-storage-bucket-permissions-modification, GCP Storage Bucket Permissions Modification>> |Identifies when the Identity and Access Management (IAM) permissions are modified for a Google Cloud Platform (GCP) storage bucket. An adversary may modify the permissions on a storage bucket to weaken their target's security controls or an administrator may inadvertently modify the permissions, which could lead to data exposure or loss. |[Elastic] [Cloud] [GCP] [Continuous Monitoring] [SecOps] [Identity and Access]  |7.10.0 |5 <<gcp-storage-bucket-permissions-modification-history, Version history>>

|<<gcp-virtual-private-cloud-network-deletion, GCP Virtual Private Cloud Network Deletion>> |Identifies when a Virtual Private Cloud (VPC) network is deleted in Google Cloud Platform (GCP). A VPC network is a virtual version of a physical network within a GCP project. Each VPC network has its own subnets, routes, and firewall, as well as other elements. An adversary may delete a VPC network in order to disrupt their target's network and business operations. |[Elastic] [Cloud] [GCP] [Continuous Monitoring] [SecOps] [Configuration Audit]  |7.10.0 |5 <<gcp-virtual-private-cloud-network-deletion-history, Version history>>

|<<gcp-virtual-private-cloud-route-creation, GCP Virtual Private Cloud Route Creation>> |Identifies when a virtual private cloud (VPC) route is created in Google Cloud Platform (GCP). Google Cloud routes define the paths that network traffic takes from a virtual machine (VM) instance to other destinations. These destinations can be inside a Google VPC network or outside it. An adversary may create a route in order to impact the flow of network traffic in their target's cloud environment. |[Elastic] [Cloud] [GCP] [Continuous Monitoring] [SecOps] [Configuration Audit]  |7.10.0 |7 <<gcp-virtual-private-cloud-route-creation-history, Version history>>

|<<gcp-virtual-private-cloud-route-deletion, GCP Virtual Private Cloud Route Deletion>> |Identifies when a Virtual Private Cloud (VPC) route is deleted in Google Cloud Platform (GCP). Google Cloud routes define the paths that network traffic takes from a virtual machine (VM) instance to other destinations. These destinations can be inside a Google VPC network or outside it. An adversary may delete a route in order to impact the flow of network traffic in their target's cloud environment. |[Elastic] [Cloud] [GCP] [Continuous Monitoring] [SecOps] [Configuration Audit]  |7.10.0 |5 <<gcp-virtual-private-cloud-route-deletion-history, Version history>>

|<<google-workspace-api-access-granted-via-domain-wide-delegation-of-authority, Google Workspace API Access Granted via Domain-Wide Delegation of Authority>> |Detects when a domain-wide delegation of authority is granted to a service account. Domain-wide delegation can be configured to grant third-party and internal applications to access the data of Google Workspace users. An adversary may configure domain-wide delegation to maintain access to their target’s data. |[Elastic] [Cloud] [Google Workspace] [Continuous Monitoring] [SecOps] [Identity and Access]  |7.11.0 |10 <<google-workspace-api-access-granted-via-domain-wide-delegation-of-authority-history, Version history>>

|<<google-workspace-admin-role-assigned-to-a-user, Google Workspace Admin Role Assigned to a User>> |Detects when an admin role is assigned to a Google Workspace user. An adversary may assign an admin role to a user in order to elevate the permissions of another user account and persist in their target’s environment. |[Elastic] [Cloud] [Google Workspace] [Continuous Monitoring] [SecOps] [Identity and Access]  |7.11.0 |10 <<google-workspace-admin-role-assigned-to-a-user-history, Version history>>

|<<google-workspace-admin-role-deletion, Google Workspace Admin Role Deletion>> |Detects when a custom admin role is deleted. An adversary may delete a custom admin role in order to impact the permissions or capabilities of system administrators. |[Elastic] [Cloud] [Google Workspace] [Continuous Monitoring] [SecOps] [Identity and Access]  |7.11.0 |10 <<google-workspace-admin-role-deletion-history, Version history>>

|<<google-workspace-custom-admin-role-created, Google Workspace Custom Admin Role Created>> |Detects when a custom admin role is created in Google Workspace. An adversary may create a custom admin role in order to elevate the permissions of other user accounts and persist in their target’s environment. |[Elastic] [Cloud] [Google Workspace] [Continuous Monitoring] [SecOps] [Identity and Access]  |7.11.0 |10 <<google-workspace-custom-admin-role-created-history, Version history>>

|<<google-workspace-mfa-enforcement-disabled, Google Workspace MFA Enforcement Disabled>> |Detects when multi-factor authentication (MFA) enforcement is disabled for Google Workspace users. An adversary may disable MFA enforcement in order to weaken an organization’s security controls. |[Elastic] [Cloud] [Google Workspace] [Continuous Monitoring] [SecOps] [Configuration Audit]  |7.11.0 |11 <<google-workspace-mfa-enforcement-disabled-history, Version history>>

|<<google-workspace-password-policy-modified, Google Workspace Password Policy Modified>> |Detects when a Google Workspace password policy is modified. An adversary may attempt to modify a password policy in order to weaken an organization’s security controls. |[Elastic] [Cloud] [Google Workspace] [Continuous Monitoring] [SecOps] [Identity and Access]  |7.11.0 |11 <<google-workspace-password-policy-modified-history, Version history>>

|<<google-workspace-role-modified, Google Workspace Role Modified>> |Detects when a custom admin role or its permissions are modified. An adversary may modify a custom admin role in order to elevate the permissions of other user accounts and persist in their target’s environment. |[Elastic] [Cloud] [Google Workspace] [Continuous Monitoring] [SecOps] [Identity and Access]  |7.11.0 |10 <<google-workspace-role-modified-history, Version history>>

|<<group-policy-abuse-for-privilege-addition, Group Policy Abuse for Privilege Addition>> |Detects the first occurrence of a modification to Group Policy Object Attributes to add privileges to user accounts or use them to add users as local admins. |[Elastic] [Host] [Windows] [Threat Detection] [Privilege Escalation] [Active Directory]  |8.0.0 |3 <<group-policy-abuse-for-privilege-addition-history, Version history>>

|<<halfbaked-command-and-control-beacon, Halfbaked Command and Control Beacon>> |Halfbaked is a malware family used to establish persistence in a contested network. This rule detects a network activity algorithm leveraged by Halfbaked implant beacons for command and control. |[Elastic] [Network] [Threat Detection] [Command and Control] [Host]  |7.10.0 |6 <<halfbaked-command-and-control-beacon-history, Version history>>

|<<high-number-of-okta-user-password-reset-or-unlock-attempts, High Number of Okta User Password Reset or Unlock Attempts>> |Identifies a high number of Okta user password reset or account unlock attempts. An adversary may attempt to obtain unauthorized access to Okta user accounts using these methods and attempt to blend in with normal activity in their target's environment and evade detection. |[Elastic] [Identity] [Okta] [Continuous Monitoring] [SecOps] [Identity and Access]  |7.10.0 |5 <<high-number-of-okta-user-password-reset-or-unlock-attempts-history, Version history>>

|<<high-number-of-process-and-or-service-terminations, High Number of Process and/or Service Terminations>> |This rule identifies a high number (10) of process terminations (stop, delete, or suspend) from the same host within a short time period. |[Elastic] [Host] [Windows] [Threat Detection] [Impact]  |7.11.0 |4 <<high-number-of-process-and-or-service-terminations-history, Version history>>

|<<hosts-file-modified, Hosts File Modified>> |The hosts file on endpoints is used to control manual IP address to hostname resolutions. The hosts file is the first point of lookup for DNS hostname resolution so if adversaries can modify the endpoint hosts file, they can route traffic to malicious infrastructure. This rule detects modifications to the hosts file on Microsoft Windows, Linux (Ubuntu or RHEL) and macOS systems. |[Elastic] [Host] [Linux] [Windows] [macOS] [Threat Detection] [Impact]  |7.10.0 |8 <<hosts-file-modified-history, Version history>>

|<<hping-process-activity, Hping Process Activity>> |Hping ran on a Linux host. Hping is a FOSS command-line packet analyzer and has the ability to construct network packets for a wide variety of network security testing applications, including scanning and firewall auditing. |[Elastic] [Host] [Linux] [Threat Detection]  |7.6.0 |7 <<hping-process-activity-history, Version history>>

|<<iis-http-logging-disabled, IIS HTTP Logging Disabled>> |Identifies when Internet Information Services (IIS) HTTP Logging is disabled on a server. An attacker with IIS server access via a webshell or other mechanism can disable HTTP Logging as an effective anti-forensics measure. |[Elastic] [Host] [Windows] [Threat Detection] [Defense Evasion]  |7.10.0 |7 <<iis-http-logging-disabled-history, Version history>>

|<<ipsec-nat-traversal-port-activity, IPSEC NAT Traversal Port Activity>> |This rule detects events that could be describing IPSEC NAT Traversal traffic. IPSEC is a VPN technology that allows one system to talk to another using encrypted tunnels. NAT Traversal enables these tunnels to communicate over the Internet where one of the sides is behind a NAT router gateway. This may be common on your network, but this technique is also used by threat actors to avoid detection. |[Elastic] [Host] [Network] [Threat Detection] [Command and Control] [Host]  |7.6.0 |8 <<ipsec-nat-traversal-port-activity-history, Version history>>

|<<image-file-execution-options-injection, Image File Execution Options Injection>> |The Debugger and SilentProcessExit registry keys can allow an adversary to intercept the execution of files, causing a different process to be executed. This functionality can be abused by an adversary to establish persistence. |[Elastic] [Host] [Windows] [Threat Detection] [Persistence]  |7.11.0 |5 <<image-file-execution-options-injection-history, Version history>>

|<<imageload-via-windows-update-auto-update-client, ImageLoad via Windows Update Auto Update Client>> |Identifies abuse of the Windows Update Auto Update Client (wuauclt.exe) to load an arbitrary DLL. This behavior is used as a defense evasion technique to blend-in malicious activity with legitimate Windows software. |[Elastic] [Host] [Windows] [Threat Detection] [Defense Evasion]  |7.11.0 |5 <<imageload-via-windows-update-auto-update-client-history, Version history>>

|<<inbound-connection-to-an-unsecure-elasticsearch-node, Inbound Connection to an Unsecure Elasticsearch Node>> |Identifies Elasticsearch nodes that do not have Transport Layer Security (TLS), and/or lack authentication, and are accepting inbound network connections over the default Elasticsearch port. |[Elastic] [Network] [Threat Detection] [Initial Access] [Host]  |7.10.0 |5 <<inbound-connection-to-an-unsecure-elasticsearch-node-history, Version history>>

|<<incoming-dcom-lateral-movement-via-mshta, Incoming DCOM Lateral Movement via MSHTA>> |Identifies the use of Distributed Component Object Model (DCOM) to execute commands from a remote host, which are launched via the HTA Application COM Object. This behavior may indicate an attacker abusing a DCOM application to move laterally while attempting to evade detection. |[Elastic] [Host] [Windows] [Threat Detection] [Lateral Movement]  |7.11.0 |6 <<incoming-dcom-lateral-movement-via-mshta-history, Version history>>

|<<incoming-dcom-lateral-movement-with-mmc, Incoming DCOM Lateral Movement with MMC>> |Identifies the use of Distributed Component Object Model (DCOM) to run commands from a remote host, which are launched via the MMC20 Application COM Object. This behavior may indicate an attacker abusing a DCOM application to move laterally. |[Elastic] [Host] [Windows] [Threat Detection] [Lateral Movement]  |7.11.0 |5 <<incoming-dcom-lateral-movement-with-mmc-history, Version history>>

|<<incoming-dcom-lateral-movement-with-shellbrowserwindow-or-shellwindows, Incoming DCOM Lateral Movement with ShellBrowserWindow or ShellWindows>> |Identifies use of Distributed Component Object Model (DCOM) to run commands from a remote host, which are launched via the ShellBrowserWindow or ShellWindows Application COM Object. This behavior may indicate an attacker abusing a DCOM application to stealthily move laterally. |[Elastic] [Host] [Windows] [Threat Detection] [Lateral Movement]  |7.11.0 |5 <<incoming-dcom-lateral-movement-with-shellbrowserwindow-or-shellwindows-history, Version history>>

|<<incoming-execution-via-powershell-remoting, Incoming Execution via PowerShell Remoting>> |Identifies remote execution via Windows PowerShell remoting. Windows PowerShell remoting allows a user to run any Windows PowerShell command on one or more remote computers. This could be an indication of lateral movement. |[Elastic] [Host] [Windows] [Threat Detection] [Lateral Movement]  |7.11.0 |5 <<incoming-execution-via-powershell-remoting-history, Version history>>

|<<incoming-execution-via-winrm-remote-shell, Incoming Execution via WinRM Remote Shell>> |Identifies remote execution via Windows Remote Management (WinRM) remote shell on a target host. This could be an indication of lateral movement. |[Elastic] [Host] [Windows] [Threat Detection] [Lateral Movement]  |7.11.0 |4 <<incoming-execution-via-winrm-remote-shell-history, Version history>>

|<<installutil-process-making-network-connections, InstallUtil Process Making Network Connections>> |Identifies InstallUtil.exe making outbound network connections. This may indicate adversarial activity as InstallUtil is often leveraged by adversaries to execute code and evade detection. |[Elastic] [Host] [Windows] [Threat Detection] [Defense Evasion]  |7.10.0 |4 <<installutil-process-making-network-connections-history, Version history>>

|<<installation-of-custom-shim-databases, Installation of Custom Shim Databases>> |Identifies the installation of custom Application Compatibility Shim databases. This Windows functionality has been abused by attackers to stealthily gain persistence and arbitrary code execution in legitimate Windows processes. |[Elastic] [Host] [Windows] [Threat Detection] [Persistence]  |7.10.0 |3 <<installation-of-custom-shim-databases-history, Version history>>

|<<installation-of-security-support-provider, Installation of Security Support Provider>> |Identifies registry modifications related to the Windows Security Support Provider (SSP) configuration. Adversaries may abuse this to establish persistence in an environment. |[Elastic] [Host] [Windows] [Threat Detection] [Persistence]  |7.11.0 |5 <<installation-of-security-support-provider-history, Version history>>

|<<interactive-terminal-spawned-via-perl, Interactive Terminal Spawned via Perl>> |Identifies when a terminal (tty) is spawned via Perl. Attackers may upgrade a simple reverse shell to a fully interactive tty after obtaining initial access to a host. |[Elastic] [Host] [Linux] [Threat Detection] [Execution]  |7.8.0 |6 <<interactive-terminal-spawned-via-perl-history, Version history>>

|<<interactive-terminal-spawned-via-python, Interactive Terminal Spawned via Python>> |Identifies when a terminal (tty) is spawned via Python. Attackers may upgrade a simple reverse shell to a fully interactive tty after obtaining initial access to a host. |[Elastic] [Host] [Linux] [Threat Detection] [Execution]  |7.8.0 |7 <<interactive-terminal-spawned-via-python-history, Version history>>

|<<krbtgt-delegation-backdoor, KRBTGT Delegation Backdoor>> |Identifies the modification of the msDS-AllowedToDelegateTo attribute to KRBTGT. Attackers can use this technique to maintain persistence to the domain by having the ability to request tickets for the KRBTGT service. |[Elastic] [Host] [Windows] [Threat Detection] [Persistence] [Active Directory]  |8.1.0 |2 <<krbtgt-delegation-backdoor-history, Version history>>

|<<kerberos-cached-credentials-dumping, Kerberos Cached Credentials Dumping>> |Identifies the use of the Kerberos credential cache (kcc) utility to dump locally cached Kerberos tickets. |[Elastic] [Host] [macOS] [Threat Detection] [Credential Access]  |7.10.0 |4 <<kerberos-cached-credentials-dumping-history, Version history>>

|<<kerberos-pre-authentication-disabled-for-user, Kerberos Pre-authentication Disabled for User>> |Identifies the modification of an account's Kerberos pre-authentication options. An adversary with GenericWrite/GenericAll rights over the account can maliciously modify these settings to perform offline password cracking attacks such as AS-REP roasting. |[Elastic] [Host] [Windows] [Threat Detection] [Credential Access]  |8.1.0 |2 <<kerberos-pre-authentication-disabled-for-user-history, Version history>>

|<<kerberos-traffic-from-unusual-process, Kerberos Traffic from Unusual Process>> |Identifies network connections to the standard Kerberos port from an unusual process. On Windows, the only process that normally performs Kerberos traffic from a domain joined host is lsass.exe. |[Elastic] [Host] [Windows] [Threat Detection] [Credential Access]  |7.11.0 |6 <<kerberos-traffic-from-unusual-process-history, Version history>>

|<<kernel-module-removal, Kernel Module Removal>> |Kernel modules are pieces of code that can be loaded and unloaded into the kernel upon demand. They extend the functionality of the kernel without the need to reboot the system. This rule identifies attempts to remove a kernel module. |[Elastic] [Host] [Linux] [Threat Detection] [Defense Evasion]  |7.8.0 |7 <<kernel-module-removal-history, Version history>>

|<<keychain-password-retrieval-via-command-line, Keychain Password Retrieval via Command Line>> |Adversaries may collect keychain storage data from a system to in order to acquire credentials. Keychains are the built-in way for macOS to keep track of users' passwords and credentials for many services and features, including Wi-Fi and website passwords, secure notes, certificates, and Kerberos. |[Elastic] [Host] [macOS] [Threat Detection] [Credential Access]  |7.12.0 |3 <<keychain-password-retrieval-via-command-line-history, Version history>>

|<<lsass-memory-dump-creation, LSASS Memory Dump Creation>> |Identifies the creation of a Local Security Authority Subsystem Service (lsass.exe) default memory dump. This may indicate a credential access attempt via trusted system utilities such as Task Manager (taskmgr.exe) and SQL Dumper (sqldumper.exe) or known pentesting tools such as Dumpert and AndrewSpecial. |[Elastic] [Host] [Windows] [Threat Detection] [Credential Access]  |7.11.0 |7 <<lsass-memory-dump-creation-history, Version history>>

|<<lsass-memory-dump-handle-access, LSASS Memory Dump Handle Access>> |Identifies handle requests for the Local Security Authority Subsystem Service (LSASS) object access with specific access masks that many tools with a capability to dump memory to disk use (0x1fffff, 0x1010, 0x120089). This rule is tool agnostic as it has been validated against a host of various LSASS dump tools such as SharpDump, Procdump, Mimikatz, Comsvcs etc. It detects this behavior at a low level and does not depend on a specific tool or dump file name. |[Elastic] [Host] [Windows] [Threat Detection] [Credential Access]  |8.2.0 |1

|<<lateral-movement-via-startup-folder, Lateral Movement via Startup Folder>> |Identifies suspicious file creations in the startup folder of a remote system. An adversary could abuse this to move laterally by dropping a malicious script or executable that will be executed after a reboot or user logon. |[Elastic] [Host] [Windows] [Threat Detection] [Lateral Movement]  |7.11.0 |4 <<lateral-movement-via-startup-folder-history, Version history>>

|<<lateral-tool-transfer, Lateral Tool Transfer>> |Identifies the creation or change of a Windows executable file over network shares. Adversaries may transfer tools or other files between systems in a compromised environment. |[Elastic] [Host] [Windows] [Threat Detection] [Lateral Movement]  |7.11.0 |4 <<lateral-tool-transfer-history, Version history>>

|<<launch-agent-creation-or-modification-and-immediate-loading, Launch Agent Creation or Modification and Immediate Loading>> |An adversary can establish persistence by installing a new launch agent that executes at login by using launchd or launchctl to load a plist into the appropriate directories. |[Elastic] [Host] [macOS] [Threat Detection] [Persistence]  |7.11.0 |2 <<launch-agent-creation-or-modification-and-immediate-loading-history, Version history>>

|<<launchdaemon-creation-or-modification-and-immediate-loading, LaunchDaemon Creation or Modification and Immediate Loading>> |Indicates the creation or modification of a launch daemon, which adversaries may use to repeatedly execute malicious payloads as part of persistence. |[Elastic] [Host] [macOS] [Threat Detection] [Persistence]  |7.11.0 |4 <<launchdaemon-creation-or-modification-and-immediate-loading-history, Version history>>

|<<linux-restricted-shell-breakout-via-apt-apt-get-changelog-escape, Linux Restricted Shell Breakout via  apt/apt-get Changelog Escape>> |Identifies Linux binary apt/apt-get abuse to breakout out of restricted shells or environments by spawning an interactive system shell. The apt utility allows us to manage installation and removal of softwares on Debian based Linux distributions and the activity of spawning shell is not a standard use of this binary for a user or system administrator. It indicates a potentially malicious actor attempting to improve the capabilities or stability of their access. |[Elastic] [Host] [Linux] [Threat Detection] [Execution] [GTFOBins]  |8.2.0 |1

|<<linux-restricted-shell-breakout-via-awk-commands, Linux Restricted Shell Breakout via awk Commands>> |Identifies Linux binary awk abuse to breakout out of restricted shells or environments by spawning an interactive system shell. The awk utility is a text processing language used for data extraction and reporting tools and the activity of spawning shell is not a standard use of this binary for a user or system administrator. It indicates a potentially malicious actor attempting to improve the capabilities or stability of their access. |[Elastic] [Host] [Linux] [Threat Detection] [Execution] [GTFOBins]  |8.2.0 |1

|<<linux-restricted-shell-breakout-via-busybox-shell-evasion, Linux Restricted Shell Breakout via busybox Shell Evasion>> |Identifies Linux binary busybox abuse to break out from restricted environments by spawning an interactive system shell.The busybox is software utility suite that provides several Unix utilities in a single executable file and the activity of spawing a shell is not a standard use of this binary by a user or system administrator. It indicates a potentially malicious actor attempting to improve the capabilities or stability of their access. |[Elastic] [Host] [Linux] [Threat Detection] [Execution] [GTFOBins]  |8.2.0 |1

|<<linux-restricted-shell-breakout-via-c89-c99-shell-evasion, Linux Restricted Shell Breakout via c89/c99 Shell evasion>> |Identifies Linux binary c89/c99 abuse to break out from restricted environments by spawning an interactive system shell.The c89/c99 utility is an interface to the standard C compilation system and the activity of spawing a shell is not a standard use of this binary by a user or system administrator. It indicates a potentially malicious actor attempting to improve the capabilities or stability of their access. |[Elastic] [Host] [Linux] [Threat Detection] [Execution] [GTFOBins]  |8.2.0 |1

|<<linux-restricted-shell-breakout-via-cpulimit-shell-evasion, Linux Restricted Shell Breakout via cpulimit Shell Evasion>> |Identifies Linux binary cpulimit abuse to break out from restricted environments by spawning an interactive system shell. The cpulimit utility is used to restrict the CPU usage of a process in cases of CPU or system load exceeding the defined threshold and the activity of spawning a shell is not a standard use of this binary by a user or system administrator. This can potentially indicate a malicious actor attempting to improve the capabilities or stability of their access. |[Elastic] [Host] [Linux] [Threat Detection] [Execution] [GTFOBins]  |8.2.0 |1

|<<linux-restricted-shell-breakout-via-crash-shell-evasion, Linux Restricted Shell Breakout via crash Shell evasion>> |Identifies Linux binary crash abuse to break out from restricted environments by spawning an interactive system shell.The crash utility helps to analyze Linux crash dump data or a live system and the activity of spawing a shell is not a standard use of this binary by a user or system administrator. It indicates a potentially malicious actor attempting to improve the capabilities or stability of their access. |[Elastic] [Host] [Linux] [Threat Detection] [Execution] [GTFOBins]  |8.2.0 |1

|<<linux-restricted-shell-breakout-via-env-shell-evasion, Linux Restricted Shell Breakout via env Shell Evasion>> |Identifies Linux binary env abuse to break out from restricted environments by spawning an interactive system shell.The env utility is a shell command for Unix like OS which is used to print a list of environment variables and the activity of spawning shell is not a standard use of this binary for a user or system administrator. It indicates a potentially malicious actor attempting to improve the capabilities or stability of their access |[Elastic] [Host] [Linux] [Threat Detection] [Execution] [GTFOBins]  |8.2.0 |1

|<<linux-restricted-shell-breakout-via-flock-shell-evasion, Linux Restricted Shell Breakout via flock Shell evasion>> |Identifies Linux binary flock abuse to break out from restricted environments by spawning an interactive system shell.The flock utility allows us to manage advisory file locks in shell scripts or on the command line and the activity of spawing a shell is not a standard use of this binary by a user or system administrator. It indicates a potentially malicious actor attempting to improve the capabilities or stability of their access. |[Elastic] [Host] [Linux] [Threat Detection] [Execution] [GTFOBins]  |8.2.0 |1

|<<linux-restricted-shell-breakout-via-the-expect-command, Linux Restricted Shell Breakout via the expect command>> |Identifies Linux binary expect abuse to break out from restricted environments by spawning an interactive system shell. The expect utility allows us to automate control of interactive applications such as telnet,ftp,ssh and others and the activity of spawning shell is not a standard use of this binary for a user or system administrator and could potentially indicate malicious actor attempting to improve the capabilities or stability of their access. |[Elastic] [Host] [Linux] [Threat Detection] [Execution] [GTFOBins]  |8.2.0 |1

|<<linux-restricted-shell-breakout-via-the-find-command, Linux Restricted Shell Breakout via the find command>> |Identifies Linux binary find abuse to break out from restricted environments by spawning an interactive system shell. The find command in Unix is a command line utility for walking a file hirerarchy and the activity of spawning shell is not a standard use of this binary for a user or system administrator.It indicates a potentially malicious actor attempting to improve the capabilities or stability of their access. |[Elastic] [Host] [Linux] [Threat Detection] [Execution] [GTFOBins]  |8.2.0 |1

|<<linux-restricted-shell-breakout-via-the-gcc-command, Linux Restricted Shell Breakout via the gcc command>> |Identifies Linux binary gcc abuse to break out from restricted environments by spawning an interactive system shell.The gcc utility is a complier system for various languages and mainly used to complie C and C++ programs and the activity of spawning shell is not a standard use of this binary for a user or system administrator.It indicates a potentially malicious actor attempting to improve the capabilities or stability of their access. |[Elastic] [Host] [Linux] [Threat Detection] [Execution] [GTFOBins]  |8.2.0 |1

|<<linux-restricted-shell-breakout-via-the-mysql-command, Linux Restricted Shell Breakout via the mysql command>> |Identifies MySQL server abuse to break out from restricted environments by spawning an interactive system shell.The MySQL is an open source relational database management system and the activity of spawning shell is not a standard use of this binary for a user or system administrator.It indicates a potentially malicious actor attempting to improve the capabilities or stability of their access. |[Elastic] [Host] [Linux] [Threat Detection] [Execution] [GTFOBins]  |8.2.0 |1

|<<linux-restricted-shell-breakout-via-the-ssh-command, Linux Restricted Shell Breakout via the ssh command>> |Identifies Linux binary ssh abuse to break out from restricted environments by spawning an interactive system shell.The ssh is a network protocol that gives users,particularly system administrators a secure way to access a computer over a network and the activity of spawning shell is not a standard use of this binary for a user or system administrator.It indicates a potentially malicious actor attempting to improve the capabilities or stability of their access. |[Elastic] [Host] [Linux] [Threat Detection] [Execution] [GTFOBins]  |8.2.0 |1

|<<linux-restricted-shell-breakout-via-the-vi-command, Linux Restricted Shell Breakout via the vi command>> |Identifies Linux binary find abuse to break out from restricted environments by spawning an interactive system shell. The vi/vim is the standard text editor in Linux distribution and the activity of spawning a shell is not a standard use of this binary by a user or system administrator and could potentially indicate malicious actor attempting to improve the capabilities or stability of their access." |[Elastic] [Host] [Linux] [Threat Detection] [Execution] [GTFOBins]  |8.2.0 |1

|<<local-scheduled-task-creation, Local Scheduled Task Creation>> |Indicates the creation of a scheduled task. Adversaries can use these to establish persistence, move laterally, and/or escalate privileges. |[Elastic] [Host] [Windows] [Threat Detection] [Persistence]  |7.6.0 |12 <<local-scheduled-task-creation-history, Version history>>

|<<mfa-disabled-for-google-workspace-organization, MFA Disabled for Google Workspace Organization>> |Detects when multi-factor authentication (MFA) is disabled for a Google Workspace organization. An adversary may attempt to modify a password policy in order to weaken an organization’s security controls. |[Elastic] [Cloud] [Google Workspace] [Continuous Monitoring] [SecOps] [Identity and Access]  |7.11.0 |11 <<mfa-disabled-for-google-workspace-organization-history, Version history>>

|<<ms-office-macro-security-registry-modifications, MS Office Macro Security Registry Modifications>> |Microsoft Office Products offer options for users and developers to control the security settings for running and using Macros. Adversaries may abuse these security settings to modify the default behavior of the Office Application to trust future macros and/or disable security warnings, which could increase their chances of establishing persistence. |[Elastic] [Host] [Windows] [Threat Detection] [Defense Evasion]  |8.1.0 |2 <<ms-office-macro-security-registry-modifications-history, Version history>>

|<<malware-detected-elastic-endgame, Malware - Detected - Elastic Endgame>> |Elastic Endgame detected Malware. Click the Elastic Endgame icon in the event.module column or the link in the rule.reference column for additional information. |[Elastic] [Elastic Endgame]  |7.6.0 |7 <<malware-detected-elastic-endgame-history, Version history>>

|<<malware-prevented-elastic-endgame, Malware - Prevented - Elastic Endgame>> |Elastic Endgame prevented Malware. Click the Elastic Endgame icon in the event.module column or the link in the rule.reference column for additional information. |[Elastic] [Elastic Endgame]  |7.6.0 |7 <<malware-prevented-elastic-endgame-history, Version history>>

|<<microsoft-365-exchange-anti-phish-policy-deletion, Microsoft 365 Exchange Anti-Phish Policy Deletion>> |Identifies the deletion of an anti-phishing policy in Microsoft 365. By default, Microsoft 365 includes built-in features that help protect users from phishing attacks. Anti-phishing polices increase this protection by refining settings to better detect and prevent attacks. |[Elastic] [Cloud] [Microsoft 365] [Continuous Monitoring] [SecOps] [Configuration Audit]  |7.11.0 |5 <<microsoft-365-exchange-anti-phish-policy-deletion-history, Version history>>

|<<microsoft-365-exchange-anti-phish-rule-modification, Microsoft 365 Exchange Anti-Phish Rule Modification>> |Identifies the modification of an anti-phishing rule in Microsoft 365. By default, Microsoft 365 includes built-in features that help protect users from phishing attacks. Anti-phishing rules increase this protection by refining settings to better detect and prevent attacks. |[Elastic] [Cloud] [Microsoft 365] [Continuous Monitoring] [SecOps] [Configuration Audit]  |7.11.0 |5 <<microsoft-365-exchange-anti-phish-rule-modification-history, Version history>>

|<<microsoft-365-exchange-dkim-signing-configuration-disabled, Microsoft 365 Exchange DKIM Signing Configuration Disabled>> |Identifies when a DomainKeys Identified Mail (DKIM) signing configuration is disabled in Microsoft 365. With DKIM in Microsoft 365, messages that are sent from Exchange Online will be cryptographically signed. This will allow the receiving email system to validate that the messages were generated by a server that the organization authorized and were not spoofed. |[Elastic] [Cloud] [Microsoft 365] [Continuous Monitoring] [SecOps] [Data Protection]  |7.11.0 |6 <<microsoft-365-exchange-dkim-signing-configuration-disabled-history, Version history>>

|<<microsoft-365-exchange-dlp-policy-removed, Microsoft 365 Exchange DLP Policy Removed>> |Identifies when a Data Loss Prevention (DLP) policy is removed in Microsoft 365. An adversary may remove a DLP policy to evade existing DLP monitoring. |[Elastic] [Cloud] [Microsoft 365] [Continuous Monitoring] [SecOps] [Configuration Audit]  |7.11.0 |5 <<microsoft-365-exchange-dlp-policy-removed-history, Version history>>

|<<microsoft-365-exchange-malware-filter-policy-deletion, Microsoft 365 Exchange Malware Filter Policy Deletion>> |Identifies when a malware filter policy has been deleted in Microsoft 365. A malware filter policy is used to alert administrators that an internal user sent a message that contained malware. This may indicate an account or machine compromise that would need to be investigated. Deletion of a malware filter policy may be done to evade detection. |[Elastic] [Cloud] [Microsoft 365] [Continuous Monitoring] [SecOps] [Configuration Audit]  |7.11.0 |5 <<microsoft-365-exchange-malware-filter-policy-deletion-history, Version history>>

|<<microsoft-365-exchange-malware-filter-rule-modification, Microsoft 365 Exchange Malware Filter Rule Modification>> |Identifies when a malware filter rule has been deleted or disabled in Microsoft 365. An adversary or insider threat may want to modify a malware filter rule to evade detection. |[Elastic] [Cloud] [Microsoft 365] [Continuous Monitoring] [SecOps] [Configuration Audit]  |7.11.0 |5 <<microsoft-365-exchange-malware-filter-rule-modification-history, Version history>>

|<<microsoft-365-exchange-management-group-role-assignment, Microsoft 365 Exchange Management Group Role Assignment>> |Identifies when a new role is assigned to a management group in Microsoft 365. An adversary may attempt to add a role in order to maintain persistence in an environment. |[Elastic] [Cloud] [Microsoft 365] [Continuous Monitoring] [SecOps] [Identity and Access]  |7.11.0 |5 <<microsoft-365-exchange-management-group-role-assignment-history, Version history>>

|<<microsoft-365-exchange-safe-attachment-rule-disabled, Microsoft 365 Exchange Safe Attachment Rule Disabled>> |Identifies when a safe attachment rule is disabled in Microsoft 365. Safe attachment rules can extend malware protections to include routing all messages and attachments without a known malware signature to a special hypervisor environment. An adversary or insider threat may disable a safe attachment rule to exfiltrate data or evade defenses. |[Elastic] [Cloud] [Microsoft 365] [Continuous Monitoring] [SecOps] [Configuration Audit]  |7.11.0 |5 <<microsoft-365-exchange-safe-attachment-rule-disabled-history, Version history>>

|<<microsoft-365-exchange-safe-link-policy-disabled, Microsoft 365 Exchange Safe Link Policy Disabled>> |Identifies when a Safe Link policy is disabled in Microsoft 365. Safe Link policies for Office applications extend phishing protection to documents that contain hyperlinks, even after they have been delivered to a user. |[Elastic] [Cloud] [Microsoft 365] [Continuous Monitoring] [SecOps] [Identity and Access]  |7.11.0 |5 <<microsoft-365-exchange-safe-link-policy-disabled-history, Version history>>

|<<microsoft-365-exchange-transport-rule-creation, Microsoft 365 Exchange Transport Rule Creation>> |Identifies a transport rule creation in Microsoft 365. As a best practice, Exchange Online mail transport rules should not be set to forward email to domains outside of your organization. An adversary may create transport rules to exfiltrate data. |[Elastic] [Cloud] [Microsoft 365] [Continuous Monitoring] [SecOps] [Configuration Audit]  |7.11.0 |6 <<microsoft-365-exchange-transport-rule-creation-history, Version history>>

|<<microsoft-365-exchange-transport-rule-modification, Microsoft 365 Exchange Transport Rule Modification>> |Identifies when a transport rule has been disabled or deleted in Microsoft 365. Mail flow rules (also known as transport rules) are used to identify and take action on messages that flow through your organization. An adversary or insider threat may modify a transport rule to exfiltrate data or evade defenses. |[Elastic] [Cloud] [Microsoft 365] [Continuous Monitoring] [SecOps] [Configuration Audit]  |7.11.0 |5 <<microsoft-365-exchange-transport-rule-modification-history, Version history>>

|<<microsoft-365-global-administrator-role-assigned, Microsoft 365 Global Administrator Role Assigned>> |In Azure Active Directory (Azure AD), permissions to manage resources are assigned using roles. The Global Administrator is a role that enables users to have access to all administrative features in Azure AD and services that use Azure AD identities like the Microsoft 365 Defender portal, the Microsoft 365 compliance center, Exchange, SharePoint Online, and Skype for Business Online. Attackers can add users as Global Administrators to maintain access and manage all subscriptions and their settings and resources. |[Elastic] [Cloud] [Microsoft 365] [Continuous Monitoring] [SecOps] [Identity and Access]  |8.1.0 |2 <<microsoft-365-global-administrator-role-assigned-history, Version history>>

|<<microsoft-365-inbox-forwarding-rule-created, Microsoft 365 Inbox Forwarding Rule Created>> |Identifies when a new Inbox forwarding rule is created in Microsoft 365. Inbox rules process messages in the Inbox based on conditions and take actions. In this case, the rules will forward the emails to a defined address. Attackers can abuse Inbox Rules to intercept and exfiltrate email data without making organization-wide configuration changes or having the corresponding privileges. |[Elastic] [Cloud] [Microsoft 365] [Continuous Monitoring] [SecOps] [Configuration Audit]  |7.13.0 |3 <<microsoft-365-inbox-forwarding-rule-created-history, Version history>>

|<<microsoft-365-potential-ransomware-activity, Microsoft 365 Potential ransomware activity>> |Identifies when Microsoft Cloud App Security reports that a user has uploaded files to the cloud that might be infected with ransomware. |[Elastic] [Cloud] [Microsoft 365] [Continuous Monitoring] [SecOps] [Configuration Audit]  |7.16.0 |3 <<microsoft-365-potential-ransomware-activity-history, Version history>>

|<<microsoft-365-teams-custom-application-interaction-allowed, Microsoft 365 Teams Custom Application Interaction Allowed>> |Identifies when custom applications are allowed in Microsoft Teams. If an organization requires applications other than those available in the Teams app store, custom applications can be developed as packages and uploaded. An adversary may abuse this behavior to establish persistence in an environment. |[Elastic] [Cloud] [Microsoft 365] [Continuous Monitoring] [SecOps] [Configuration Audit]  |7.11.0 |5 <<microsoft-365-teams-custom-application-interaction-allowed-history, Version history>>

|<<microsoft-365-teams-external-access-enabled, Microsoft 365 Teams External Access Enabled>> |Identifies when external access is enabled in Microsoft Teams. External access lets Teams and Skype for Business users communicate with other users that are outside their organization. An adversary may enable external access or add an allowed domain to exfiltrate data or maintain persistence in an environment. |[Elastic] [Cloud] [Microsoft 365] [Continuous Monitoring] [SecOps] [Configuration Audit]  |7.11.0 |5 <<microsoft-365-teams-external-access-enabled-history, Version history>>

|<<microsoft-365-teams-guest-access-enabled, Microsoft 365 Teams Guest Access Enabled>> |Identifies when guest access is enabled in Microsoft Teams. Guest access in Teams allows people outside the organization to access teams and channels. An adversary may enable guest access to maintain persistence in an environment. |[Elastic] [Cloud] [Microsoft 365] [Continuous Monitoring] [SecOps] [Configuration Audit]  |7.11.0 |5 <<microsoft-365-teams-guest-access-enabled-history, Version history>>

|<<microsoft-365-unusual-volume-of-file-deletion, Microsoft 365 Unusual Volume of File Deletion>> |Identifies that a user has deleted an unusually large volume of files as reported by Microsoft Cloud App Security. |[Elastic] [Cloud] [Microsoft 365] [Continuous Monitoring] [SecOps] [Configuration Audit]  |7.16.0 |2 <<microsoft-365-unusual-volume-of-file-deletion-history, Version history>>

|<<microsoft-365-user-restricted-from-sending-email, Microsoft 365 User Restricted from Sending Email>> |Identifies when a user has been restricted from sending email due to exceeding sending limits of the service policies per the Security Compliance Center. |[Elastic] [Cloud] [Microsoft 365] [Continuous Monitoring] [SecOps] [Configuration Audit]  |7.16.0 |2 <<microsoft-365-user-restricted-from-sending-email-history, Version history>>

|<<microsoft-build-engine-loading-windows-credential-libraries, Microsoft Build Engine Loading Windows Credential Libraries>> |An instance of MSBuild, the Microsoft Build Engine, loaded DLLs (dynamically linked libraries) responsible for Windows credential management. This technique is sometimes used for credential dumping. |[Elastic] [Host] [Windows] [Threat Detection] [Credential Access]  |7.7.0 |9 <<microsoft-build-engine-loading-windows-credential-libraries-history, Version history>>

|<<microsoft-build-engine-started-an-unusual-process, Microsoft Build Engine Started an Unusual Process>> |An instance of MSBuild, the Microsoft Build Engine, started a PowerShell script or the Visual C# Command Line Compiler. This technique is sometimes used to deploy a malicious payload using the Build Engine. |[Elastic] [Host] [Windows] [Threat Detection] [Defense Evasion]  |7.7.0 |9 <<microsoft-build-engine-started-an-unusual-process-history, Version history>>

|<<microsoft-build-engine-started-by-a-script-process, Microsoft Build Engine Started by a Script Process>> |An instance of MSBuild, the Microsoft Build Engine, was started by a script or the Windows command interpreter. This behavior is unusual and is sometimes used by malicious payloads. |[Elastic] [Host] [Windows] [Threat Detection] [Defense Evasion]  |7.7.0 |11 <<microsoft-build-engine-started-by-a-script-process-history, Version history>>

|<<microsoft-build-engine-started-by-a-system-process, Microsoft Build Engine Started by a System Process>> |An instance of MSBuild, the Microsoft Build Engine, was started by Explorer or the WMI (Windows Management Instrumentation) subsystem. This behavior is unusual and is sometimes used by malicious payloads. |[Elastic] [Host] [Windows] [Threat Detection] [Defense Evasion]  |7.7.0 |10 <<microsoft-build-engine-started-by-a-system-process-history, Version history>>

|<<microsoft-build-engine-started-by-an-office-application, Microsoft Build Engine Started by an Office Application>> |An instance of MSBuild, the Microsoft Build Engine, was started by Excel or Word. This is unusual behavior for the Build Engine and could have been caused by an Excel or Word document executing a malicious script payload. |[Elastic] [Host] [Windows] [Threat Detection] [Defense Evasion]  |7.7.0 |10 <<microsoft-build-engine-started-by-an-office-application-history, Version history>>

|<<microsoft-build-engine-using-an-alternate-name, Microsoft Build Engine Using an Alternate Name>> |An instance of MSBuild, the Microsoft Build Engine, was started after being renamed. This is uncommon behavior and may indicate an attempt to run unnoticed or undetected. |[Elastic] [Host] [Windows] [Threat Detection] [Defense Evasion]  |7.7.0 |10 <<microsoft-build-engine-using-an-alternate-name-history, Version history>>

|<<microsoft-exchange-server-um-spawning-suspicious-processes, Microsoft Exchange Server UM Spawning Suspicious Processes>> |Identifies suspicious processes being spawned by the Microsoft Exchange Server Unified Messaging (UM) service. This activity has been observed exploiting CVE-2021-26857. |[Elastic] [Host] [Windows] [Threat Detection] [Initial Access]  |7.12.0 |2 <<microsoft-exchange-server-um-spawning-suspicious-processes-history, Version history>>

|<<microsoft-exchange-server-um-writing-suspicious-files, Microsoft Exchange Server UM Writing Suspicious Files>> |Identifies suspicious files being written by the Microsoft Exchange Server Unified Messaging (UM) service. This activity has been observed exploiting CVE-2021-26858. |[Elastic] [Host] [Windows] [Threat Detection] [Initial Access]  |7.12.0 |3 <<microsoft-exchange-server-um-writing-suspicious-files-history, Version history>>

|<<microsoft-exchange-worker-spawning-suspicious-processes, Microsoft Exchange Worker Spawning Suspicious Processes>> |Identifies suspicious processes being spawned by the Microsoft Exchange Server worker process (w3wp). This activity may indicate exploitation activity or access to an existing web shell backdoor. |[Elastic] [Host] [Windows] [Threat Detection] [Initial Access]  |7.12.0 |3 <<microsoft-exchange-worker-spawning-suspicious-processes-history, Version history>>

|<<microsoft-iis-connection-strings-decryption, Microsoft IIS Connection Strings Decryption>> |Identifies use of aspnet_regiis to decrypt Microsoft IIS connection strings. An attacker with Microsoft IIS web server access via a webshell or alike can decrypt and dump any hardcoded connection strings, such as the MSSQL service account password using aspnet_regiis command. |[Elastic] [Host] [Windows] [Threat Detection] [Credential Access]  |7.10.0 |5 <<microsoft-iis-connection-strings-decryption-history, Version history>>

|<<microsoft-iis-service-account-password-dumped, Microsoft IIS Service Account Password Dumped>> |Identifies the Internet Information Services (IIS) command-line tool, AppCmd, being used to list passwords. An attacker with IIS web server access via a web shell can decrypt and dump the IIS AppPool service account password using AppCmd. |[Elastic] [Host] [Windows] [Threat Detection] [Credential Access]  |7.10.0 |5 <<microsoft-iis-service-account-password-dumped-history, Version history>>

|<<microsoft-windows-defender-tampering, Microsoft Windows Defender Tampering>> |Identifies when one or more features on Microsoft Defender are disabled. Adversaries may disable or tamper with Microsoft Defender features to evade detection and conceal malicious behavior. |[Elastic] [Host] [Windows] [Threat Detection] [Defense Evasion]  |8.0.0 |3 <<microsoft-windows-defender-tampering-history, Version history>>

|<<mimikatz-memssp-log-file-detected, Mimikatz Memssp Log File Detected>> |Identifies the password log file from the default Mimikatz memssp module. |[Elastic] [Host] [Windows] [Threat Detection] [Credential Access]  |7.10.0 |5 <<mimikatz-memssp-log-file-detected-history, Version history>>

|<<modification-of-amsienable-registry-key, Modification of AmsiEnable Registry Key>> |Identifies modifications of the AmsiEnable registry key to 0, which disables the Antimalware Scan Interface (AMSI). An adversary can modify this key to disable AMSI protections. |[Elastic] [Host] [Windows] [Threat Detection] [Defense Evasion]  |7.14.0 |4 <<modification-of-amsienable-registry-key-history, Version history>>

|<<modification-of-boot-configuration, Modification of Boot Configuration>> |Identifies use of bcdedit.exe to delete boot configuration data. This tactic is sometimes used as by malware or an attacker as a destructive technique. |[Elastic] [Host] [Windows] [Threat Detection] [Impact]  |7.7.0 |10 <<modification-of-boot-configuration-history, Version history>>

|<<modification-of-dynamic-linker-preload-shared-object, Modification of Dynamic Linker Preload Shared Object>> |Identifies modification of the dynamic linker preload shared object (ld.so.preload). Adversaries may execute malicious payloads by hijacking the dynamic linker used to load libraries. |[Elastic] [Host] [Linux] [Threat Detection] [Privilege Escalation]  |7.12.0 |2 <<modification-of-dynamic-linker-preload-shared-object-history, Version history>>

|<<modification-of-environment-variable-via-launchctl, Modification of Environment Variable via Launchctl>> |Identifies modifications to an environment variable using the built-in launchctl command. Adversaries may execute their own malicious payloads by hijacking certain environment variables to load arbitrary libraries or bypass certain restrictions. |[Elastic] [Host] [macOS] [Threat Detection] [Defense Evasion]  |7.12.0 |2 <<modification-of-environment-variable-via-launchctl-history, Version history>>

|<<modification-of-openssh-binaries, Modification of OpenSSH Binaries>> |Adversaries may modify SSH related binaries for persistence or credential access by patching sensitive functions to enable unauthorized access or by logging SSH credentials for exfiltration. |[Elastic] [Host] [Linux] [Threat Detection] [Credential Access] [Persistence]  |7.12.0 |1

|<<modification-of-safari-settings-via-defaults-command, Modification of Safari Settings via Defaults Command>> |Identifies changes to the Safari configuration using the built-in defaults command. Adversaries may attempt to enable or disable certain Safari settings, such as enabling JavaScript from Apple Events to ease in the hijacking of the users browser. |[Elastic] [Host] [macOS] [Threat Detection] [Defense Evasion]  |7.12.0 |1

|<<modification-of-standard-authentication-module-or-configuration, Modification of Standard Authentication Module or Configuration>> |Adversaries may modify the standard authentication module for persistence via patching the normal authorization process or modifying the login configuration to allow unauthorized access or elevate privileges. |[Elastic] [Host] [macOS] [Linux] [Threat Detection] [Credential Access] [Persistence]  |7.12.0 |2 <<modification-of-standard-authentication-module-or-configuration-history, Version history>>

|<<modification-of-wdigest-security-provider, Modification of WDigest Security Provider>> |Identifies attempts to modify the WDigest security provider in the registry to force the user's password to be stored in clear text in memory. This behavior can be indicative of an adversary attempting to weaken the security configuration of an endpoint. Once the UseLogonCredential value is modified, the adversary may attempt to dump clear text passwords from memory. |[Elastic] [Host] [Windows] [Threat Detection] [Credential Access]  |7.12.0 |3 <<modification-of-wdigest-security-provider-history, Version history>>

|<<modification-or-removal-of-an-okta-application-sign-on-policy, Modification or Removal of an Okta Application Sign-On Policy>> |Detects attempts to modify or delete a sign on policy for an Okta application. An adversary may attempt to modify or delete the sign on policy for an Okta application in order to remove or weaken an organization's security controls. |[Elastic] [Identity] [Okta] [Continuous Monitoring] [SecOps] [Identity and Access]  |7.9.0 |6 <<modification-or-removal-of-an-okta-application-sign-on-policy-history, Version history>>

|<<mounting-hidden-or-webdav-remote-shares, Mounting Hidden or WebDav Remote Shares>> |Identifies the use of net.exe to mount a WebDav or hidden remote share. This may indicate lateral movement or preparation for data exfiltration. |[Elastic] [Host] [Windows] [Threat Detection] [Lateral Movement]  |7.11.0 |4 <<mounting-hidden-or-webdav-remote-shares-history, Version history>>

|<<msbuild-making-network-connections, MsBuild Making Network Connections>> |Identifies MsBuild.exe making outbound network connections. This may indicate adversarial activity as MsBuild is often leveraged by adversaries to execute code and evade detection. |[Elastic] [Host] [Windows] [Threat Detection] [Defense Evasion]  |7.6.0 |8 <<msbuild-making-network-connections-history, Version history>>

|<<mshta-making-network-connections, Mshta Making Network Connections>> |Identifies Mshta.exe making outbound network connections. This may indicate adversarial activity, as Mshta is often leveraged by adversaries to execute malicious scripts and evade detection. |[Elastic] [Host] [Windows] [Threat Detection] [Defense Evasion]  |7.10.0 |5 <<mshta-making-network-connections-history, Version history>>

|<<multi-factor-authentication-disabled-for-an-azure-user, Multi-Factor Authentication Disabled for an Azure User>> |Identifies when multi-factor authentication (MFA) is disabled for an Azure user account. An adversary may disable MFA for a user account in order to weaken the authentication requirements for the account. |[Elastic] [Cloud] [Azure] [Continuous Monitoring] [SecOps] [Identity and Access]  |7.10.0 |5 <<multi-factor-authentication-disabled-for-an-azure-user-history, Version history>>

|<<ntds-or-sam-database-file-copied, NTDS or SAM Database File Copied>> |Identifies a copy operation of the Active Directory Domain Database (ntds.dit) or Security Account Manager (SAM) files. Those files contain sensitive information including hashed domain and/or local credentials. |[Elastic] [Host] [Windows] [Threat Detection] [Credential Access]  |7.11.0 |6 <<ntds-or-sam-database-file-copied-history, Version history>>

|<<netcat-network-activity, Netcat Network Activity>> |A netcat process is engaging in network activity on a Linux host. Netcat is often used as a persistence mechanism by exporting a reverse shell or by serving a shell on a listening port. Netcat is also sometimes used for data exfiltration. |[Elastic] [Host] [Linux] [Threat Detection]  |7.6.0 |6 <<netcat-network-activity-history, Version history>>

|<<network-connection-via-certutil, Network Connection via Certutil>> |Identifies certutil.exe making a network connection. Adversaries could abuse certutil.exe to download a certificate, or malware, from a remote URL. |[Elastic] [Host] [Windows] [Threat Detection] [Command and Control]  |7.7.0 |7 <<network-connection-via-certutil-history, Version history>>

|<<network-connection-via-compiled-html-file, Network Connection via Compiled HTML File>> |Compiled HTML files (.chm) are commonly distributed as part of the Microsoft HTML Help system. Adversaries may conceal malicious code in a CHM file and deliver it to a victim for execution. CHM content is loaded by the HTML Help executable program (hh.exe). |[Elastic] [Host] [Windows] [Threat Detection] [Execution]  |7.6.0 |9 <<network-connection-via-compiled-html-file-history, Version history>>

|<<network-connection-via-msxsl, Network Connection via MsXsl>> |Identifies msxsl.exe making a network connection. This may indicate adversarial activity as msxsl.exe is often leveraged by adversaries to execute malicious scripts and evade detection. |[Elastic] [Host] [Windows] [Threat Detection] [Defense Evasion]  |7.7.0 |7 <<network-connection-via-msxsl-history, Version history>>

|<<network-connection-via-registration-utility, Network Connection via Registration Utility>> |Identifies the native Windows tools regsvr32.exe, regsvr64.exe, RegSvcs.exe, or RegAsm.exe making a network connection. This may be indicative of an attacker bypassing allowlists or running arbitrary scripts via a signed Microsoft binary. |[Elastic] [Host] [Windows] [Threat Detection] [Execution]  |7.6.0 |11 <<network-connection-via-registration-utility-history, Version history>>

|<<network-connection-via-signed-binary, Network Connection via Signed Binary>> |Binaries signed with trusted digital certificates can execute on Windows systems protected by digital signature validation. Adversaries may use these binaries to 'live off the land' and execute malicious files that could bypass application allowlists and signature validation. |[Elastic] [Host] [Windows] [Threat Detection] [Defense Evasion]  |7.6.0 |9 <<network-connection-via-signed-binary-history, Version history>>

|<<network-logon-provider-registry-modification, Network Logon Provider Registry Modification>> |Identifies the modification of the network logon provider registry. Adversaries may register a rogue network logon provider module for persistence and/or credential access via intercepting the authentication credentials in clear text during user logon. |[Elastic] [Host] [Windows] [Threat Detection] [Persistence] [Credential Access]  |7.13.0 |3 <<network-logon-provider-registry-modification-history, Version history>>

|<<network-traffic-to-rare-destination-country, Network Traffic to Rare Destination Country>> |A machine learning job detected a rare destination country name in the network logs. This can be due to initial access, persistence, command-and-control, or exfiltration activity. For example, when a user clicks on a link in a phishing email or opens a malicious document, a request may be sent to download and run a payload from a server in a country which does not normally appear in network traffic or business work-flows. Malware instances and persistence mechanisms may communicate with command-and-control (C2) infrastructure in their country of origin, which may be an unusual destination country for the source network. |[Elastic] [Network] [Threat Detection] [ML]  |7.13.0 |2 <<network-traffic-to-rare-destination-country-history, Version history>>

|<<new-activesyncalloweddeviceid-added-via-powershell, New ActiveSyncAllowedDeviceID Added via PowerShell>> |Identifies the use of the Exchange PowerShell cmdlet, Set-CASMailbox, to add a new ActiveSync allowed device. Adversaries may target user email to collect sensitive information. |[Elastic] [Host] [Windows] [Threat Detection] [Persistence]  |7.11.0 |7 <<new-activesyncalloweddeviceid-added-via-powershell-history, Version history>>

|<<new-or-modified-federation-domain, New or Modified Federation Domain>> |Identifies a new or modified federation domain, which can be used to create a trust between O365 and an external identity provider. |[Elastic] [Cloud] [Microsoft 365] [Continuous Monitoring] [SecOps] [Identity and Access]  |7.16.0 |2 <<new-or-modified-federation-domain-history, Version history>>

|<<nping-process-activity, Nping Process Activity>> |Nping ran on a Linux host. Nping is part of the Nmap tool suite and has the ability to construct raw packets for a wide variety of security testing applications, including denial of service testing. |[Elastic] [Host] [Linux] [Threat Detection]  |7.6.0 |7 <<nping-process-activity-history, Version history>>

|<<nullsessionpipe-registry-modification, NullSessionPipe Registry Modification>> |Identifies NullSessionPipe registry modifications that specify which pipes can be accessed anonymously. This could be indicative of adversary lateral movement preparation by making the added pipe available to everyone. |[Elastic] [Host] [Windows] [Threat Detection] [Lateral Movement]  |7.13.0 |2 <<nullsessionpipe-registry-modification-history, Version history>>

|<<o365-email-reported-by-user-as-malware-or-phish, O365 Email Reported by User as Malware or Phish>> |Detects the occurrence of emails reported as Phishing or Malware by Users. Security Awareness training is essential to stay ahead of scammers and threat actors, as security products can be bypassed, and the user can still receive a malicious message. Educating users to report suspicious messages can help identify gaps in security controls and prevent malware infections and Business Email Compromise attacks. |[Elastic] [Cloud] [Microsoft 365] [Continuous Monitoring] [SecOps] [Initial Access]  |8.1.0 |1

|<<o365-excessive-single-sign-on-logon-errors, O365 Excessive Single Sign-On Logon Errors>> |Identifies accounts with a high number of single sign-on (SSO) logon errors. Excessive logon errors may indicate an attempt to brute force a password or SSO token. |[Elastic] [Cloud] [Microsoft 365] [Continuous Monitoring] [SecOps] [Identity and Access]  |7.14.0 |4 <<o365-excessive-single-sign-on-logon-errors-history, Version history>>

|<<o365-exchange-suspicious-mailbox-right-delegation, O365 Exchange Suspicious Mailbox Right Delegation>> |Identifies the assignment of rights to access content from another mailbox. An adversary may use the compromised account to send messages to other accounts in the network of the target organization while creating inbox rules, so messages can evade spam/phishing detection mechanisms. |[Elastic] [Cloud] [Microsoft 365] [Continuous Monitoring] [SecOps] [Configuration Audit]  |7.16.0 |2 <<o365-exchange-suspicious-mailbox-right-delegation-history, Version history>>

|<<o365-mailbox-audit-logging-bypass, O365 Mailbox Audit Logging Bypass>> |Detects the occurrence of mailbox audit bypass associations. The mailbox audit is responsible for logging specified mailbox events (like accessing a folder or a message or permanently deleting a message). However, actions taken by some authorized accounts, such as accounts used by third-party tools or accounts used for lawful monitoring, can create a large number of mailbox audit log entries and may not be of interest to your organization. Because of this, administrators can create bypass associations, allowing certain accounts to perform their tasks without being logged. Attackers can abuse this allowlist mechanism to conceal actions taken, as the mailbox audit will log no activity done by the account. |[Elastic] [Cloud] [Microsoft 365] [Continuous Monitoring] [SecOps] [Initial Access]  |8.0.0 |3 <<o365-mailbox-audit-logging-bypass-history, Version history>>

|<<okta-brute-force-or-password-spraying-attack, Okta Brute Force or Password Spraying Attack>> |Identifies a high number of failed Okta user authentication attempts from a single IP address, which could be indicative of a brute force or password spraying attack. An adversary may attempt a brute force or password spraying attack to obtain unauthorized access to user accounts. |[Elastic] [Identity] [Okta] [Continuous Monitoring] [SecOps] [Identity and Access]  |7.9.0 |5 <<okta-brute-force-or-password-spraying-attack-history, Version history>>

|<<okta-user-session-impersonation, Okta User Session Impersonation>> |A user has initiated a session impersonation granting them access to the environment with the permissions of the user they are impersonating. This would likely indicate Okta administrative access and should only ever occur if requested and expected. |[Elastic] [Identity] [Okta] [Continuous Monitoring] [SecOps] [Identity and Access] [Credential Access]  |8.2.0 |1

|<<onedrive-malware-file-upload, OneDrive Malware File Upload>> |Identifies the occurence of files uploaded to OneDrive being detected as Malware by the file scanning engine. Attackers can use File Sharing and Organization Repositories to spread laterally within the company and amplify their access. Users can inadvertently share these files without knowing their maliciousness, giving adversaries opportunity to gain initial access to other endpoints in the environment. |[Elastic] [Cloud] [Microsoft 365] [Continuous Monitoring] [SecOps] [Lateral Movement]  |8.1.0 |1

|<<outbound-scheduled-task-activity-via-powershell, Outbound Scheduled Task Activity via PowerShell>> |Identifies the PowerShell process loading the Task Scheduler COM DLL followed by an outbound RPC network connection within a short time period. This may indicate lateral movement or remote discovery via scheduled tasks. |[Elastic] [Host] [Windows] [Threat Detection] [Execution]  |7.11.0 |4 <<outbound-scheduled-task-activity-via-powershell-history, Version history>>

|<<parent-process-pid-spoofing, Parent Process PID Spoofing>> |Identifies parent process spoofing used to thwart detection. Adversaries may spoof the parent process identifier (PPID) of a new process to evade process-monitoring defenses or to elevate privileges. |[Elastic] [Host] [Windows] [Threat Detection] [Defense Evasion]  |7.14.0 |1

|<<peripheral-device-discovery, Peripheral Device Discovery>> |Identifies use of the Windows file system utility (fsutil.exe ) to gather information about attached peripheral devices and components connected to a computer system. |[Elastic] [Host] [Windows] [Threat Detection] [Discovery]  |7.11.0 |4 <<peripheral-device-discovery-history, Version history>>

|<<permission-theft-detected-elastic-endgame, Permission Theft - Detected - Elastic Endgame>> |Elastic Endgame detected Permission Theft. Click the Elastic Endgame icon in the event.module column or the link in the rule.reference column for additional information. |[Elastic] [Elastic Endgame]  |7.6.0 |7 <<permission-theft-detected-elastic-endgame-history, Version history>>

|<<permission-theft-prevented-elastic-endgame, Permission Theft - Prevented - Elastic Endgame>> |Elastic Endgame prevented Permission Theft. Click the Elastic Endgame icon in the event.module column or the link in the rule.reference column for additional information. |[Elastic] [Elastic Endgame]  |7.6.0 |7 <<permission-theft-prevented-elastic-endgame-history, Version history>>

|<<persistence-via-bits-job-notify-cmdline, Persistence via BITS Job Notify Cmdline>> |An adversary can use the Background Intelligent Transfer Service (BITS) SetNotifyCmdLine method to execute a program that runs after a job finishes transferring data or after a job enters a specified state in order to persist on a system. |[Elastic] [Host] [Windows] [Threat Detection] [Persistence]  |7.13.0 |2 <<persistence-via-bits-job-notify-cmdline-history, Version history>>

|<<persistence-via-directoryservice-plugin-modification, Persistence via DirectoryService Plugin Modification>> |Identifies the creation or modification of a DirectoryService PlugIns (dsplug) file. The DirectoryService daemonlaunches on each system boot and automatically reloads after crash. It scans and executes bundles that are located in the DirectoryServices PlugIns folder and can be abused by adversaries to maintain persistence. |[Elastic] [Host] [macOS] [Threat Detection] [Persistence]  |7.12.0 |1

|<<persistence-via-docker-shortcut-modification, Persistence via Docker Shortcut Modification>> |An adversary can establish persistence by modifying an existing macOS dock property list in order to execute a malicious application instead of the intended one when invoked. |[Elastic] [Host] [macOS] [Threat Detection] [Persistence]  |7.12.0 |2 <<persistence-via-docker-shortcut-modification-history, Version history>>

|<<persistence-via-folder-action-script, Persistence via Folder Action Script>> |Detects modification of a Folder Action script. A Folder Action script is executed when the folder to which it is attached has items added or removed, or when its window is opened, closed, moved, or resized. Adversaries may abuse this feature to establish persistence by utilizing a malicious script. |[Elastic] [Host] [macOS] [Threat Detection] [Execution] [Persistence]  |7.11.0 |5 <<persistence-via-folder-action-script-history, Version history>>

|<<persistence-via-hidden-run-key-detected, Persistence via Hidden Run Key Detected>> |Identifies a persistence mechanism that utilizes the NtSetValueKey native API to create a hidden (null terminated) registry key. An adversary may use this method to hide from system utilities such as the Registry Editor (regedit). |[Elastic] [Host] [Windows] [Threat Detection] [Persistence]  |7.11.0 |5 <<persistence-via-hidden-run-key-detected-history, Version history>>

|<<persistence-via-kde-autostart-script-or-desktop-file-modification, Persistence via KDE AutoStart Script or Desktop File Modification>> |Identifies the creation or modification of a K Desktop Environment (KDE) AutoStart script or desktop file that will execute upon each user logon. Adversaries may abuse this method for persistence. |[Elastic] [Host] [Linux] [Threat Detection] [Persistence]  |7.12.0 |2 <<persistence-via-kde-autostart-script-or-desktop-file-modification-history, Version history>>

|<<persistence-via-login-or-logout-hook, Persistence via Login or Logout Hook>> |Identifies use of the Defaults command to install a login or logoff hook in MacOS. An adversary may abuse this capability to establish persistence in an environment by inserting code to be executed at login or logout. |[Elastic] [Host] [macOS] [Threat Detection] [Persistence]  |7.11.0 |5 <<persistence-via-login-or-logout-hook-history, Version history>>

|<<persistence-via-microsoft-office-addins, Persistence via Microsoft Office AddIns>> |Detects attempts to establish persistence on an endpoint by abusing Microsoft Office add-ins. |[Elastic] [Host] [Windows] [Threat Detection] [Persistence]  |7.11.0 |4 <<persistence-via-microsoft-office-addins-history, Version history>>

|<<persistence-via-microsoft-outlook-vba, Persistence via Microsoft Outlook VBA>> |Detects attempts to establish persistence on an endpoint by installing a rogue Microsoft Outlook VBA Template. |[Elastic] [Host] [Windows] [Threat Detection] [Persistence]  |7.11.0 |4 <<persistence-via-microsoft-outlook-vba-history, Version history>>

|<<persistence-via-scheduled-job-creation, Persistence via Scheduled Job Creation>> |A job can be used to schedule programs or scripts to be executed at a specified date and time. Adversaries may abuse task scheduling functionality to facilitate initial or recurring execution of malicious code. |[Elastic] [Host] [Windows] [Threat Detection] [Persistence]  |7.13.0 |3 <<persistence-via-scheduled-job-creation-history, Version history>>

|<<persistence-via-telemetrycontroller-scheduled-task-hijack, Persistence via TelemetryController Scheduled Task Hijack>> |Detects the successful hijack of Microsoft Compatibility Appraiser scheduled task to establish persistence with an integrity level of system. |[Elastic] [Host] [Windows] [Threat Detection] [Persistence]  |7.10.0 |7 <<persistence-via-telemetrycontroller-scheduled-task-hijack-history, Version history>>

|<<persistence-via-update-orchestrator-service-hijack, Persistence via Update Orchestrator Service Hijack>> |Identifies potential hijacking of the Microsoft Update Orchestrator Service to establish persistence with an integrity level of SYSTEM. |[Elastic] [Host] [Windows] [Threat Detection] [Persistence]  |7.10.0 |5 <<persistence-via-update-orchestrator-service-hijack-history, Version history>>

|<<persistence-via-wmi-event-subscription, Persistence via WMI Event Subscription>> |An adversary can use Windows Management Instrumentation (WMI) to install event filters, providers, consumers, and bindings that execute code when a defined event occurs. Adversaries may use the capabilities of WMI to subscribe to an event and execute arbitrary code when that event occurs, providing persistence on a system. |[Elastic] [Host] [Windows] [Threat Detection] [Persistence]  |7.11.0 |5 <<persistence-via-wmi-event-subscription-history, Version history>>

|<<persistence-via-wmi-standard-registry-provider, Persistence via WMI Standard Registry Provider>> |Identifies use of the Windows Management Instrumentation StdRegProv (registry provider) to modify commonly abused registry locations for persistence. |[Elastic] [Host] [Windows] [Threat Detection] [Persistence]  |7.13.0 |2 <<persistence-via-wmi-standard-registry-provider-history, Version history>>

|<<persistent-scripts-in-the-startup-directory, Persistent Scripts in the Startup Directory>> |Identifies script engines creating files in the Startup folder, or the creation of script files in the Startup folder. Adversaries may abuse this technique to maintain persistence in an environment. |[Elastic] [Host] [Windows] [Threat Detection] [Persistence]  |7.11.0 |4 <<persistent-scripts-in-the-startup-directory-history, Version history>>

|<<port-forwarding-rule-addition, Port Forwarding Rule Addition>> |Identifies the creation of a new port forwarding rule. An adversary may abuse this technique to bypass network segmentation restrictions. |[Elastic] [Host] [Windows] [Threat Detection] [Command and Control]  |7.11.0 |6 <<port-forwarding-rule-addition-history, Version history>>

|<<possible-consent-grant-attack-via-azure-registered-application, Possible Consent Grant Attack via Azure-Registered Application>> |Detects when a user grants permissions to an Azure-registered application or when an administrator grants tenant-wide permissions to an application. An adversary may create an Azure-registered application that requests access to data such as contact information, email, or documents. |[Elastic] [Cloud] [Azure] [Continuous Monitoring] [SecOps] [Identity and Access]  |7.10.0 |5 <<possible-consent-grant-attack-via-azure-registered-application-history, Version history>>

|<<possible-fin7-dga-command-and-control-behavior, Possible FIN7 DGA Command and Control Behavior>> |This rule detects a known command and control pattern in network events. The FIN7 threat group is known to use this command and control technique, while maintaining persistence in their target's network. |[Elastic] [Network] [Threat Detection] [Command and Control] [Host]  |7.10.0 |6 <<possible-fin7-dga-command-and-control-behavior-history, Version history>>

|<<possible-okta-dos-attack, Possible Okta DoS Attack>> |Detects possible Denial of Service (DoS) attacks against an Okta organization. An adversary may attempt to disrupt an organization's business operations by performing a DoS attack against its Okta service. |[Elastic] [Identity] [Okta] [Continuous Monitoring] [SecOps] [Monitoring]  |7.9.0 |6 <<possible-okta-dos-attack-history, Version history>>

|<<potential-abuse-of-repeated-mfa-push-notifications, Potential Abuse of Repeated MFA Push Notifications>> |Detects when an attacker abuses the Multi-Factor authentication mechanism by repeatedly issuing login requests until the user eventually accepts the Okta push notification. An adversary may attempt to bypass the Okta MFA policies configured for an organization to obtain unauthorized access. |[Elastic] [Identity] [Okta] [Continuous Monitoring] [SecOps] [Identity and Access]  |8.1.0 |2 <<potential-abuse-of-repeated-mfa-push-notifications-history, Version history>>

|<<potential-admin-group-account-addition, Potential Admin Group Account Addition>> |Identifies attempts to add an account to the admin group via the command line. This could be an indication of privilege escalation activity. |[Elastic] [Host] [macOS] [Threat Detection] [Privilege Escalation]  |7.12.0 |1

|<<potential-application-shimming-via-sdbinst, Potential Application Shimming via Sdbinst>> |The Application Shim was created to allow for backward compatibility of software as the operating system codebase changes over time. This Windows functionality has been abused by attackers to stealthily gain persistence and arbitrary code execution in legitimate Windows processes. |[Elastic] [Host] [Windows] [Threat Detection] [Persistence]  |7.6.0 |9 <<potential-application-shimming-via-sdbinst-history, Version history>>

|<<potential-command-and-control-via-internet-explorer, Potential Command and Control via Internet Explorer>> |Identifies instances of Internet Explorer (iexplore.exe) being started via the Component Object Model (COM) making unusual network connections. Adversaries could abuse Internet Explorer via COM to avoid suspicious processes making network connections and bypass host-based firewall restrictions. |[Elastic] [Host] [Windows] [Threat Detection] [Command and Control]  |7.11.0 |5 <<potential-command-and-control-via-internet-explorer-history, Version history>>

|<<potential-cookies-theft-via-browser-debugging, Potential Cookies Theft via Browser Debugging>> |Identifies the execution of a Chromium based browser with the debugging process argument, which may indicate an attempt to steal authentication cookies. An adversary may steal web application or service session cookies and use them to gain access web applications or Internet services as an authenticated user without needing credentials. |[Elastic] [Host] [Linux] [Windows] [macOS] [Threat Detection] [Credential Access]  |7.12.0 |2 <<potential-cookies-theft-via-browser-debugging-history, Version history>>

|<<potential-credential-access-via-dcsync, Potential Credential Access via DCSync>> |This rule identifies when a User Account starts the Active Directory Replication Process. Attackers can use the DCSync technique to get credential information of individual accounts or the entire domain, thus compromising the entire domain. |[Elastic] [Host] [Windows] [Threat Detection] [Credential Access] [Active Directory]  |8.1.0 |2 <<potential-credential-access-via-dcsync-history, Version history>>

|<<potential-credential-access-via-duplicatehandle-in-lsass, Potential Credential Access via DuplicateHandle in LSASS>> |Identifies suspicious access to an LSASS handle via DuplicateHandle from an unknown call trace module. This may indicate an attempt to bypass the NtOpenProcess API to evade detection and dump LSASS memory for credential access. |[Elastic] [Host] [Windows] [Threat Detection] [Credential Access]  |7.16.0 |3 <<potential-credential-access-via-duplicatehandle-in-lsass-history, Version history>>

|<<potential-credential-access-via-lsass-memory-dump, Potential Credential Access via LSASS Memory Dump>> |Identifies suspicious access to LSASS handle from a call trace pointing to DBGHelp.dll or DBGCore.dll, which both export the MiniDumpWriteDump method that can be used to dump LSASS memory content in preparation for credential access. |[Elastic] [Host] [Windows] [Threat Detection] [Credential Access]  |8.0.0 |4 <<potential-credential-access-via-lsass-memory-dump-history, Version history>>

|<<potential-credential-access-via-renamed-com-services-dll, Potential Credential Access via Renamed COM+ Services DLL>> |Identifies suspicious renamed COMSVCS.DLL Image Load, which exports the MiniDump function that can be used to dump a process memory. This may indicate an attempt to dump LSASS memory while bypassing command-line based detection in preparation for credential access. |[Elastic] [Host] [Windows] [Threat Detection] [Credential Access]  |8.0.0 |3 <<potential-credential-access-via-renamed-com-services-dll-history, Version history>>

|<<potential-credential-access-via-windows-utilities, Potential Credential Access via Windows Utilities>> |Identifies the execution of known Windows utilities often abused to dump LSASS memory or the Active Directory database (NTDS.dit) in preparation for credential access. |[Elastic] [Host] [Windows] [Threat Detection] [Credential Access]  |7.11.0 |6 <<potential-credential-access-via-windows-utilities-history, Version history>>

|<<potential-dll-side-loading-via-microsoft-antimalware-service-executable, Potential DLL Side-Loading via Microsoft Antimalware Service Executable>> |Identifies a Windows trusted program that is known to be vulnerable to DLL Search Order Hijacking starting after being renamed or from a non-standard path. This is uncommon behavior and may indicate an attempt to evade defenses via side-loading a malicious DLL within the memory space of one of those processes. |[Elastic] [Host] [Windows] [Threat Detection] [Defense Evasion]  |7.14.0 |3 <<potential-dll-side-loading-via-microsoft-antimalware-service-executable-history, Version history>>

|<<potential-dll-sideloading-via-trusted-microsoft-programs, Potential DLL SideLoading via Trusted Microsoft Programs>> |Identifies an instance of a Windows trusted program that is known to be vulnerable to DLL Search Order Hijacking starting after being renamed or from a non-standard path. This is uncommon behavior and may indicate an attempt to evade defenses via side loading a malicious DLL within the memory space of one of those processes. |[Elastic] [Host] [Windows] [Threat Detection] [Defense Evasion]  |7.10.0 |6 <<potential-dll-sideloading-via-trusted-microsoft-programs-history, Version history>>

|<<potential-dns-tunneling-via-iodine, Potential DNS Tunneling via Iodine>> |Iodine is a tool for tunneling Internet protocol version 4 (IPV4) traffic over the DNS protocol to circumvent firewalls, network security groups, and network access lists while evading detection. |[Elastic] [Host] [Linux] [Threat Detection]  |7.6.0 |7 <<potential-dns-tunneling-via-iodine-history, Version history>>

|<<potential-dns-tunneling-via-nslookup, Potential DNS Tunneling via NsLookup>> |This rule identifies a large number (15) of nslookup.exe executions with an explicit query type from the same host. This may indicate command and control activity utilizing the DNS protocol. |[Elastic] [Host] [Windows] [Threat Detection] [Command and Control]  |7.11.0 |4 <<potential-dns-tunneling-via-nslookup-history, Version history>>

|<<potential-disabling-of-selinux, Potential Disabling of SELinux>> |Identifies potential attempts to disable Security-Enhanced Linux (SELinux), which is a Linux kernel security feature to support access control policies. Adversaries may disable security tools to avoid possible detection of their tools and activities. |[Elastic] [Host] [Linux] [Threat Detection] [Defense Evasion]  |7.8.0 |7 <<potential-disabling-of-selinux-history, Version history>>

|<<potential-evasion-via-filter-manager, Potential Evasion via Filter Manager>> |The Filter Manager Control Program (fltMC.exe) binary may be abused by adversaries to unload a filter driver and evade defenses. |[Elastic] [Host] [Windows] [Threat Detection] [Defense Evasion]  |7.6.0 |9 <<potential-evasion-via-filter-manager-history, Version history>>

|<<potential-hidden-local-user-account-creation, Potential Hidden Local User Account Creation>> |Identifies attempts to create a local account that will be hidden from the macOS logon window. This may indicate an attempt to evade user attention while maintaining persistence using a separate local account. |[Elastic] [Host] [macOS] [Threat Detection] [Persistence]  |7.12.0 |1

|<<potential-java-jndi-exploitation-attempt, Potential JAVA/JNDI Exploitation Attempt>> |Identifies an outbound network connection by JAVA to LDAP, RMI or DNS standard ports followed by a suspicious JAVA child processes. This may indicate an attempt to exploit a JAVA/NDI (Java Naming and Directory Interface) injection vulnerability. |[Elastic] [Host] [Linux] [macOS] [Threat Detection] [Execution]  |8.1.0 |2 <<potential-java-jndi-exploitation-attempt-history, Version history>>

|<<potential-kerberos-attack-via-bifrost, Potential Kerberos Attack via Bifrost>> |Identifies use of Bifrost, a known macOS Kerberos pentesting tool, which can be used to dump cached Kerberos tickets or attempt unauthorized authentication techniques such as pass-the-ticket/hash and kerberoasting. |[Elastic] [Host] [macOS] [Threat Detection] [Credential Access] [Lateral Movement]  |7.12.0 |2 <<potential-kerberos-attack-via-bifrost-history, Version history>>

|<<potential-lsa-authentication-package-abuse, Potential LSA Authentication Package Abuse>> |Adversaries can use the autostart mechanism provided by the Local Security Authority (LSA) authentication packages for privilege escalation or persistence by placing a reference to a binary in the Windows registry. The binary will then be executed by SYSTEM when the authentication packages are loaded. |[Elastic] [Host] [Windows] [Threat Detection] [Privilege Escalation]  |7.12.0 |2 <<potential-lsa-authentication-package-abuse-history, Version history>>

|<<potential-lsass-clone-creation-via-psscapturesnapshot, Potential LSASS Clone Creation via PssCaptureSnapShot>> |Identifies the creation of an LSASS process clone via PssCaptureSnapShot where the parent process is the initial LSASS process instance. This may indicate an attempt to evade detection and dump LSASS memory for credential access. |[Elastic] [Host] [Windows] [Threat Detection] [Credential Access]  |8.0.0 |2 <<potential-lsass-clone-creation-via-psscapturesnapshot-history, Version history>>

|<<potential-lsass-memory-dump-via-psscapturesnapshot, Potential LSASS Memory Dump via PssCaptureSnapShot>> |Identifies suspicious access to an LSASS handle via PssCaptureSnapShot where two successive process accesses are performed by the same process and target two different instances of LSASS. This may indicate an attempt to evade detection and dump LSASS memory for credential access. |[Elastic] [Host] [Windows] [Threat Detection] [Credential Access]  |8.0.0 |3 <<potential-lsass-memory-dump-via-psscapturesnapshot-history, Version history>>

|<<potential-microsoft-office-sandbox-evasion, Potential Microsoft Office Sandbox Evasion>> |Identifies the creation of a suspicious zip file prepended with special characters. Sandboxed Microsoft Office applications on macOS are allowed to write files that start with special characters, which can be combined with an AutoStart location to achieve sandbox evasion. |[Elastic] [Host] [macOS] [Threat Detection] [Defense Evasion]  |7.12.0 |1

|<<potential-modification-of-accessibility-binaries, Potential Modification of Accessibility Binaries>> |Windows contains accessibility features that may be launched with a key combination before a user has logged in. An adversary can modify the way these programs are launched to get a command prompt or backdoor without logging in to the system. |[Elastic] [Host] [Windows] [Threat Detection] [Persistence]  |7.6.0 |8 <<potential-modification-of-accessibility-binaries-history, Version history>>

|<<potential-openssh-backdoor-logging-activity, Potential OpenSSH Backdoor Logging Activity>> |Identifies a Secure Shell (SSH) client or server process creating or writing to a known SSH backdoor log file. Adversaries may modify SSH related binaries for persistence or credential access via patching sensitive functions to enable unauthorized access or to log SSH credentials for exfiltration. |[Elastic] [Host] [Linux] [Threat Detection] [Persistence] [Credential Access]  |7.12.0 |2 <<potential-openssh-backdoor-logging-activity-history, Version history>>

|<<potential-password-spraying-of-microsoft-365-user-accounts, Potential Password Spraying of Microsoft 365 User Accounts>> |Identifies a high number (25) of failed Microsoft 365 user authentication attempts from a single IP address within 30 minutes, which could be indicative of a password spraying attack. An adversary may attempt a password spraying attack to obtain unauthorized access to user accounts. |[Elastic] [Cloud] [Microsoft 365] [Continuous Monitoring] [SecOps] [Identity and Access]  |7.11.0 |5 <<potential-password-spraying-of-microsoft-365-user-accounts-history, Version history>>

|<<potential-persistence-via-atom-init-script-modification, Potential Persistence via Atom Init Script Modification>> |Identifies modifications to the Atom desktop text editor Init File. Adversaries may add malicious JavaScript code to the init.coffee file that will be executed upon the Atom application opening. |[Elastic] [Host] [macOS] [Threat Detection] [Persistence]  |7.12.0 |1

|<<potential-persistence-via-login-hook, Potential Persistence via Login Hook>> |Identifies the creation or modification of the login window property list (plist). Adversaries may modify plist files to run a program during system boot or user login for persistence. |[Elastic] [Host] [macOS] [Threat Detection] [Persistence]  |7.12.0 |2 <<potential-persistence-via-login-hook-history, Version history>>

|<<potential-persistence-via-periodic-tasks, Potential Persistence via Periodic Tasks>> |Identifies the creation or modification of the default configuration for periodic tasks. Adversaries may abuse periodic tasks to execute malicious code or maintain persistence. |[Elastic] [Host] [macOS] [Threat Detection] [Persistence]  |7.12.0 |1

|<<potential-persistence-via-time-provider-modification, Potential Persistence via Time Provider Modification>> |Identifies modification of the Time Provider. Adversaries may establish persistence by registering and enabling a malicious DLL as a time provider. Windows uses the time provider architecture to obtain accurate time stamps from other network devices or clients in the network. Time providers are implemented in the form of a DLL file which resides in the System32 folder. The service W32Time initiates during the startup of Windows and loads w32time.dll. |[Elastic] [Host] [Windows] [Threat Detection] [Persistence]  |7.12.0 |3 <<potential-persistence-via-time-provider-modification-history, Version history>>

|<<potential-port-monitor-or-print-processor-registration-abuse, Potential Port Monitor or Print Processor Registration Abuse>> |Identifies port monitor and print processor registry modifications. Adversaries may abuse port monitor and print processors to run malicious DLLs during system boot that will be executed as SYSTEM for privilege escalation and/or persistence, if permissions allow writing a fully-qualified pathname for that DLL. |[Elastic] [Host] [Windows] [Threat Detection] [Privilege Escalation]  |7.12.0 |2 <<potential-port-monitor-or-print-processor-registration-abuse-history, Version history>>

|<<potential-privacy-control-bypass-via-localhost-secure-copy, Potential Privacy Control Bypass via Localhost Secure Copy>> |Identifies use of the Secure Copy Protocol (SCP) to copy files locally by abusing the auto addition of the Secure Shell Daemon (sshd) to the authorized application list for Full Disk Access. This may indicate attempts to bypass macOS privacy controls to access sensitive files. |[Elastic] [Host] [macOS] [Threat Detection] [Privilege Escalation] [Defense Evasion]  |7.12.0 |2 <<potential-privacy-control-bypass-via-localhost-secure-copy-history, Version history>>

|<<potential-privacy-control-bypass-via-tccdb-modification, Potential Privacy Control Bypass via TCCDB Modification>> |Identifies the use of sqlite3 to directly modify the Transparency, Consent, and Control (TCC) SQLite database. This may indicate an attempt to bypass macOS privacy controls, including access to sensitive resources like the system camera, microphone, address book, and calendar. |[Elastic] [Host] [macOS] [Threat Detection] [Defense Evasion]  |7.12.0 |3 <<potential-privacy-control-bypass-via-tccdb-modification-history, Version history>>

|<<potential-privilege-escalation-via-installerfiletakeover, Potential Privilege Escalation via InstallerFileTakeOver>> |Identifies a potential exploitation of InstallerTakeOver (CVE-2021-41379) default PoC execution. Successful exploitation allows an unprivileged user to escalate privileges to SYSTEM. |[Elastic] [Host] [Windows] [Threat Detection] [Privilege Escalation]  |8.0.0 |4 <<potential-privilege-escalation-via-installerfiletakeover-history, Version history>>

|<<potential-privilege-escalation-via-pkexec, Potential Privilege Escalation via PKEXEC>> |Identifies an attempt to exploit a local privilege escalation in polkit pkexec (CVE-2021-4034) via unsecure environment variable injection. Successful exploitation allows an unprivileged user to escalate to the root user. |[Elastic] [Host] [Linux] [Threat Detection] [Privilege Escalation]  |8.1.0 |2 <<potential-privilege-escalation-via-pkexec-history, Version history>>

|<<potential-privilege-escalation-via-sudoers-file-modification, Potential Privilege Escalation via Sudoers File Modification>> |A sudoers file specifies the commands users or groups can run and from which terminals. Adversaries can take advantage of these configurations to execute commands as other users or spawn processes with higher privileges. |[Elastic] [Host] [Linux] [macOS] [Threat Detection] [Privilege Escalation]  |7.12.0 |1

|<<potential-privileged-escalation-via-samaccountname-spoofing, Potential Privileged Escalation via SamAccountName Spoofing>> |Identifies a suspicious computer account name rename event, which may indicate an attempt to exploit CVE-2021-42278 to elevate privileges from a standard domain user to a user with domain admin privileges. CVE-2021-42278 is a security vulnerability that allows potential attackers to impersonate a domain controller via samAccountName attribute spoofing. |[Elastic] [Host] [Windows] [Threat Detection] [Persistence] [Privilege Escalation]  |8.1.0 |2 <<potential-privileged-escalation-via-samaccountname-spoofing-history, Version history>>

|<<potential-process-herpaderping-attempt, Potential Process Herpaderping Attempt>> |Identifies process execution followed by a file overwrite of an executable by the same parent process. This may indicate an evasion attempt to execute malicious code in a stealthy way. |[Elastic] [Host] [Windows] [Threat Detection] [Defense Evasion]  |7.11.0 |2 <<potential-process-herpaderping-attempt-history, Version history>>

|<<potential-process-injection-via-powershell, Potential Process Injection via PowerShell>> |Detects the use of Windows API functions that are commonly abused by malware and security tools to load malicious code or inject it into remote processes. |[Elastic] [Host] [Windows] [Threat Detection] [Defense Evasion]  |8.0.0 |4 <<potential-process-injection-via-powershell-history, Version history>>

|<<potential-protocol-tunneling-via-earthworm, Potential Protocol Tunneling via EarthWorm>> |Identifies the execution of the EarthWorm tunneler. Adversaries may tunnel network communications to and from a victim system within a separate protocol to avoid detection and network filtering, or to enable access to otherwise unreachable systems. |[Elastic] [Host] [Linux] [Threat Detection] [Command and Control]  |7.13.0 |2 <<potential-protocol-tunneling-via-earthworm-history, Version history>>

|<<potential-remote-credential-access-via-registry, Potential Remote Credential Access via Registry>> |Identifies remote access to the registry to potentially dump credential data from the SAM registry hive in preparation for credential access and privileges elevation. |[Elastic] [Host] [Windows] [Threat Detection] [Lateral Movement] [Credential Access]  |8.2.0 |1

|<<potential-remote-desktop-shadowing-activity, Potential Remote Desktop Shadowing Activity>> |Identifies the modification of the Remote Desktop Protocol (RDP) Shadow registry or the execution of processes indicative of an active RDP shadowing session. An adversary may abuse the RDP Shadowing feature to spy on or control other users active RDP sessions. |[Elastic] [Host] [Windows] [Threat Detection] [Lateral Movement]  |7.13.0 |2 <<potential-remote-desktop-shadowing-activity-history, Version history>>

|<<potential-remote-desktop-tunneling-detected, Potential Remote Desktop Tunneling Detected>> |Identifies potential use of an SSH utility to establish RDP over a reverse SSH Tunnel. This can be used by attackers to enable routing of network packets that would otherwise not reach their intended destination. |[Elastic] [Host] [Windows] [Threat Detection] [Command and Control]  |7.11.0 |5 <<potential-remote-desktop-tunneling-detected-history, Version history>>

|<<potential-reverse-shell-activity-via-terminal, Potential Reverse Shell Activity via Terminal>> |Identifies the execution of a shell process with suspicious arguments which may be indicative of reverse shell activity. |[Elastic] [Host] [Linux] [macOS] [Threat Detection] [Execution]  |7.12.0 |2 <<potential-reverse-shell-activity-via-terminal-history, Version history>>

|<<potential-ssh-brute-force-detected, Potential SSH Brute Force Detected>> |Identifies a high number (20) of macOS SSH KeyGen process executions from the same host. An adversary may attempt a brute force attack to obtain unauthorized access to user accounts. |[Elastic] [Host] [macOS] [Threat Detection] [Credential Access]  |7.11.0 |2 <<potential-ssh-brute-force-detected-history, Version history>>

|<<potential-secure-file-deletion-via-sdelete-utility, Potential Secure File Deletion via SDelete Utility>> |Detects file name patterns generated by the use of Sysinternals SDelete utility to securely delete a file via multiple file overwrite and rename operations. |[Elastic] [Host] [Windows] [Threat Detection] [Defense Evasion]  |7.10.0 |6 <<potential-secure-file-deletion-via-sdelete-utility-history, Version history>>

|<<potential-shadow-credentials-added-to-ad-object, Potential Shadow Credentials added to AD Object>> |Identify the modification of the msDS-KeyCredentialLink attribute in an Active Directory Computer or User Object. Attackers can abuse control over the object and create a key pair, append to raw public key in the attribute, and obtain persistent and stealthy access to the target user or computer object. |[Elastic] [Host] [Windows] [Threat Detection] [Credential Access] [Active Directory]  |8.1.0 |2 <<potential-shadow-credentials-added-to-ad-object-history, Version history>>

|<<potential-sharprdp-behavior, Potential SharpRDP Behavior>> |Identifies potential behavior of SharpRDP, which is a tool that can be used to perform authenticated command execution against a remote target via Remote Desktop Protocol (RDP) for the purposes of lateral movement. |[Elastic] [Host] [Windows] [Threat Detection] [Lateral Movement]  |7.11.0 |6 <<potential-sharprdp-behavior-history, Version history>>

|<<potential-shell-via-web-server, Potential Shell via Web Server>> |Identifies suspicious commands executed via a web server, which may suggest a vulnerability and remote shell access. |[Elastic] [Host] [Linux] [Threat Detection] [Persistence]  |7.6.0 |9 <<potential-shell-via-web-server-history, Version history>>

|<<potential-windows-error-manager-masquerading, Potential Windows Error Manager Masquerading>> |Identifies suspicious instances of the Windows Error Reporting process (WerFault.exe or Wermgr.exe) with matching command-line and process executable values performing outgoing network connections. This may be indicative of a masquerading attempt to evade suspicious child process behavior detections. |[Elastic] [Host] [Windows] [Threat Detection] [Defense Evasion]  |7.10.0 |4 <<potential-windows-error-manager-masquerading-history, Version history>>

|<<powershell-kerberos-ticket-request, PowerShell Kerberos Ticket Request>> |Detects PowerShell scripts that have the capability of requesting kerberos tickets, which is a common step in Kerberoasting toolkits to crack service accounts. |[Elastic] [Host] [Windows] [Threat Detection] [Credential Access]  |8.1.0 |2 <<powershell-kerberos-ticket-request-history, Version history>>

|<<powershell-keylogging-script, PowerShell Keylogging Script>> |Detects the use of Win32 API Functions that can be used to capture user keystrokes in PowerShell scripts. Attackers use this technique to capture user input, looking for credentials and/or other valuable data. |[Elastic] [Host] [Windows] [Threat Detection] [Collection]  |8.0.0 |4 <<powershell-keylogging-script-history, Version history>>

|<<powershell-minidump-script, PowerShell MiniDump Script>> |This rule detects PowerShell scripts capable of dumping process memory using WindowsErrorReporting or Dbghelp.dll MiniDumpWriteDump. Attackers can use this tooling to dump LSASS and get access to credentials. |[Elastic] [Host] [Windows] [Threat Detection] [Credential Access]  |7.16.0 |6 <<powershell-minidump-script-history, Version history>>

|<<powershell-psreflect-script, PowerShell PSReflect Script>> |Detects the use of PSReflect in PowerShell scripts. Attackers leverage PSReflect as a library that enables PowerShell to access win32 API functions. |[Elastic] [Host] [Windows] [Threat Detection] [Execution]  |8.0.0 |3 <<powershell-psreflect-script-history, Version history>>

|<<powershell-script-block-logging-disabled, PowerShell Script Block Logging Disabled>> |Identifies attempts to disable PowerShell Script Block Logging via registry modification. Attackers may disable this logging to conceal their activities in the host and evade detection. |[Elastic] [Host] [Windows] [Threat Detection] [Defense Evasion]  |8.1.0 |2 <<powershell-script-block-logging-disabled-history, Version history>>

|<<powershell-suspicious-discovery-related-windows-api-functions, PowerShell Suspicious Discovery Related Windows API Functions>> |This rule detects the use of discovery-related Windows API functions in PowerShell Scripts. Attackers can use these functions to perform various situational awareness related activities, like enumerating users, shares, sessions, domain trusts, groups, etc. |[Elastic] [Host] [Windows] [Threat Detection] [Discovery]  |7.16.0 |5 <<powershell-suspicious-discovery-related-windows-api-functions-history, Version history>>

|<<powershell-suspicious-payload-encoded-and-compressed, PowerShell Suspicious Payload Encoded and Compressed>> |Identifies the use of .NET functionality for decompression and base64 decoding combined in PowerShell scripts, which malware and security tools heavily use to deobfuscate payloads and load them directly in memory to bypass defenses. |[Elastic] [Host] [Windows] [Threat Detection] [Defense Evasion]  |8.0.0 |3 <<powershell-suspicious-payload-encoded-and-compressed-history, Version history>>

|<<powershell-suspicious-script-with-audio-capture-capabilities, PowerShell Suspicious Script with Audio Capture Capabilities>> |Detects PowerShell scripts that can record audio, a common feature in popular post-exploitation tooling. |[Elastic] [Host] [Windows] [Threat Detection] [Collection]  |7.16.0 |5 <<powershell-suspicious-script-with-audio-capture-capabilities-history, Version history>>

|<<powershell-suspicious-script-with-screenshot-capabilities, PowerShell Suspicious Script with Screenshot Capabilities>> |Detects PowerShell scripts that can take screenshots, which is a common feature in post-exploitation kits and remote access tools (RATs). |[Elastic] [Host] [Windows] [Threat Detection] [Collection]  |8.0.0 |3 <<powershell-suspicious-script-with-screenshot-capabilities-history, Version history>>

|<<privilege-escalation-via-named-pipe-impersonation, Privilege Escalation via Named Pipe Impersonation>> |Identifies a privilege escalation attempt via named pipe impersonation. An adversary may abuse this technique by utilizing a framework such Metasploit's meterpreter getsystem command. |[Elastic] [Host] [Windows] [Threat Detection] [Privilege Escalation]  |7.11.0 |4 <<privilege-escalation-via-named-pipe-impersonation-history, Version history>>

|<<privilege-escalation-via-rogue-named-pipe-impersonation, Privilege Escalation via Rogue Named Pipe Impersonation>> |Identifies a privilege escalation attempt via rogue named pipe impersonation. An adversary may abuse this technique by masquerading as a known named pipe and manipulating a privileged process to connect to it. |[Elastic] [Host] [Windows] [Threat Detection] [Privilege Escalation]  |8.0.0 |2 <<privilege-escalation-via-rogue-named-pipe-impersonation-history, Version history>>

|<<privilege-escalation-via-root-crontab-file-modification, Privilege Escalation via Root Crontab File Modification>> |Identifies modifications to the root crontab file. Adversaries may overwrite this file to gain code execution with root privileges by exploiting privileged file write or move related vulnerabilities. |[Elastic] [Host] [macOS] [Threat Detection] [Privilege Escalation]  |7.12.0 |1

|<<privilege-escalation-via-windir-environment-variable, Privilege Escalation via Windir Environment Variable>> |Identifies a privilege escalation attempt via a rogue Windows directory (Windir) environment variable. This is a known primitive that is often combined with other vulnerabilities to elevate privileges. |[Elastic] [Host] [Windows] [Threat Detection] [Privilege Escalation]  |7.11.0 |4 <<privilege-escalation-via-windir-environment-variable-history, Version history>>

|<<process-activity-via-compiled-html-file, Process Activity via Compiled HTML File>> |Compiled HTML files (.chm) are commonly distributed as part of the Microsoft HTML Help system. Adversaries may conceal malicious code in a CHM file and deliver it to a victim for execution. CHM content is loaded by the HTML Help executable program (hh.exe). |[Elastic] [Host] [Windows] [Threat Detection] [Execution]  |7.6.0 |11 <<process-activity-via-compiled-html-file-history, Version history>>

|<<process-execution-from-an-unusual-directory, Process Execution from an Unusual Directory>> |Identifies process execution from suspicious default Windows directories. This is sometimes done by adversaries to hide malware in trusted paths. |[Elastic] [Host] [Windows] [Threat Detection] [Execution]  |7.11.0 |4 <<process-execution-from-an-unusual-directory-history, Version history>>

|<<process-injection-detected-elastic-endgame, Process Injection - Detected - Elastic Endgame>> |Elastic Endgame detected Process Injection. Click the Elastic Endgame icon in the event.module column or the link in the rule.reference column for additional information. |[Elastic] [Elastic Endgame]  |7.6.0 |7 <<process-injection-detected-elastic-endgame-history, Version history>>

|<<process-injection-prevented-elastic-endgame, Process Injection - Prevented - Elastic Endgame>> |Elastic Endgame prevented Process Injection. Click the Elastic Endgame icon in the event.module column or the link in the rule.reference column for additional information. |[Elastic] [Elastic Endgame]  |7.6.0 |7 <<process-injection-prevented-elastic-endgame-history, Version history>>

|<<process-injection-by-the-microsoft-build-engine, Process Injection by the Microsoft Build Engine>> |An instance of MSBuild, the Microsoft Build Engine, created a thread in another process. This technique is sometimes used to evade detection or elevate privileges. |[Elastic] [Host] [Windows] [Threat Detection] [Defense Evasion]  |7.7.0 |5 <<process-injection-by-the-microsoft-build-engine-history, Version history>>

|<<process-termination-followed-by-deletion, Process Termination followed by Deletion>> |Identifies a process termination event quickly followed by the deletion of its executable file. Malware tools and other non-native files dropped or created on a system by an adversary may leave traces to indicate to what occurred. Removal of these files can occur during an intrusion, or as part of a post-intrusion process to minimize the adversary's footprint. |[Elastic] [Host] [Windows] [Threat Detection] [Defense Evasion]  |7.11.0 |3 <<process-termination-followed-by-deletion-history, Version history>>

|<<program-files-directory-masquerading, Program Files Directory Masquerading>> |Identifies execution from a directory masquerading as the Windows Program Files directories. These paths are trusted and usually host trusted third party programs. An adversary may leverage masquerading, along with low privileges to bypass detections allowlisting those folders. |[Elastic] [Host] [Windows] [Threat Detection] [Defense Evasion]  |7.11.0 |7 <<program-files-directory-masquerading-history, Version history>>

|<<prompt-for-credentials-with-osascript, Prompt for Credentials with OSASCRIPT>> |Identifies the use of osascript to execute scripts via standard input that may prompt a user with a rogue dialog for credentials. |[Elastic] [Host] [macOS] [Threat Detection] [Credential Access]  |7.11.0 |4 <<prompt-for-credentials-with-osascript-history, Version history>>

|<<psexec-network-connection, PsExec Network Connection>> |Identifies use of the SysInternals tool PsExec.exe making a network connection. This could be an indication of lateral movement. |[Elastic] [Host] [Windows] [Threat Detection] [Execution]  |7.6.0 |7 <<psexec-network-connection-history, Version history>>

|<<rdp-remote-desktop-protocol-from-the-internet, RDP (Remote Desktop Protocol) from the Internet>> |This rule detects network events that may indicate the use of RDP traffic from the Internet. RDP is commonly used by system administrators to remotely control a system for maintenance or to use shared resources. It should almost never be directly exposed to the Internet, as it is frequently targeted and exploited by threat actors as an initial access or backdoor vector. |[Elastic] [Host] [Network] [Threat Detection] [Command and Control] [Host]  |7.6.0 |12 <<rdp-remote-desktop-protocol-from-the-internet-history, Version history>>

|<<rdp-enabled-via-registry, RDP Enabled via Registry>> |Identifies registry write modifications to enable Remote Desktop Protocol (RDP) access. This could be indicative of adversary lateral movement preparation. |[Elastic] [Host] [Windows] [Threat Detection] [Lateral Movement]  |7.11.0 |6 <<rdp-enabled-via-registry-history, Version history>>

|<<rpc-remote-procedure-call-from-the-internet, RPC (Remote Procedure Call) from the Internet>> |This rule detects network events that may indicate the use of RPC traffic from the Internet. RPC is commonly used by system administrators to remotely control a system for maintenance or to use shared resources. It should almost never be directly exposed to the Internet, as it is frequently targeted and exploited by threat actors as an initial access or backdoor vector. |[Elastic] [Host] [Network] [Threat Detection] [Initial Access] [Host]  |7.6.0 |11 <<rpc-remote-procedure-call-from-the-internet-history, Version history>>

|<<rpc-remote-procedure-call-to-the-internet, RPC (Remote Procedure Call) to the Internet>> |This rule detects network events that may indicate the use of RPC traffic to the Internet. RPC is commonly used by system administrators to remotely control a system for maintenance or to use shared resources. It should almost never be directly exposed to the Internet, as it is frequently targeted and exploited by threat actors as an initial access or backdoor vector. |[Elastic] [Host] [Network] [Threat Detection] [Initial Access] [Host]  |7.6.0 |11 <<rpc-remote-procedure-call-to-the-internet-history, Version history>>

|<<ransomware-detected-elastic-endgame, Ransomware - Detected - Elastic Endgame>> |Elastic Endgame detected ransomware. Click the Elastic Endgame icon in the event.module column or the link in the rule.reference column for additional information. |[Elastic] [Elastic Endgame]  |7.6.0 |8 <<ransomware-detected-elastic-endgame-history, Version history>>

|<<ransomware-prevented-elastic-endgame, Ransomware - Prevented - Elastic Endgame>> |Elastic Endgame prevented ransomware. Click the Elastic Endgame icon in the event.module column or the link in the rule.reference column for additional information. |[Elastic] [Elastic Endgame]  |7.6.0 |8 <<ransomware-prevented-elastic-endgame-history, Version history>>

|<<rare-aws-error-code, Rare AWS Error Code>> |A machine learning job detected an unusual error in a CloudTrail message. These can be byproducts of attempted or successful persistence, privilege escalation, defense evasion, discovery, lateral movement, or collection. |[Elastic] [Cloud] [AWS] [ML]  |7.9.0 |7 <<rare-aws-error-code-history, Version history>>

|<<rare-user-logon, Rare User Logon>> |A machine learning job found an unusual user name in the authentication logs. An unusual user name is one way of detecting credentialed access by means of a new or dormant user account. An inactive user account (because the user has left the organization) that becomes active may be due to credentialed access using a compromised account password. Threat actors will sometimes also create new users as a means of persisting in a compromised web application. |[Elastic] [Authentication] [Threat Detection] [ML]  |7.14.0 |3 <<rare-user-logon-history, Version history>>

|<<registry-persistence-via-appcert-dll, Registry Persistence via AppCert DLL>> |Detects attempts to maintain persistence by creating registry keys using AppCert DLLs. AppCert DLLs are loaded by every process using the common API functions to create processes. |[Elastic] [Host] [Windows] [Threat Detection] [Persistence]  |7.11.0 |5 <<registry-persistence-via-appcert-dll-history, Version history>>

|<<registry-persistence-via-appinit-dll, Registry Persistence via AppInit DLL>> |Attackers may maintain persistence by creating registry keys using AppInit DLLs. AppInit DLLs are loaded by every process using the common library, user32.dll. |[Elastic] [Host] [Windows] [Threat Detection] [Persistence]  |7.11.0 |4 <<registry-persistence-via-appinit-dll-history, Version history>>

|<<remote-desktop-enabled-in-windows-firewall-by-netsh, Remote Desktop Enabled in Windows Firewall by Netsh>> |Identifies use of the network shell utility (netsh.exe) to enable inbound Remote Desktop Protocol (RDP) connections in the Windows Firewall. |[Elastic] [Host] [Windows] [Threat Detection] [Defense Evasion]  |7.11.0 |5 <<remote-desktop-enabled-in-windows-firewall-by-netsh-history, Version history>>

|<<remote-execution-via-file-shares, Remote Execution via File Shares>> |Identifies the execution of a file that was created by the virtual system process. This may indicate lateral movement via network file shares. |[Elastic] [Host] [Windows] [Threat Detection] [Lateral Movement]  |7.11.0 |2 <<remote-execution-via-file-shares-history, Version history>>

|<<remote-file-copy-to-a-hidden-share, Remote File Copy to a Hidden Share>> |Identifies a remote file copy attempt to a hidden network share. This may indicate lateral movement or data staging activity. |[Elastic] [Host] [Windows] [Threat Detection] [Lateral Movement]  |7.11.0 |4 <<remote-file-copy-to-a-hidden-share-history, Version history>>

|<<remote-file-copy-via-teamviewer, Remote File Copy via TeamViewer>> |Identifies an executable or script file remotely downloaded via a TeamViewer transfer session. |[Elastic] [Host] [Windows] [Threat Detection] [Command and Control]  |7.10.0 |6 <<remote-file-copy-via-teamviewer-history, Version history>>

|<<remote-file-download-via-desktopimgdownldr-utility, Remote File Download via Desktopimgdownldr Utility>> |Identifies the desktopimgdownldr utility being used to download a remote file. An adversary may use desktopimgdownldr to download arbitrary files as an alternative to certutil. |[Elastic] [Host] [Windows] [Threat Detection] [Command and Control]  |7.10.0 |6 <<remote-file-download-via-desktopimgdownldr-utility-history, Version history>>

|<<remote-file-download-via-mpcmdrun, Remote File Download via MpCmdRun>> |Identifies the Windows Defender configuration utility (MpCmdRun.exe) being used to download a remote file. |[Elastic] [Host] [Windows] [Threat Detection] [Command and Control]  |7.10.0 |6 <<remote-file-download-via-mpcmdrun-history, Version history>>

|<<remote-file-download-via-powershell, Remote File Download via PowerShell>> |Identifies powershell.exe being used to download an executable file from an untrusted remote destination. |[Elastic] [Host] [Windows] [Threat Detection] [Command and Control]  |7.11.0 |4 <<remote-file-download-via-powershell-history, Version history>>

|<<remote-file-download-via-script-interpreter, Remote File Download via Script Interpreter>> |Identifies built-in Windows script interpreters (cscript.exe or wscript.exe) being used to download an executable file from a remote destination. |[Elastic] [Host] [Windows] [Threat Detection] [Command and Control]  |7.11.0 |4 <<remote-file-download-via-script-interpreter-history, Version history>>

|<<remote-ssh-login-enabled-via-systemsetup-command, Remote SSH Login Enabled via systemsetup Command>> |Detects use of the systemsetup command to enable remote SSH Login. |[Elastic] [Host] [macOS] [Threat Detection] [Lateral Movement]  |7.10.0 |3 <<remote-ssh-login-enabled-via-systemsetup-command-history, Version history>>

|<<remote-scheduled-task-creation, Remote Scheduled Task Creation>> |Identifies remote scheduled task creations on a target host. This could be indicative of adversary lateral movement. |[Elastic] [Host] [Windows] [Threat Detection] [Lateral Movement]  |7.11.0 |8 <<remote-scheduled-task-creation-history, Version history>>

|<<remote-system-discovery-commands, Remote System Discovery Commands>> |Discovery of remote system information using built-in commands, which may be used to mover laterally. |[Elastic] [Host] [Windows] [Threat Detection] [Discovery]  |7.11.0 |4 <<remote-system-discovery-commands-history, Version history>>

|<<remotely-started-services-via-rpc, Remotely Started Services via RPC>> |Identifies remote execution of Windows services over remote procedure call (RPC). This could be indicative of lateral movement, but will be noisy if commonly done by administrators." |[Elastic] [Host] [Windows] [Threat Detection] [Lateral Movement]  |7.11.0 |4 <<remotely-started-services-via-rpc-history, Version history>>

|<<renamed-autoit-scripts-interpreter, Renamed AutoIt Scripts Interpreter>> |Identifies a suspicious AutoIt process execution. Malware written as an AutoIt script tends to rename the AutoIt executable to avoid detection. |[Elastic] [Host] [Windows] [Threat Detection] [Defense Evasion]  |7.10.0 |6 <<renamed-autoit-scripts-interpreter-history, Version history>>

|<<roshal-archive-rar-or-powershell-file-downloaded-from-the-internet, Roshal Archive (RAR) or PowerShell File Downloaded from the Internet>> |Detects a Roshal Archive (RAR) file or PowerShell script downloaded from the internet by an internal host. Gaining initial access to a system and then downloading encoded or encrypted tools to move laterally is a common practice for adversaries as a way to protect their more valuable tools and tactics, techniques, and procedures (TTPs). This may be atypical behavior for a managed network and can be indicative of malware, exfiltration, or command and control. |[Elastic] [Network] [Threat Detection] [Command and Control] [Host]  |7.10.0 |9 <<roshal-archive-rar-or-powershell-file-downloaded-from-the-internet-history, Version history>>

|<<sip-provider-modification, SIP Provider Modification>> |Identifies modifications to the registered Subject Interface Package (SIP) providers. SIP providers are used by the Windows cryptographic system to validate file signatures on the system. This may be an attempt to bypass signature validation checks or inject code into critical processes. |[Elastic] [Host] [Windows] [Threat Detection] [Defense Evasion]  |7.12.0 |2 <<sip-provider-modification-history, Version history>>

|<<smb-windows-file-sharing-activity-to-the-internet, SMB (Windows File Sharing) Activity to the Internet>> |This rule detects network events that may indicate the use of Windows file sharing (also called SMB or CIFS) traffic to the Internet. SMB is commonly used within networks to share files, printers, and other system resources amongst trusted systems. It should almost never be directly exposed to the Internet, as it is frequently targeted and exploited by threat actors as an initial access or backdoor vector or for data exfiltration. |[Elastic] [Host] [Network] [Threat Detection] [Initial Access] [Host]  |7.6.0 |11 <<smb-windows-file-sharing-activity-to-the-internet-history, Version history>>

|<<smtp-on-port-26-tcp, SMTP on Port 26/TCP>> |This rule detects events that may indicate use of SMTP on TCP port 26. This port is commonly used by several popular mail transfer agents to deconflict with the default SMTP port 25. This port has also been used by a malware family called BadPatch for command and control of Windows systems. |[Elastic] [Host] [Network] [Threat Detection] [Command and Control] [Host]  |7.6.0 |8 <<smtp-on-port-26-tcp-history, Version history>>

|<<ssh-authorized-keys-file-modification, SSH Authorized Keys File Modification>> |The Secure Shell (SSH) authorized_keys file specifies which users are allowed to log into a server using public key authentication. Adversaries may modify it to maintain persistence on a victim host by adding their own public key(s). |[Elastic] [Host] [Linux] [macOS] [Threat Detection] [Persistence]  |7.12.0 |1

|<<sunburst-command-and-control-activity, SUNBURST Command and Control Activity>> |The malware known as SUNBURST targets the SolarWind's Orion business software for command and control. This rule detects post-exploitation command and control activity of the SUNBURST backdoor. |[Elastic] [Host] [Windows] [Threat Detection] [Command and Control]  |7.11.0 |5 <<sunburst-command-and-control-activity-history, Version history>>

|<<scheduled-task-created-by-a-windows-script, Scheduled Task Created by a Windows Script>> |A scheduled task was created by a Windows script via cscript.exe, wscript.exe or powershell.exe. This can be abused by an adversary to establish persistence. |[Elastic] [Host] [Windows] [Threat Detection] [Persistence]  |7.11.0 |5 <<scheduled-task-created-by-a-windows-script-history, Version history>>

|<<scheduled-task-execution-at-scale-via-gpo, Scheduled Task Execution at Scale via GPO>> |Detects the modification of Group Policy Object attributes to execute a scheduled task in the objects controlled by the GPO. |[Elastic] [Host] [Windows] [Threat Detection] [Privilege Escalation] [Active Directory]  |8.0.0 |3 <<scheduled-task-execution-at-scale-via-gpo-history, Version history>>

|<<scheduled-tasks-at-command-enabled, Scheduled Tasks AT Command Enabled>> |Identifies attempts to enable the Windows scheduled tasks AT command via the registry. Attackers may use this method to move laterally or persist locally. The AT command has been deprecated since Windows 8 and Windows Server 2012, but still exists for backwards compatibility. |[Elastic] [Host] [Windows] [Threat Detection] [Defense Evasion]  |7.11.0 |5 <<scheduled-tasks-at-command-enabled-history, Version history>>

|<<screensaver-plist-file-modified-by-unexpected-process, Screensaver Plist File Modified by Unexpected Process>> |Identifies when a screensaver plist file is modified by an unexpected process. An adversary can maintain persistence on a macOS endpoint by creating a malicious screensaver (.saver) file and configuring the screensaver plist file to execute code each time the screensaver is activated. |[Elastic] [Host] [macOS] [Threat Detection] [Persistence]  |7.16.0 |2 <<screensaver-plist-file-modified-by-unexpected-process-history, Version history>>

|<<searching-for-saved-credentials-via-vaultcmd, Searching for Saved Credentials via VaultCmd>> |Windows Credential Manager allows you to create, view, or delete saved credentials for signing into websites, connected applications, and networks. An adversary may abuse this to list or dump credentials stored in the Credential Manager for saved usernames and passwords. This may also be performed in preparation of lateral movement. |[Elastic] [Host] [Windows] [Threat Detection] [Credential Access]  |7.12.0 |3 <<searching-for-saved-credentials-via-vaultcmd-history, Version history>>

|<<security-software-discovery-using-wmic, Security Software Discovery using WMIC>> |Identifies the use of Windows Management Instrumentation Command (WMIC) to discover certain System Security Settings such as AntiVirus or Host Firewall details. |[Elastic] [Host] [Windows] [Threat Detection] [Discovery]  |7.11.0 |5 <<security-software-discovery-using-wmic-history, Version history>>

|<<security-software-discovery-via-grep, Security Software Discovery via Grep>> |Identifies the use of the grep command to discover known third-party macOS and Linux security tools, such as Antivirus or Host Firewall details. |[Elastic] [Host] [macOS] [Linux] [Threat Detection] [Discovery]  |7.12.0 |3 <<security-software-discovery-via-grep-history, Version history>>

|<<sensitive-files-compression, Sensitive Files Compression>> |Identifies the use of a compression utility to collect known files containing sensitive information, such as credentials and system configurations. |[Elastic] [Host] [Linux] [Threat Detection] [Collection] [Credential Access]  |7.12.0 |1

|<<sensitive-privilege-seenabledelegationprivilege-assigned-to-a-user, Sensitive Privilege SeEnableDelegationPrivilege assigned to a User>> |Identifies the assignment of the SeEnableDelegationPrivilege sensitive "user right" to a user. The SeEnableDelegationPrivilege "user right" enables computer and user accounts to be trusted for delegation. Attackers can abuse this right to compromise Active Directory accounts and elevate their privileges. |[Elastic] [Host] [Windows] [Threat Detection] [Credential Access] [Active Directory]  |8.1.0 |2 <<sensitive-privilege-seenabledelegationprivilege-assigned-to-a-user-history, Version history>>

|<<service-command-lateral-movement, Service Command Lateral Movement>> |Identifies use of sc.exe to create, modify, or start services on remote hosts. This could be indicative of adversary lateral movement but will be noisy if commonly done by admins. |[Elastic] [Host] [Windows] [Threat Detection] [Lateral Movement]  |7.10.0 |3 <<service-command-lateral-movement-history, Version history>>

|<<service-control-spawned-via-script-interpreter, Service Control Spawned via Script Interpreter>> |Identifies Service Control (sc.exe) spawning from script interpreter processes to create, modify, or start services. This could be indicative of adversary lateral movement but will be noisy if commonly done by admins. |[Elastic] [Host] [Windows] [Threat Detection] [Lateral Movement]  |7.6.0 |11 <<service-control-spawned-via-script-interpreter-history, Version history>>

|<<setuid-setgid-bit-set-via-chmod, Setuid / Setgid Bit Set via chmod>> |An adversary may add the setuid or setgid bit to a file or directory in order to run a file with the privileges of the owning user or group. An adversary can take advantage of this to either do a shell escape or exploit a vulnerability in an application with the setuid or setgid bit to get code running in a different user’s context. Additionally, adversaries can use this mechanism on their own malware to make sure they're able to execute in elevated contexts in the future. |[Elastic] [Host] [Linux] [macOS] [Threat Detection] [Privilege Escalation]  |7.8.0 |8 <<setuid-setgid-bit-set-via-chmod-history, Version history>>

|<<sharepoint-malware-file-upload, SharePoint Malware File Upload>> |Identifies the occurence of files uploaded to SharePoint being detected as Malware by the file scanning engine. Attackers can use File Sharing and Organization Repositories to spread laterally within the company and amplify their access. Users can inadvertently share these files without knowing their maliciousness, giving adversaries opportunities to gain initial access to other endpoints in the environment. |[Elastic] [Cloud] [Microsoft 365] [Continuous Monitoring] [SecOps] [Lateral Movement]  |8.1.0 |2 <<sharepoint-malware-file-upload-history, Version history>>

|<<shell-execution-via-apple-scripting, Shell Execution via Apple Scripting>> |Identifies the execution of the shell process (sh) via scripting (JXA or AppleScript). Adversaries may use the doShellScript functionality in JXA or do shell script in AppleScript to execute system commands. |[Elastic] [Host] [macOS] [Threat Detection] [Execution]  |7.11.0 |3 <<shell-execution-via-apple-scripting-history, Version history>>

|<<signed-proxy-execution-via-ms-workfolders, Signed Proxy Execution via MS WorkFolders>> |Identifies the use of Windows Work Folders to execute a potentially masqueraded control.exe file in the current working directory. Misuse of Windows Work Folders could indicate malicious activity. |[Elastic] [Host] [Windows] [Threat Detection] [Defense Evasion]  |8.2.0 |1

|<<softwareupdate-preferences-modification, SoftwareUpdate Preferences Modification>> |Identifies changes to the SoftwareUpdate preferences using the built-in defaults command. Adversaries may abuse this in an attempt to disable security updates. |[Elastic] [Host] [macOS] [Threat Detection] [Defense Evasion]  |7.12.0 |1

|<<solarwinds-process-disabling-services-via-registry, SolarWinds Process Disabling Services via Registry>> |Identifies a SolarWinds binary modifying the start type of a service to be disabled. An adversary may abuse this technique to manipulate relevant security services. |[Elastic] [Host] [Windows] [Threat Detection] [Defense Evasion]  |7.11.0 |5 <<solarwinds-process-disabling-services-via-registry-history, Version history>>

|<<spike-in-aws-error-messages, Spike in AWS Error Messages>> |A machine learning job detected a significant spike in the rate of a particular error in the CloudTrail messages. Spikes in error messages may accompany attempts at privilege escalation, lateral movement, or discovery. |[Elastic] [Cloud] [AWS] [ML]  |7.9.0 |9 <<spike-in-aws-error-messages-history, Version history>>

|<<spike-in-failed-logon-events, Spike in Failed Logon Events>> |A machine learning job found an unusually large spike in authentication failure events. This can be due to password spraying, user enumeration or brute force activity and may be a precursor to account takeover or credentialed access. |[Elastic] [Authentication] [Threat Detection] [ML]  |7.14.0 |2 <<spike-in-failed-logon-events-history, Version history>>

|<<spike-in-firewall-denies, Spike in Firewall Denies>> |A machine learning job detected an unusually large spike in network traffic that was denied by network access control lists (ACLs) or firewall rules. Such a burst of denied traffic is usually caused by either 1) a mis-configured application or firewall or 2) suspicious or malicious activity. Unsuccessful attempts at network transit, in order to connect to command-and-control (C2), or engage in data exfiltration, may produce a burst of failed connections. This could also be due to unusually large amounts of reconnaissance or enumeration traffic. Denial-of-service attacks or traffic floods may also produce such a surge in traffic. |[Elastic] [Network] [Threat Detection] [ML]  |7.13.0 |2 <<spike-in-firewall-denies-history, Version history>>

|<<spike-in-logon-events, Spike in Logon Events>> |A machine learning job found an unusually large spike in successful authentication events. This can be due to password spraying, user enumeration or brute force activity. |[Elastic] [Authentication] [Threat Detection] [ML]  |7.14.0 |1

|<<spike-in-logon-events-from-a-source-ip, Spike in Logon Events from a Source IP>> |A machine learning job found an unusually large spike in successful authentication events from a particular source IP address. This can be due to password spraying, user enumeration or brute force activity. |[Elastic] [Authentication] [Threat Detection] [ML]  |7.14.0 |2 <<spike-in-logon-events-from-a-source-ip-history, Version history>>

|<<spike-in-network-traffic, Spike in Network Traffic>> |A machine learning job detected an unusually large spike in network traffic. Such a burst of traffic, if not caused by a surge in business activity, can be due to suspicious or malicious activity. Large-scale data exfiltration may produce a burst of network traffic; this could also be due to unusually large amounts of reconnaissance or enumeration traffic. Denial-of-service attacks or traffic floods may also produce such a surge in traffic. |[Elastic] [Network] [Threat Detection] [ML]  |7.13.0 |3 <<spike-in-network-traffic-history, Version history>>

|<<spike-in-network-traffic-to-a-country, Spike in Network Traffic To a Country>> |A machine learning job detected an unusually large spike in network activity to one destination country in the network logs. This could be due to unusually large amounts of reconnaissance or enumeration traffic. Data exfiltration activity may also produce such a surge in traffic to a destination country which does not normally appear in network traffic or business work-flows. Malware instances and persistence mechanisms may communicate with command-and-control (C2) infrastructure in their country of origin, which may be an unusual destination country for the source network. |[Elastic] [Network] [Threat Detection] [ML]  |7.13.0 |2 <<spike-in-network-traffic-to-a-country-history, Version history>>

|<<startup-folder-persistence-via-unsigned-process, Startup Folder Persistence via Unsigned Process>> |Identifies files written or modified in the startup folder by unsigned processes. Adversaries may abuse this technique to maintain persistence in an environment. |[Elastic] [Host] [Windows] [Threat Detection] [Persistence]  |7.11.0 |3 <<startup-folder-persistence-via-unsigned-process-history, Version history>>

|<<startup-persistence-by-a-suspicious-process, Startup Persistence by a Suspicious Process>> |Identifies files written to or modified in the startup folder by commonly abused processes. Adversaries may use this technique to maintain persistence. |[Elastic] [Host] [Windows] [Threat Detection] [Persistence]  |7.11.0 |4 <<startup-persistence-by-a-suspicious-process-history, Version history>>

|<<startup-or-run-key-registry-modification, Startup or Run Key Registry Modification>> |Identifies run key or startup key registry modifications. In order to survive reboots and other system interrupts, attackers will modify run keys within the registry or leverage startup folder items as a form of persistence. |[Elastic] [Host] [Windows] [Threat Detection] [Persistence]  |7.11.0 |6 <<startup-or-run-key-registry-modification-history, Version history>>

|<<startup-logon-script-added-to-group-policy-object, Startup/Logon Script added to Group Policy Object>> |Detects the modification of Group Policy Objects (GPO) to add a startup/logon script to users or computer objects. |[Elastic] [Host] [Windows] [Threat Detection] [Privilege Escalation] [Active Directory]  |8.0.0 |3 <<startup-logon-script-added-to-group-policy-object-history, Version history>>

|<<strace-process-activity, Strace Process Activity>> |Strace runs in a privileged context and can be used to escape restrictive environments by instantiating a shell in order to elevate privileges or move laterally. |[Elastic] [Host] [Linux] [Threat Detection]  |7.6.0 |7 <<strace-process-activity-history, Version history>>

|<<sublime-plugin-or-application-script-modification, Sublime Plugin or Application Script Modification>> |Adversaries may create or modify the Sublime application plugins or scripts to execute a malicious payload each time the Sublime application is started. |[Elastic] [Host] [macOS] [Threat Detection] [Persistence]  |7.12.0 |2 <<sublime-plugin-or-application-script-modification-history, Version history>>

|<<sudo-heap-based-buffer-overflow-attempt, Sudo Heap-Based Buffer Overflow Attempt>> |Identifies the attempted use of a heap-based buffer overflow vulnerability for the Sudo binary in Unix-like systems (CVE-2021-3156). Successful exploitation allows an unprivileged user to escalate to the root user. |[Elastic] [Host] [Linux] [macOS] [Threat Detection] [Privilege Escalation]  |7.12.0 |1

|<<sudoers-file-modification, Sudoers File Modification>> |A sudoers file specifies the commands that users or groups can run and from which terminals. Adversaries can take advantage of these configurations to execute commands as other users or spawn processes with higher privileges. |[Elastic] [Host] [Linux] [macOS] [Threat Detection] [Privilege Escalation]  |7.8.0 |7 <<sudoers-file-modification-history, Version history>>

|<<suspicious-.net-code-compilation, Suspicious .NET Code Compilation>> |Identifies suspicious .NET code execution. connections. |[Elastic] [Host] [Windows] [Threat Detection] [Defense Evasion]  |7.10.0 |6 <<suspicious-.net-code-compilation-history, Version history>>

|<<suspicious-.net-reflection-via-powershell, Suspicious .NET Reflection via PowerShell>> |Detects the use of Reflection.Assembly to load PEs and DLLs in memory in PowerShell scripts. Attackers use this method to load executables and DLLs without writing to the disk, bypassing security solutions. |[Elastic] [Host] [Windows] [Threat Detection] [Defense Evasion]  |8.0.0 |2 <<suspicious-.net-reflection-via-powershell-history, Version history>>

|<<suspicious-activity-reported-by-okta-user, Suspicious Activity Reported by Okta User>> |Detects when a user reports suspicious activity for their Okta account. These events should be investigated, as they can help security teams identify when an adversary is attempting to gain access to their network. |[Elastic] [Identity] [Okta] [Continuous Monitoring] [SecOps] [Monitoring]  |7.9.0 |6 <<suspicious-activity-reported-by-okta-user-history, Version history>>

|<<suspicious-automator-workflows-execution, Suspicious Automator Workflows Execution>> |Identifies the execution of the Automator Workflows process followed by a network connection from it's XPC service. Adversaries may drop a custom workflow template that hosts malicious JavaScript for Automation (JXA) code as an alternative to using osascript. |[Elastic] [Host] [macOS] [Threat Detection] [Execution]  |7.12.0 |1

|<<suspicious-browser-child-process, Suspicious Browser Child Process>> |Identifies the execution of a suspicious browser child process. Adversaries may gain access to a system through a user visiting a website over the normal course of browsing. With this technique, the user's web browser is typically targeted for exploitation. |[Elastic] [Host] [macOS] [Threat Detection] [Initial Access] [Execution]  |7.12.0 |1

|<<suspicious-calendar-file-modification, Suspicious Calendar File Modification>> |Identifies suspicious modifications of the calendar file by an unusual process. Adversaries may create a custom calendar notification procedure to execute a malicious program at a recurring interval to establish persistence. |[Elastic] [Host] [macOS] [Threat Detection] [Persistence]  |7.12.0 |1

|<<suspicious-certutil-commands, Suspicious CertUtil Commands>> |Identifies suspicious commands being used with certutil.exe. CertUtil is a native Windows component which is part of Certificate Services. CertUtil is often abused by attackers to live off the land for stealthier command and control or data exfiltration. |[Elastic] [Host] [Windows] [Threat Detection] [Defense Evasion]  |7.6.0 |12 <<suspicious-certutil-commands-history, Version history>>

|<<suspicious-child-process-of-adobe-acrobat-reader-update-service, Suspicious Child Process of Adobe Acrobat Reader Update Service>> |Detects attempts to exploit privilege escalation vulnerabilities related to the Adobe Acrobat Reader PrivilegedHelperTool responsible for installing updates. For more information, refer to CVE-2020-9615, CVE-2020-9614 and CVE-2020-9613 and verify that the impacted system is patched. |[Elastic] [Host] [macOS] [Threat Detection] [Privilege Escalation]  |7.12.0 |1

|<<suspicious-cmd-execution-via-wmi, Suspicious Cmd Execution via WMI>> |Identifies suspicious command execution (cmd) via Windows Management Instrumentation (WMI) on a remote host. This could be indicative of adversary lateral movement. |[Elastic] [Host] [Windows] [Threat Detection] [Execution]  |7.11.0 |4 <<suspicious-cmd-execution-via-wmi-history, Version history>>

|<<suspicious-dll-loaded-for-persistence-or-privilege-escalation, Suspicious DLL Loaded for Persistence or Privilege Escalation>> |Identifies the loading of a non Microsoft signed DLL that is missing on a default Windows install (phantom DLL) or one that can be loaded from a different location by a native Windows process. This may be abused to persist or elevate privileges via privileged file write vulnerabilities. |[Elastic] [Host] [Windows] [Threat Detection] [Persistence] [Privilege Escalation]  |7.12.0 |3 <<suspicious-dll-loaded-for-persistence-or-privilege-escalation-history, Version history>>

|<<suspicious-emond-child-process, Suspicious Emond Child Process>> |Identifies the execution of a suspicious child process of the Event Monitor Daemon (emond). Adversaries may abuse this service by writing a rule to execute commands when a defined event occurs, such as system start up or user authentication. |[Elastic] [Host] [macOS] [Threat Detection] [Persistence]  |7.12.0 |1

|<<suspicious-endpoint-security-parent-process, Suspicious Endpoint Security Parent Process>> |A suspicious Endpoint Security parent process was detected. This may indicate a process hollowing or other form of code injection. |[Elastic] [Host] [Windows] [Threat Detection] [Defense Evasion]  |7.10.0 |5 <<suspicious-endpoint-security-parent-process-history, Version history>>

|<<suspicious-execution-short-program-name, Suspicious Execution - Short Program Name>> |Identifies process execution with a single character process name. This is often done by adversaries while staging or executing temporary utilities. |[Elastic] [Host] [Windows] [Threat Detection] [Execution]  |7.11.0 |4 <<suspicious-execution-short-program-name-history, Version history>>

|<<suspicious-execution-from-a-mounted-device, Suspicious Execution from a Mounted Device>> |Identifies when a script interpreter or signed binary is launched via a non-standard working directory. An attacker may use this technique to evade defenses. |[Elastic] [Host] [Windows] [Threat Detection] [Defense Evasion]  |7.14.0 |2 <<suspicious-execution-from-a-mounted-device-history, Version history>>

|<<suspicious-execution-via-scheduled-task, Suspicious Execution via Scheduled Task>> |Identifies execution of a suspicious program via scheduled tasks by looking at process lineage and command line usage. |[Elastic] [Host] [Windows] [Threat Detection] [Persistence]  |7.11.0 |5 <<suspicious-execution-via-scheduled-task-history, Version history>>

|<<suspicious-explorer-child-process, Suspicious Explorer Child Process>> |Identifies a suspicious Windows explorer child process. Explorer.exe can be abused to launch malicious scripts or executables from a trusted parent process. |[Elastic] [Host] [Windows] [Threat Detection] [Initial Access]  |7.11.0 |5 <<suspicious-explorer-child-process-history, Version history>>

|<<suspicious-hidden-child-process-of-launchd, Suspicious Hidden Child Process of Launchd>> |Identifies the execution of a launchd child process with a hidden file. An adversary can establish persistence by installing a new logon item, launch agent, or daemon that executes upon login. |[Elastic] [Host] [macOS] [Threat Detection] [Persistence] [Defense Evasion]  |7.12.0 |1

|<<suspicious-image-load-taskschd.dll-from-ms-office, Suspicious Image Load (taskschd.dll) from MS Office>> |Identifies a suspicious image load (taskschd.dll) from Microsoft Office processes. This behavior may indicate adversarial activity where a scheduled task is configured via Windows Component Object Model (COM). This technique can be used to configure persistence and evade monitoring by avoiding the usage of the traditional Windows binary (schtasks.exe) used to manage scheduled tasks. |[Elastic] [Host] [Windows] [Threat Detection] [Persistence]  |7.11.0 |4 <<suspicious-image-load-taskschd.dll-from-ms-office-history, Version history>>

|<<suspicious-imagepath-service-creation, Suspicious ImagePath Service Creation>> |Identifies the creation of a suspicious ImagePath value. This could be an indication of an adversary attempting to stealthily persist or escalate privileges through abnormal service creation. |[Elastic] [Host] [Windows] [Threat Detection] [Persistence]  |7.11.0 |4 <<suspicious-imagepath-service-creation-history, Version history>>

|<<suspicious-java-child-process, Suspicious JAVA Child Process>> |Identifies suspicious child processes of the Java interpreter process. This may indicate an attempt to execute a malicious JAR file or an exploitation attempt via a JAVA specific vulnerability. |[Elastic] [Host] [Linux] [macOS] [Threat Detection] [Execution]  |7.12.0 |4 <<suspicious-java-child-process-history, Version history>>

|<<suspicious-ms-office-child-process, Suspicious MS Office Child Process>> |Identifies suspicious child processes of frequently targeted Microsoft Office applications (Word, PowerPoint, Excel). These child processes are often launched during exploitation of Office applications or from documents with malicious macros. |[Elastic] [Host] [Windows] [Threat Detection] [Initial Access]  |7.6.0 |10 <<suspicious-ms-office-child-process-history, Version history>>

|<<suspicious-ms-outlook-child-process, Suspicious MS Outlook Child Process>> |Identifies suspicious child processes of Microsoft Outlook. These child processes are often associated with spear phishing activity. |[Elastic] [Host] [Windows] [Threat Detection] [Initial Access]  |7.6.0 |10 <<suspicious-ms-outlook-child-process-history, Version history>>

|<<suspicious-managed-code-hosting-process, Suspicious Managed Code Hosting Process>> |Identifies a suspicious managed code hosting process which could indicate code injection or other form of suspicious code execution. |[Elastic] [Host] [Windows] [Threat Detection] [Defense Evasion]  |7.10.0 |5 <<suspicious-managed-code-hosting-process-history, Version history>>

|<<suspicious-pdf-reader-child-process, Suspicious PDF Reader Child Process>> |Identifies suspicious child processes of PDF reader applications. These child processes are often launched via exploitation of PDF applications or social engineering. |[Elastic] [Host] [Windows] [Threat Detection] [Execution]  |7.7.0 |8 <<suspicious-pdf-reader-child-process-history, Version history>>

|<<suspicious-portable-executable-encoded-in-powershell-script, Suspicious Portable Executable Encoded in Powershell Script>> |Detects the presence of a portable executable (PE) in a PowerShell script by looking for its encoded header. Attackers embed PEs into PowerShell scripts to inject them into memory, avoiding defences by not writing to disk. |[Elastic] [Host] [Windows] [Threat Detection] [Execution]  |7.16.0 |5 <<suspicious-portable-executable-encoded-in-powershell-script-history, Version history>>

|<<suspicious-powershell-engine-imageload, Suspicious PowerShell Engine ImageLoad>> |Identifies the PowerShell engine being invoked by unexpected processes. Rather than executing PowerShell functionality with powershell.exe, some attackers do this to operate more stealthily. |[Elastic] [Host] [Windows] [Threat Detection] [Execution]  |7.11.0 |5 <<suspicious-powershell-engine-imageload-history, Version history>>

|<<suspicious-powershell-script, Suspicious Powershell Script>> |A machine learning job detected a PowerShell script with unusual data characteristics, such as obfuscation, that may be a characteristic of malicious PowerShell script text blocks. |[Elastic] [Host] [Windows] [Threat Detection] [ML]  |7.7.0 |4 <<suspicious-powershell-script-history, Version history>>

|<<suspicious-print-spooler-file-deletion, Suspicious Print Spooler File Deletion>> |Detects deletion of print driver files by an unusual process. This may indicate a clean up attempt post successful privilege escalation via Print Spooler service related vulnerabilities. |[Elastic] [Host] [Windows] [Threat Detection] [Privilege Escalation]  |7.14.0 |2 <<suspicious-print-spooler-file-deletion-history, Version history>>

|<<suspicious-print-spooler-point-and-print-dll, Suspicious Print Spooler Point and Print DLL>> |Detects attempts to exploit a privilege escalation vulnerability (CVE-2020-1030) related to the print spooler service. Exploitation involves chaining multiple primitives to load an arbitrary DLL into the print spooler process running as SYSTEM. |[Elastic] [Host] [Windows] [Threat Detection] [Privilege Escalation]  |7.11.0 |3 <<suspicious-print-spooler-point-and-print-dll-history, Version history>>

|<<suspicious-printspooler-spl-file-created, Suspicious PrintSpooler SPL File Created>> |Detects attempts to exploit privilege escalation vulnerabilities related to the Print Spooler service including CVE-2020-1048 and CVE-2020-1337. . |[Elastic] [Host] [Windows] [Threat Detection] [Privilege Escalation]  |7.10.0 |5 <<suspicious-printspooler-spl-file-created-history, Version history>>

|<<suspicious-printspooler-service-executable-file-creation, Suspicious PrintSpooler Service Executable File Creation>> |Detects attempts to exploit privilege escalation vulnerabilities related to the Print Spooler service. For more information refer to the following CVE's - CVE-2020-1048, CVE-2020-1337 and CVE-2020-1300 and verify that the impacted system is patched. |[Elastic] [Host] [Windows] [Threat Detection] [Privilege Escalation]  |7.10.0 |5 <<suspicious-printspooler-service-executable-file-creation-history, Version history>>

|<<suspicious-process-access-via-direct-system-call, Suspicious Process Access via Direct System Call>> |Identifies suspicious process access events from an unknown memory region. Endpoint security solutions usually hook userland Windows APIs in order to decide if the code that is being executed is malicious or not. It's possible to bypass hooked functions by writing malicious functions that call syscalls directly. |[Elastic] [Host] [Windows] [Threat Detection] [Defense Evasion]  |7.16.0 |3 <<suspicious-process-access-via-direct-system-call-history, Version history>>

|<<suspicious-process-creation-calltrace, Suspicious Process Creation CallTrace>> |Identifies when a process is created and immediately accessed from an unknown memory code region and by the same parent process. This may indicate a code injection or hollowing attempt. |[Elastic] [Host] [Windows] [Threat Detection] [Defense Evasion]  |8.0.0 |2 <<suspicious-process-creation-calltrace-history, Version history>>

|<<suspicious-process-execution-via-renamed-psexec-executable, Suspicious Process Execution via Renamed PsExec Executable>> |Identifies suspicious psexec activity which is executing from the psexec service that has been renamed, possibly to evade detection. |[Elastic] [Host] [Windows] [Threat Detection] [Execution]  |7.10.0 |5 <<suspicious-process-execution-via-renamed-psexec-executable-history, Version history>>

|<<suspicious-process-from-conhost, Suspicious Process from Conhost>> |Identifies a suspicious Conhost child process which may be an indication of code injection activity. |[Elastic] [Host] [Windows] [Threat Detection] [Defense Evasion]  |7.10.0 |5 <<suspicious-process-from-conhost-history, Version history>>

|<<suspicious-rdp-activex-client-loaded, Suspicious RDP ActiveX Client Loaded>> |Identifies suspicious Image Loading of the Remote Desktop Services ActiveX Client (mstscax), this may indicate the presence of RDP lateral movement capability. |[Elastic] [Host] [Windows] [Threat Detection] [Lateral Movement]  |7.11.0 |4 <<suspicious-rdp-activex-client-loaded-history, Version history>>

|<<suspicious-remote-registry-access-via-sebackupprivilege, Suspicious Remote Registry Access via SeBackupPrivilege>> |Identifies remote access to the registry via an account with Backup Operators group membership. This may indicate an attempt to exfiltrate credentials via dumping the SAM registry hive in preparation for credential access and privileges elevation. |[Elastic] [Host] [Windows] [Threat Detection] [Lateral Movement] [Credential Access]  |8.2.0 |1

|<<suspicious-script-object-execution, Suspicious Script Object Execution>> |Identifies scrobj.dll loaded into unusual Microsoft processes. This usually means a malicious scriptlet is being executed in the target process. |[Elastic] [Host] [Windows] [Threat Detection] [Defense Evasion]  |7.10.0 |4 <<suspicious-script-object-execution-history, Version history>>

|<<suspicious-solarwinds-child-process, Suspicious SolarWinds Child Process>> |A suspicious SolarWinds child process was detected, which may indicate an attempt to execute malicious programs. |[Elastic] [Host] [Windows] [Threat Detection] [Execution]  |7.11.0 |4 <<suspicious-solarwinds-child-process-history, Version history>>

|<<suspicious-startup-shell-folder-modification, Suspicious Startup Shell Folder Modification>> |Identifies suspicious startup shell folder modifications to change the default Startup directory in order to bypass detections monitoring file creation in the Windows Startup folder. |[Elastic] [Host] [Windows] [Threat Detection] [Persistence]  |7.13.0 |5 <<suspicious-startup-shell-folder-modification-history, Version history>>

|<<suspicious-wmi-image-load-from-ms-office, Suspicious WMI Image Load from MS Office>> |Identifies a suspicious image load (wmiutils.dll) from Microsoft Office processes. This behavior may indicate adversarial activity where child processes are spawned via Windows Management Instrumentation (WMI). This technique can be used to execute code and evade traditional parent/child processes spawned from Microsoft Office products. |[Elastic] [Host] [Windows] [Threat Detection] [Execution]  |7.11.0 |5 <<suspicious-wmi-image-load-from-ms-office-history, Version history>>

|<<suspicious-wmic-xsl-script-execution, Suspicious WMIC XSL Script Execution>> |Identifies WMIC allowlist bypass techniques by alerting on suspicious execution of scripts. When WMIC loads scripting libraries it may be indicative of an allowlist bypass. |[Elastic] [Host] [Windows] [Threat Detection] [Defense Evasion]  |7.10.0 |3 <<suspicious-wmic-xsl-script-execution-history, Version history>>

|<<suspicious-werfault-child-process, Suspicious WerFault Child Process>> |A suspicious WerFault child process was detected, which may indicate an attempt to run unnoticed. Verify process details such as command line, network connections, file writes and parent process details as well. |[Elastic] [Host] [Windows] [Threat Detection] [Defense Evasion]  |7.10.0 |5 <<suspicious-werfault-child-process-history, Version history>>

|<<suspicious-zoom-child-process, Suspicious Zoom Child Process>> |A suspicious Zoom child process was detected, which may indicate an attempt to run unnoticed. Verify process details such as command line, network connections, file writes and associated file signature details as well. |[Elastic] [Host] [Windows] [Threat Detection] [Defense Evasion]  |7.10.0 |6 <<suspicious-zoom-child-process-history, Version history>>

|<<suspicious-macos-ms-office-child-process, Suspicious macOS MS Office Child Process>> |Identifies suspicious child processes of frequently targeted Microsoft Office applications (Word, PowerPoint, and Excel). These child processes are often launched during exploitation of Office applications or by documents with malicious macros. |[Elastic] [Host] [macOS] [Threat Detection] [Initial Access]  |7.12.0 |2 <<suspicious-macos-ms-office-child-process-history, Version history>>

|<<svchost-spawning-cmd, Svchost spawning Cmd>> |Identifies a suspicious parent child process relationship with cmd.exe descending from svchost.exe |[Elastic] [Host] [Windows] [Threat Detection] [Execution]  |7.6.0 |10 <<svchost-spawning-cmd-history, Version history>>

|<<symbolic-link-to-shadow-copy-created, Symbolic Link to Shadow Copy Created>> |Identifies the creation of symbolic links to a shadow copy. Symbolic links can be used to access files in the shadow copy, including sensitive files such as ntds.dit, System Boot Key and browser offline credentials. |[Elastic] [Host] [Windows] [Threat Detection] [Credential Access]  |8.0.0 |3 <<symbolic-link-to-shadow-copy-created-history, Version history>>

|<<system-log-file-deletion, System Log File Deletion>> |Identifies the deletion of sensitive Linux system logs. This may indicate an attempt to evade detection or destroy forensic evidence on a system. |[Elastic] [Host] [Linux] [Threat Detection] [Defense Evasion]  |7.11.0 |4 <<system-log-file-deletion-history, Version history>>

|<<system-shells-via-services, System Shells via Services>> |Windows services typically run as SYSTEM and can be used as a privilege escalation opportunity. Malware or penetration testers may run a shell as a service to gain SYSTEM permissions. |[Elastic] [Host] [Windows] [Threat Detection] [Persistence]  |7.6.0 |11 <<system-shells-via-services-history, Version history>>

|<<systemkey-access-via-command-line, SystemKey Access via Command Line>> |Keychains are the built-in way for macOS to keep track of users' passwords and credentials for many services and features, including Wi-Fi and website passwords, secure notes, certificates, and Kerberos. Adversaries may collect the keychain storage data from a system to acquire credentials. |[Elastic] [Host] [macOS] [Threat Detection] [Credential Access]  |7.12.0 |2 <<systemkey-access-via-command-line-history, Version history>>

|<<tcc-bypass-via-mounted-apfs-snapshot-access, TCC Bypass via Mounted APFS Snapshot Access>> |Identifies the use of the mount_apfs command to mount the entire file system through Apple File System (APFS) snapshots as read-only and with the noowners flag set. This action enables the adversary to access almost any file in the file system, including all user data and files protected by Apple’s privacy framework (TCC). |[Elastic] [Host] [macOS] [Threat Detection] [Defense Evasion]  |7.12.0 |1

|<<tampering-of-bash-command-line-history, Tampering of Bash Command-Line History>> |Adversaries may attempt to clear or disable the Bash command-line history in an attempt to evade detection or forensic investigations. |[Elastic] [Host] [Linux] [Threat Detection] [Defense Evasion]  |7.9.0 |7 <<tampering-of-bash-command-line-history-history, Version history>>

|<<telnet-port-activity, Telnet Port Activity>> |This rule detects network events that may indicate the use of Telnet traffic. Telnet is commonly used by system administrators to remotely control older or embedded systems using the command line shell. It should almost never be directly exposed to the Internet, as it is frequently targeted and exploited by threat actors as an initial access or backdoor vector. As a plain-text protocol, it may also expose usernames and passwords to anyone capable of observing the traffic. |[Elastic] [Host] [Network] [Threat Detection] [Command and Control] [Host]  |7.6.0 |10 <<telnet-port-activity-history, Version history>>

|<<third-party-backup-files-deleted-via-unexpected-process, Third-party Backup Files Deleted via Unexpected Process>> |Identifies the deletion of backup files, saved using third-party software, by a process outside of the backup suite. Adversaries may delete Backup files to ensure that recovery from a ransomware attack is less likely. |[Elastic] [Host] [Windows] [Threat Detection] [Impact]  |7.16.0 |3 <<third-party-backup-files-deleted-via-unexpected-process-history, Version history>>

|<<threat-detected-by-okta-threatinsight, Threat Detected by Okta ThreatInsight>> |Detects when Okta ThreatInsight identifies a request from a malicious IP address. Investigating requests from IP addresses identified as malicious by Okta ThreatInsight can help security teams monitor for and respond to credential based attacks against their organization, such as brute force and password spraying attacks. |[Elastic] [Identity] [Okta] [Continuous Monitoring] [SecOps] [Monitoring]  |7.9.0 |6 <<threat-detected-by-okta-threatinsight-history, Version history>>

|<<threat-intel-filebeat-module-v8.x-indicator-match, Threat Intel Filebeat Module (v8.x) Indicator Match>> |This rule is triggered when indicators from the Threat Intel Filebeat module (v8.x) has a match against local file or network observations. |[Elastic] [Windows] [Elastic Endgame] [Network] [Continuous Monitoring] [SecOps] [Monitoring]  |8.0.0 |3 <<threat-intel-filebeat-module-v8.x-indicator-match-history, Version history>>

|<<threat-intel-indicator-match, Threat Intel Indicator Match>> |This rule is triggered when indicators from the Threat Intel integrations have a match against local file or network observations. |[Elastic] [Windows] [Elastic Endgame] [Network] [Continuous Monitoring] [SecOps] [Monitoring]  |8.0.0 |3 <<threat-intel-indicator-match-history, Version history>>

|<<timestomping-using-touch-command, Timestomping using Touch Command>> |Timestomping is an anti-forensics technique which is used to modify the timestamps of a file, often to mimic files that are in the same folder. |[Elastic] [Host] [Linux] [macOS] [Threat Detection] [Defense Evasion]  |7.11.0 |5 <<timestomping-using-touch-command-history, Version history>>

|<<uac-bypass-attempt-via-elevated-com-internet-explorer-add-on-installer, UAC Bypass Attempt via Elevated COM Internet Explorer Add-On Installer>> |Identifies User Account Control (UAC) bypass attempts by abusing an elevated COM Interface to launch a malicious program. Attackers may attempt to bypass UAC to stealthily execute code with elevated permissions. |[Elastic] [Host] [Windows] [Threat Detection] [Privilege Escalation]  |7.11.0 |5 <<uac-bypass-attempt-via-elevated-com-internet-explorer-add-on-installer-history, Version history>>

|<<uac-bypass-attempt-via-privileged-ifileoperation-com-interface, UAC Bypass Attempt via Privileged IFileOperation COM Interface>> |Identifies attempts to bypass User Account Control (UAC) via DLL side-loading. Attackers may attempt to bypass UAC to stealthily execute code with elevated permissions. |[Elastic] [Host] [Windows] [Threat Detection] [Privilege Escalation]  |7.11.0 |5 <<uac-bypass-attempt-via-privileged-ifileoperation-com-interface-history, Version history>>

|<<uac-bypass-attempt-via-windows-directory-masquerading, UAC Bypass Attempt via Windows Directory Masquerading>> |Identifies an attempt to bypass User Account Control (UAC) by masquerading as a Microsoft trusted Windows directory. Attackers may bypass UAC to stealthily execute code with elevated permissions. |[Elastic] [Host] [Windows] [Threat Detection] [Privilege Escalation]  |7.11.0 |5 <<uac-bypass-attempt-via-windows-directory-masquerading-history, Version history>>

|<<uac-bypass-attempt-with-ieditionupgrademanager-elevated-com-interface, UAC Bypass Attempt with IEditionUpgradeManager Elevated COM Interface>> |Identifies attempts to bypass User Account Control (UAC) by abusing an elevated COM Interface to launch a rogue Windows ClipUp program. Attackers may attempt to bypass UAC to stealthily execute code with elevated permissions. |[Elastic] [Host] [Windows] [Threat Detection] [Privilege Escalation]  |7.11.0 |5 <<uac-bypass-attempt-with-ieditionupgrademanager-elevated-com-interface-history, Version history>>

|<<uac-bypass-via-diskcleanup-scheduled-task-hijack, UAC Bypass via DiskCleanup Scheduled Task Hijack>> |Identifies User Account Control (UAC) bypass via hijacking DiskCleanup Scheduled Task. Attackers bypass UAC to stealthily execute code with elevated permissions. |[Elastic] [Host] [Windows] [Threat Detection] [Privilege Escalation]  |7.10.0 |7 <<uac-bypass-via-diskcleanup-scheduled-task-hijack-history, Version history>>

|<<uac-bypass-via-icmluautil-elevated-com-interface, UAC Bypass via ICMLuaUtil Elevated COM Interface>> |Identifies User Account Control (UAC) bypass attempts via the ICMLuaUtil Elevated COM interface. Attackers may attempt to bypass UAC to stealthily execute code with elevated permissions. |[Elastic] [Host] [Windows] [Threat Detection] [Privilege Escalation]  |7.11.0 |5 <<uac-bypass-via-icmluautil-elevated-com-interface-history, Version history>>

|<<uac-bypass-via-windows-firewall-snap-in-hijack, UAC Bypass via Windows Firewall Snap-In Hijack>> |Identifies attempts to bypass User Account Control (UAC) by hijacking the Microsoft Management Console (MMC) Windows Firewall snap-in. Attackers bypass UAC to stealthily execute code with elevated permissions. |[Elastic] [Host] [Windows] [Threat Detection] [Privilege Escalation]  |7.11.0 |5 <<uac-bypass-via-windows-firewall-snap-in-hijack-history, Version history>>

|<<unauthorized-access-to-an-okta-application, Unauthorized Access to an Okta Application>> |Identifies unauthorized access attempts to Okta applications. |[Elastic] [Identity] [Okta] [Continuous Monitoring] [SecOps] [Identity and Access]  |7.16.0 |2 <<unauthorized-access-to-an-okta-application-history, Version history>>

|<<uncommon-registry-persistence-change, Uncommon Registry Persistence Change>> |Detects changes to registry persistence keys that are not commonly used or modified by legitimate programs. This could be an indication of an adversary's attempt to persist in a stealthy manner. |[Elastic] [Host] [Windows] [Threat Detection] [Persistence]  |7.11.0 |7 <<uncommon-registry-persistence-change-history, Version history>>

|<<unexpected-child-process-of-macos-screensaver-engine, Unexpected Child Process of macOS Screensaver Engine>> |Identifies when a child process is spawned by the screensaver engine process, which is consistent with an attacker's malicious payload being executed after the screensaver activated on the endpoint. An adversary can maintain persistence on a macOS endpoint by creating a malicious screensaver (.saver) file and configuring the screensaver plist file to execute code each time the screensaver is activated. |[Elastic] [Host] [macOS] [Threat Detection] [Persistence]  |7.16.0 |3 <<unexpected-child-process-of-macos-screensaver-engine-history, Version history>>

|<<unusual-aws-command-for-a-user, Unusual AWS Command for a User>> |A machine learning job detected an AWS API command that, while not inherently suspicious or abnormal, is being made by a user context that does not normally use the command. This can be the result of compromised credentials or keys as someone uses a valid account to persist, move laterally, or exfiltrate data. |[Elastic] [Cloud] [AWS] [ML]  |7.9.0 |7 <<unusual-aws-command-for-a-user-history, Version history>>

|<<unusual-child-process-from-a-system-virtual-process, Unusual Child Process from a System Virtual Process>> |Identifies a suspicious child process of the Windows virtual system process, which could indicate code injection. |[Elastic] [Host] [Windows] [Threat Detection] [Defense Evasion]  |7.10.0 |5 <<unusual-child-process-from-a-system-virtual-process-history, Version history>>

|<<unusual-child-process-of-dns.exe, Unusual Child Process of dns.exe>> |Identifies an unexpected process spawning from dns.exe, the process responsible for Windows DNS server services, which may indicate activity related to remote code execution or other forms of exploitation. |[Elastic] [Host] [Windows] [Threat Detection] [Initial Access]  |7.10.0 |6 <<unusual-child-process-of-dns.exe-history, Version history>>

|<<unusual-child-processes-of-rundll32, Unusual Child Processes of RunDLL32>> |Identifies child processes of unusual instances of RunDLL32 where the command line parameters were suspicious. Misuse of RunDLL32 could indicate malicious activity. |[Elastic] [Host] [Windows] [Threat Detection] [Defense Evasion]  |7.10.0 |4 <<unusual-child-processes-of-rundll32-history, Version history>>

|<<unusual-city-for-an-aws-command, Unusual City For an AWS Command>> |A machine learning job detected AWS command activity that, while not inherently suspicious or abnormal, is sourcing from a geolocation (city) that is unusual for the command. This can be the result of compromised credentials or keys being used by a threat actor in a different geography than the authorized user(s). |[Elastic] [Cloud] [AWS] [ML]  |7.9.0 |7 <<unusual-city-for-an-aws-command-history, Version history>>

|<<unusual-country-for-an-aws-command, Unusual Country For an AWS Command>> |A machine learning job detected AWS command activity that, while not inherently suspicious or abnormal, is sourcing from a geolocation (country) that is unusual for the command. This can be the result of compromised credentials or keys being used by a threat actor in a different geography than the authorized user(s). |[Elastic] [Cloud] [AWS] [ML]  |7.9.0 |9 <<unusual-country-for-an-aws-command-history, Version history>>

|<<unusual-dns-activity, Unusual DNS Activity>> |A machine learning job detected a rare and unusual DNS query that indicate network activity with unusual DNS domains. This can be due to initial access, persistence, command-and-control, or exfiltration activity. For example, when a user clicks on a link in a phishing email or opens a malicious document, a request may be sent to download and run a payload from an uncommon domain. When malware is already running, it may send requests to an uncommon DNS domain the malware uses for command-and-control communication. |[Elastic] [Network] [Threat Detection] [ML]  |7.7.0 |4 <<unusual-dns-activity-history, Version history>>

|<<unusual-executable-file-creation-by-a-system-critical-process, Unusual Executable File Creation by a System Critical Process>> |Identifies an unexpected executable file being created or modified by a Windows system critical process, which may indicate activity related to remote code execution or other forms of exploitation. |[Elastic] [Host] [Windows] [Threat Detection] [Defense Evasion]  |7.10.0 |5 <<unusual-executable-file-creation-by-a-system-critical-process-history, Version history>>

|<<unusual-file-creation-alternate-data-stream, Unusual File Creation - Alternate Data Stream>> |Identifies suspicious creation of Alternate Data Streams on highly targeted files. This is uncommon for legitimate files and sometimes done by adversaries to hide malware. |[Elastic] [Host] [Windows] [Threat Detection] [Defense Evasion]  |7.12.0 |2 <<unusual-file-creation-alternate-data-stream-history, Version history>>

|<<unusual-file-modification-by-dns.exe, Unusual File Modification by dns.exe>> |Identifies an unexpected file being modified by dns.exe, the process responsible for Windows DNS Server services, which may indicate activity related to remote code execution or other forms of exploitation. |[Elastic] [Host] [Windows] [Threat Detection] [Initial Access]  |7.10.0 |6 <<unusual-file-modification-by-dns.exe-history, Version history>>

|<<unusual-hour-for-a-user-to-logon, Unusual Hour for a User to Logon>> |A machine learning job detected a user logging in at a time of day that is unusual for the user. This can be due to credentialed access via a compromised account when the user and the threat actor are in different time zones. In addition, unauthorized user activity often takes place during non-business hours. |[Elastic] [Authentication] [Threat Detection] [ML]  |7.14.0 |1

|<<unusual-linux-network-activity, Unusual Linux Network Activity>> |Identifies Linux processes that do not usually use the network but have unexpected network activity, which can indicate command-and-control, lateral movement, persistence, or data exfiltration activity. A process with unusual network activity can denote process exploitation or injection, where the process is used to run persistence mechanisms that allow a malicious actor remote access or control of the host, data exfiltration, and execution of unauthorized network applications. |[Elastic] [Host] [Linux] [Threat Detection] [ML]  |7.7.0 |6 <<unusual-linux-network-activity-history, Version history>>

|<<unusual-linux-network-connection-discovery, Unusual Linux Network Connection Discovery>> |Looks for commands related to system network connection discovery from an unusual user context. This can be due to uncommon troubleshooting activity or due to a compromised account. A compromised account may be used by a threat actor to engage in system network connection discovery in order to increase their understanding of connected services and systems. This information may be used to shape follow-up behaviors such as lateral movement or additional discovery. |[Elastic] [Host] [Linux] [Threat Detection] [ML]  |7.10.0 |2 <<unusual-linux-network-connection-discovery-history, Version history>>

|<<unusual-linux-network-port-activity, Unusual Linux Network Port Activity>> |Identifies unusual destination port activity that can indicate command-and-control, persistence mechanism, or data exfiltration activity. Rarely used destination port activity is generally unusual in Linux fleets, and can indicate unauthorized access or threat actor activity. |[Elastic] [Host] [Linux] [Threat Detection] [ML]  |7.7.0 |5 <<unusual-linux-network-port-activity-history, Version history>>

|<<unusual-linux-network-service, Unusual Linux Network Service>> |Identifies unusual listening ports on Linux instances that can indicate execution of unauthorized services, backdoors, or persistence mechanisms. |[Elastic] [Host] [Linux] [Threat Detection] [ML]  |7.7.0 |4 <<unusual-linux-network-service-history, Version history>>

|<<unusual-linux-process-calling-the-metadata-service, Unusual Linux Process Calling the Metadata Service>> |Looks for anomalous access to the metadata service by an unusual process. The metadata service may be targeted in order to harvest credentials or user data scripts containing secrets. |[Elastic] [Host] [Linux] [Threat Detection] [ML]  |7.10.0 |3 <<unusual-linux-process-calling-the-metadata-service-history, Version history>>

|<<unusual-linux-process-discovery-activity, Unusual Linux Process Discovery Activity>> |Looks for commands related to system process discovery from an unusual user context. This can be due to uncommon troubleshooting activity or due to a compromised account. A compromised account may be used by a threat actor to engage in system process discovery in order to increase their understanding of software applications running on a target host or network. This may be a precursor to selection of a persistence mechanism or a method of privilege elevation. |[Elastic] [Host] [Linux] [Threat Detection] [ML]  |7.10.0 |2 <<unusual-linux-process-discovery-activity-history, Version history>>

|<<unusual-linux-system-information-discovery-activity, Unusual Linux System Information Discovery Activity>> |Looks for commands related to system information discovery from an unusual user context. This can be due to uncommon troubleshooting activity or due to a compromised account. A compromised account may be used to engage in system information discovery in order to gather detailed information about system configuration and software versions. This may be a precursor to selection of a persistence mechanism or a method of privilege elevation. |[Elastic] [Host] [Linux] [Threat Detection] [ML]  |7.10.0 |2 <<unusual-linux-system-information-discovery-activity-history, Version history>>

|<<unusual-linux-system-network-configuration-discovery, Unusual Linux System Network Configuration Discovery>> |Looks for commands related to system network configuration discovery from an unusual user context. This can be due to uncommon troubleshooting activity or due to a compromised account. A compromised account may be used by a threat actor to engage in system network configuration discovery in order to increase their understanding of connected networks and hosts. This information may be used to shape follow-up behaviors such as lateral movement or additional discovery. |[Elastic] [Host] [Linux] [Threat Detection] [ML]  |7.10.0 |2 <<unusual-linux-system-network-configuration-discovery-history, Version history>>

|<<unusual-linux-system-owner-or-user-discovery-activity, Unusual Linux System Owner or User Discovery Activity>> |Looks for commands related to system user or owner discovery from an unusual user context. This can be due to uncommon troubleshooting activity or due to a compromised account. A compromised account may be used to engage in system owner or user discovery in order to identify currently active or primary users of a system. This may be a precursor to additional discovery, credential dumping or privilege elevation activity. |[Elastic] [Host] [Linux] [Threat Detection] [ML]  |7.10.0 |2 <<unusual-linux-system-owner-or-user-discovery-activity-history, Version history>>

|<<unusual-linux-user-calling-the-metadata-service, Unusual Linux User Calling the Metadata Service>> |Looks for anomalous access to the cloud platform metadata service by an unusual user. The metadata service may be targeted in order to harvest credentials or user data scripts containing secrets. |[Elastic] [Host] [Linux] [Threat Detection] [ML]  |7.10.0 |3 <<unusual-linux-user-calling-the-metadata-service-history, Version history>>

|<<unusual-linux-username, Unusual Linux Username>> |A machine learning job detected activity for a username that is not normally active, which can indicate unauthorized changes, activity by unauthorized users, lateral movement, or compromised credentials. In many organizations, new usernames are not often created apart from specific types of system activities, such as creating new accounts for new employees. These user accounts quickly become active and routine. Events from rarely used usernames can point to suspicious activity. Additionally, automated Linux fleets tend to see activity from rarely used usernames only when personnel log in to make authorized or unauthorized changes, or threat actors have acquired credentials and log in for malicious purposes. Unusual usernames can also indicate pivoting, where compromised credentials are used to try and move laterally from one host to another. |[Elastic] [Host] [Linux] [Threat Detection] [ML]  |7.7.0 |7 <<unusual-linux-username-history, Version history>>

|<<unusual-linux-web-activity, Unusual Linux Web Activity>> |A machine learning job detected an unusual web URL request from a Linux host, which can indicate malware delivery and execution. Wget and cURL are commonly used by Linux programs to download code and data. Most of the time, their usage is entirely normal. Generally, because they use a list of URLs, they repeatedly download from the same locations. However, Wget and cURL are sometimes used to deliver Linux exploit payloads, and threat actors use these tools to download additional software and code. For these reasons, unusual URLs can indicate unauthorized downloads or threat activity. |[Elastic] [Host] [Linux] [Threat Detection] [ML]  |7.7.0 |4 <<unusual-linux-web-activity-history, Version history>>

|<<unusual-login-activity, Unusual Login Activity>> |Identifies an unusually high number of authentication attempts. |[Elastic] [Host] [Linux] [Threat Detection] [ML]  |7.7.0 |4 <<unusual-login-activity-history, Version history>>

|<<unusual-network-activity-from-a-windows-system-binary, Unusual Network Activity from a Windows System Binary>> |Identifies network activity from unexpected system applications. This may indicate adversarial activity as these applications are often leveraged by adversaries to execute code and evade detection. |[Elastic] [Host] [Windows] [Threat Detection] [Defense Evasion]  |7.10.0 |2 <<unusual-network-activity-from-a-windows-system-binary-history, Version history>>

|<<unusual-network-connection-via-dllhost, Unusual Network Connection via DllHost>> |Identifies unusual instances of dllhost.exe making outbound network connections. This may indicate adversarial Command and Control activity. |[Elastic] [Host] [Windows] [Threat Detection] [Defense Evasion]  |7.14.0 |2 <<unusual-network-connection-via-dllhost-history, Version history>>

|<<unusual-network-connection-via-rundll32, Unusual Network Connection via RunDLL32>> |Identifies unusual instances of rundll32.exe making outbound network connections. This may indicate adversarial Command and Control activity. |[Elastic] [Host] [Windows] [Threat Detection] [Defense Evasion]  |7.6.0 |10 <<unusual-network-connection-via-rundll32-history, Version history>>

|<<unusual-network-destination-domain-name, Unusual Network Destination Domain Name>> |A machine learning job detected an unusual network destination domain name. This can be due to initial access, persistence, command-and-control, or exfiltration activity. For example, when a user clicks on a link in a phishing email or opens a malicious document, a request may be sent to download and run a payload from an uncommon web server name. When malware is already running, it may send requests to an uncommon DNS domain the malware uses for command-and-control communication. |[Elastic] [Network] [Threat Detection] [ML]  |7.7.0 |4 <<unusual-network-destination-domain-name-history, Version history>>

|<<unusual-parent-process-for-cmd.exe, Unusual Parent Process for cmd.exe>> |Identifies a suspicious parent child process relationship with cmd.exe descending from an unusual process. |[Elastic] [Host] [Windows] [Threat Detection] [Execution]  |7.10.0 |5 <<unusual-parent-process-for-cmd.exe-history, Version history>>

|<<unusual-parent-child-relationship, Unusual Parent-Child Relationship>> |Identifies Windows programs run from unexpected parent processes. This could indicate masquerading or other strange activity on a system. |[Elastic] [Host] [Windows] [Threat Detection] [Privilege Escalation]  |7.6.0 |11 <<unusual-parent-child-relationship-history, Version history>>

|<<unusual-persistence-via-services-registry, Unusual Persistence via Services Registry>> |Identifies processes modifying the services registry key directly, instead of through the expected Windows APIs. This could be an indication of an adversary attempting to stealthily persist through abnormal service creation or modification of an existing service. |[Elastic] [Host] [Windows] [Threat Detection] [Persistence]  |7.11.0 |5 <<unusual-persistence-via-services-registry-history, Version history>>

|<<unusual-print-spooler-child-process, Unusual Print Spooler Child Process>> |Detects unusual Print Spooler service (spoolsv.exe) child processes. This may indicate an attempt to exploit privilege escalation vulnerabilities related to the Printing Service on Windows. |[Elastic] [Host] [Windows] [Threat Detection] [Privilege Escalation]  |7.14.0 |5 <<unusual-print-spooler-child-process-history, Version history>>

|<<unusual-process-execution-temp, Unusual Process Execution - Temp>> |Identifies processes running in a temporary folder. This is sometimes done by adversaries to hide malware. |[Elastic] [Host] [Linux] [Threat Detection]  |7.6.0 |7 <<unusual-process-execution-temp-history, Version history>>

|<<unusual-process-execution-path-alternate-data-stream, Unusual Process Execution Path - Alternate Data Stream>> |Identifies processes running from an Alternate Data Stream. This is uncommon for legitimate processes and sometimes done by adversaries to hide malware. |[Elastic] [Host] [Windows] [Threat Detection] [Defense Evasion]  |7.11.0 |6 <<unusual-process-execution-path-alternate-data-stream-history, Version history>>

|<<unusual-process-for-a-linux-host, Unusual Process For a Linux Host>> |Identifies rare processes that do not usually run on individual hosts, which can indicate execution of unauthorized services, malware, or persistence mechanisms. Processes are considered rare when they only run occasionally as compared with other processes running on the host. |[Elastic] [Host] [Linux] [Threat Detection] [ML]  |7.7.0 |7 <<unusual-process-for-a-linux-host-history, Version history>>

|<<unusual-process-for-a-windows-host, Unusual Process For a Windows Host>> |Identifies rare processes that do not usually run on individual hosts, which can indicate execution of unauthorized services, malware, or persistence mechanisms. Processes are considered rare when they only run occasionally as compared with other processes running on the host. |[Elastic] [Host] [Windows] [Threat Detection] [ML]  |7.7.0 |10 <<unusual-process-for-a-windows-host-history, Version history>>

|<<unusual-process-network-connection, Unusual Process Network Connection>> |Identifies network activity from unexpected system applications. This may indicate adversarial activity as these applications are often leveraged by adversaries to execute code and evade detection. |[Elastic] [Host] [Windows] [Threat Detection] [Defense Evasion]  |7.6.0 |7 <<unusual-process-network-connection-history, Version history>>

|<<unusual-service-host-child-process-childless-service, Unusual Service Host Child Process - Childless Service>> |Identifies unusual child processes of Service Host (svchost.exe) that traditionally do not spawn any child processes. This may indicate a code injection or an equivalent form of exploitation. |[Elastic] [Host] [Windows] [Threat Detection] [Defense Evasion] [Privilege Escalation]  |7.11.0 |4 <<unusual-service-host-child-process-childless-service-history, Version history>>

|<<unusual-source-ip-for-a-user-to-logon-from, Unusual Source IP for a User to Logon from>> |A machine learning job detected a user logging in from an IP address that is unusual for the user. This can be due to credentialed access via a compromised account when the user and the threat actor are in different locations. An unusual source IP address for a username could also be due to lateral movement when a compromised account is used to pivot between hosts. |[Elastic] [Authentication] [Threat Detection] [ML]  |7.14.0 |1

|<<unusual-sudo-activity, Unusual Sudo Activity>> |Looks for sudo activity from an unusual user context. An unusual sudo user could be due to troubleshooting activity or it could be a sign of credentialed access via compromised accounts. |[Elastic] [Host] [Linux] [Threat Detection] [ML]  |7.10.0 |2 <<unusual-sudo-activity-history, Version history>>

|<<unusual-web-request, Unusual Web Request>> |A machine learning job detected a rare and unusual URL that indicates unusual web browsing activity. This can be due to initial access, persistence, command-and-control, or exfiltration activity. For example, in a strategic web compromise or watering hole attack, when a trusted website is compromised to target a particular sector or organization, targeted users may receive emails with uncommon URLs for trusted websites. These URLs can be used to download and run a payload. When malware is already running, it may send requests to uncommon URLs on trusted websites the malware uses for command-and-control communication. When rare URLs are observed being requested for a local web server by a remote source, these can be due to web scanning, enumeration or attack traffic, or they can be due to bots and web scrapers which are part of common Internet background traffic. |[Elastic] [Network] [Threat Detection] [ML]  |7.7.0 |4 <<unusual-web-request-history, Version history>>

|<<unusual-web-user-agent, Unusual Web User Agent>> |A machine learning job detected a rare and unusual user agent indicating web browsing activity by an unusual process other than a web browser. This can be due to persistence, command-and-control, or exfiltration activity. Uncommon user agents coming from remote sources to local destinations are often the result of scanners, bots, and web scrapers, which are part of common Internet background traffic. Much of this is noise, but more targeted attacks on websites using tools like Burp or SQLmap can sometimes be discovered by spotting uncommon user agents. Uncommon user agents in traffic from local sources to remote destinations can be any number of things, including harmless programs like weather monitoring or stock-trading programs. However, uncommon user agents from local sources can also be due to malware or scanning activity. |[Elastic] [Network] [Threat Detection] [ML]  |7.7.0 |4 <<unusual-web-user-agent-history, Version history>>

|<<unusual-windows-network-activity, Unusual Windows Network Activity>> |Identifies Windows processes that do not usually use the network but have unexpected network activity, which can indicate command-and-control, lateral movement, persistence, or data exfiltration activity. A process with unusual network activity can denote process exploitation or injection, where the process is used to run persistence mechanisms that allow a malicious actor remote access or control of the host, data exfiltration, and execution of unauthorized network applications. |[Elastic] [Host] [Windows] [Threat Detection] [ML]  |7.7.0 |7 <<unusual-windows-network-activity-history, Version history>>

|<<unusual-windows-path-activity, Unusual Windows Path Activity>> |Identifies processes started from atypical folders in the file system, which might indicate malware execution or persistence mechanisms. In corporate Windows environments, software installation is centrally managed and it is unusual for programs to be executed from user or temporary directories. Processes executed from these locations can denote that a user downloaded software directly from the Internet or a malicious script or macro executed malware. |[Elastic] [Host] [Windows] [Threat Detection] [ML]  |7.7.0 |5 <<unusual-windows-path-activity-history, Version history>>

|<<unusual-windows-process-calling-the-metadata-service, Unusual Windows Process Calling the Metadata Service>> |Looks for anomalous access to the metadata service by an unusual process. The metadata service may be targeted in order to harvest credentials or user data scripts containing secrets. |[Elastic] [Host] [Windows] [Threat Detection] [ML]  |7.10.0 |3 <<unusual-windows-process-calling-the-metadata-service-history, Version history>>

|<<unusual-windows-remote-user, Unusual Windows Remote User>> |A machine learning job detected an unusual remote desktop protocol (RDP) username, which can indicate account takeover or credentialed persistence using compromised accounts. RDP attacks, such as BlueKeep, also tend to use unusual usernames. |[Elastic] [Host] [Windows] [Threat Detection] [ML]  |7.7.0 |5 <<unusual-windows-remote-user-history, Version history>>

|<<unusual-windows-service, Unusual Windows Service>> |A machine learning job detected an unusual Windows service, This can indicate execution of unauthorized services, malware, or persistence mechanisms. In corporate Windows environments, hosts do not generally run many rare or unique services. This job helps detect malware and persistence mechanisms that have been installed and run as a service. |[Elastic] [Host] [Windows] [Threat Detection] [ML]  |7.7.0 |4 <<unusual-windows-service-history, Version history>>

|<<unusual-windows-user-calling-the-metadata-service, Unusual Windows User Calling the Metadata Service>> |Looks for anomalous access to the cloud platform metadata service by an unusual user. The metadata service may be targeted in order to harvest credentials or user data scripts containing secrets. |[Elastic] [Host] [Windows] [Threat Detection] [ML]  |7.10.0 |3 <<unusual-windows-user-calling-the-metadata-service-history, Version history>>

|<<unusual-windows-user-privilege-elevation-activity, Unusual Windows User Privilege Elevation Activity>> |A machine learning job detected an unusual user context switch, using the runas command or similar techniques, which can indicate account takeover or privilege escalation using compromised accounts. Privilege elevation using tools like runas are more commonly used by domain and network administrators than by regular Windows users. |[Elastic] [Host] [Windows] [Threat Detection] [ML]  |7.7.0 |4 <<unusual-windows-user-privilege-elevation-activity-history, Version history>>

|<<unusual-windows-username, Unusual Windows Username>> |A machine learning job detected activity for a username that is not normally active, which can indicate unauthorized changes, activity by unauthorized users, lateral movement, or compromised credentials. In many organizations, new usernames are not often created apart from specific types of system activities, such as creating new accounts for new employees. These user accounts quickly become active and routine. Events from rarely used usernames can point to suspicious activity. Additionally, automated Linux fleets tend to see activity from rarely used usernames only when personnel log in to make authorized or unauthorized changes, or threat actors have acquired credentials and log in for malicious purposes. Unusual usernames can also indicate pivoting, where compromised credentials are used to try and move laterally from one host to another. |[Elastic] [Host] [Windows] [Threat Detection] [ML]  |7.7.0 |7 <<unusual-windows-username-history, Version history>>

|<<user-account-creation, User Account Creation>> |Identifies attempts to create new users. This is sometimes done by attackers to increase access or establish persistence on a system or domain. |[Elastic] [Host] [Windows] [Threat Detection] [Persistence]  |7.6.0 |10 <<user-account-creation-history, Version history>>

|<<user-added-as-owner-for-azure-application, User Added as Owner for Azure Application>> |Identifies when a user is added as an owner for an Azure application. An adversary may add a user account as an owner for an Azure application in order to grant additional permissions and modify the application's configuration using another account. |[Elastic] [Cloud] [Azure] [Continuous Monitoring] [SecOps] [Configuration Audit]  |7.10.0 |5 <<user-added-as-owner-for-azure-application-history, Version history>>

|<<user-added-as-owner-for-azure-service-principal, User Added as Owner for Azure Service Principal>> |Identifies when a user is added as an owner for an Azure service principal. The service principal object defines what the application can do in the specific tenant, who can access the application, and what resources the app can access. A service principal object is created when an application is given permission to access resources in a tenant. An adversary may add a user account as an owner for a service principal and use that account in order to define what an application can do in the Azure AD tenant. |[Elastic] [Cloud] [Azure] [Continuous Monitoring] [SecOps] [Configuration Audit]  |7.10.0 |5 <<user-added-as-owner-for-azure-service-principal-history, Version history>>

|<<user-added-to-privileged-group-in-active-directory, User Added to Privileged Group in Active Directory>> |Identifies a user being added to a privileged group in Active Directory. Privileged accounts and groups in Active Directory are those to which powerful rights, privileges, and permissions are granted that allow them to perform nearly any action in Active Directory and on domain-joined systems. |[Elastic] [Host] [Windows] [Threat Detection] [Persistence]  |7.12.0 |4 <<user-added-to-privileged-group-in-active-directory-history, Version history>>

|<<user-account-exposed-to-kerberoasting, User account exposed to Kerberoasting>> |Detects when a user account has the servicePrincipalName attribute modified. Attackers can abuse write privileges over a user to configure SPNs so that they can perform Kerberoasting. Administrators can also configure this for legitimate purposes, exposing the account to Kerberoasting. |[Elastic] [Host] [Windows] [Threat Detection] [Credential Access] [Active Directory]  |8.2.0 |1

|<<vnc-virtual-network-computing-from-the-internet, VNC (Virtual Network Computing) from the Internet>> |This rule detects network events that may indicate the use of VNC traffic from the Internet. VNC is commonly used by system administrators to remotely control a system for maintenance or to use shared resources. It should almost never be directly exposed to the Internet, as it is frequently targeted and exploited by threat actors as an initial access or backdoor vector. |[Elastic] [Host] [Network] [Threat Detection] [Command and Control] [Host]  |7.6.0 |11 <<vnc-virtual-network-computing-from-the-internet-history, Version history>>

|<<vnc-virtual-network-computing-to-the-internet, VNC (Virtual Network Computing) to the Internet>> |This rule detects network events that may indicate the use of VNC traffic to the Internet. VNC is commonly used by system administrators to remotely control a system for maintenance or to use shared resources. It should almost never be directly exposed to the Internet, as it is frequently targeted and exploited by threat actors as an initial access or backdoor vector. |[Elastic] [Host] [Network] [Threat Detection] [Command and Control] [Host]  |7.6.0 |11 <<vnc-virtual-network-computing-to-the-internet-history, Version history>>

|<<virtual-machine-fingerprinting, Virtual Machine Fingerprinting>> |An adversary may attempt to get detailed information about the operating system and hardware. This rule identifies common locations used to discover virtual machine hardware by a non-root user. This technique has been used by the Pupy RAT and other malware. |[Elastic] [Host] [Linux] [Threat Detection] [Discovery]  |7.8.0 |6 <<virtual-machine-fingerprinting-history, Version history>>

|<<virtual-machine-fingerprinting-via-grep, Virtual Machine Fingerprinting via Grep>> |An adversary may attempt to get detailed information about the operating system and hardware. This rule identifies common locations used to discover virtual machine hardware by a non-root user. This technique has been used by the Pupy RAT and other malware. |[Elastic] [Host] [macOS] [Linux] [Threat Detection] [Discovery]  |7.16.0 |2 <<virtual-machine-fingerprinting-via-grep-history, Version history>>

|<<virtual-private-network-connection-attempt, Virtual Private Network Connection Attempt>> |Identifies the execution of macOS built-in commands to connect to an existing Virtual Private Network (VPN). |[Elastic] [Host] [macOS] [Threat Detection] [Lateral Movement]  |7.12.0 |2 <<virtual-private-network-connection-attempt-history, Version history>>

|<<volume-shadow-copy-deleted-or-resized-via-vssadmin, Volume Shadow Copy Deleted or Resized via VssAdmin>> |Identifies use of vssadmin.exe for shadow copy deletion or resizing on endpoints. This commonly occurs in tandem with ransomware or other destructive attacks. |[Elastic] [Host] [Windows] [Threat Detection] [Impact]  |7.6.0 |12 <<volume-shadow-copy-deleted-or-resized-via-vssadmin-history, Version history>>

|<<volume-shadow-copy-deletion-via-powershell, Volume Shadow Copy Deletion via PowerShell>> |Identifies the use of the Win32_ShadowCopy class and related cmdlets to achieve shadow copy deletion. This commonly occurs in tandem with ransomware or other destructive attacks. |[Elastic] [Host] [Windows] [Threat Detection] [Impact]  |7.16.0 |3 <<volume-shadow-copy-deletion-via-powershell-history, Version history>>

|<<volume-shadow-copy-deletion-via-wmic, Volume Shadow Copy Deletion via WMIC>> |Identifies use of wmic.exe for shadow copy deletion on endpoints. This commonly occurs in tandem with ransomware or other destructive attacks. |[Elastic] [Host] [Windows] [Threat Detection] [Impact]  |7.6.0 |11 <<volume-shadow-copy-deletion-via-wmic-history, Version history>>

|<<wmi-incoming-lateral-movement, WMI Incoming Lateral Movement>> |Identifies processes executed via Windows Management Instrumentation (WMI) on a remote host. This could be indicative of adversary lateral movement, but could be noisy if administrators use WMI to remotely manage hosts. |[Elastic] [Host] [Windows] [Threat Detection] [Lateral Movement]  |7.11.0 |4 <<wmi-incoming-lateral-movement-history, Version history>>

|<<web-application-suspicious-activity-no-user-agent, Web Application Suspicious Activity: No User Agent>> |A request to a web application server contained no identifying user agent string. |[Elastic] [APM]  |7.6.0 |7 <<web-application-suspicious-activity-no-user-agent-history, Version history>>

|<<web-application-suspicious-activity-post-request-declined, Web Application Suspicious Activity: POST Request Declined>> |A POST request to a web application returned a 403 response, which indicates the web application declined to process the request because the action requested was not allowed. |[Elastic] [APM]  |7.6.0 |8 <<web-application-suspicious-activity-post-request-declined-history, Version history>>

|<<web-application-suspicious-activity-unauthorized-method, Web Application Suspicious Activity: Unauthorized Method>> |A request to a web application returned a 405 response, which indicates the web application declined to process the request because the HTTP method is not allowed for the resource. |[Elastic] [APM]  |7.6.0 |8 <<web-application-suspicious-activity-unauthorized-method-history, Version history>>

|<<web-application-suspicious-activity-sqlmap-user-agent, Web Application Suspicious Activity: sqlmap User Agent>> |This is an example of how to detect an unwanted web client user agent. This search matches the user agent for sqlmap 1.3.11, which is a popular FOSS tool for testing web applications for SQL injection vulnerabilities. |[Elastic] [APM]  |7.6.0 |7 <<web-application-suspicious-activity-sqlmap-user-agent-history, Version history>>

|<<webproxy-settings-modification, WebProxy Settings Modification>> |Identifies the use of the built-in networksetup command to configure webproxy settings. This may indicate an attempt to hijack web browser traffic for credential access via traffic sniffing or redirection. |[Elastic] [Host] [macOS] [Threat Detection] [Credential Access]  |7.12.0 |2 <<webproxy-settings-modification-history, Version history>>

|<<webserver-access-logs-deleted, WebServer Access Logs Deleted>> |Identifies the deletion of WebServer access logs. This may indicate an attempt to evade detection or destroy forensic evidence on a system. |[Elastic] [Host] [Linux] [Windows] [macOS] [Threat Detection] [Defense Evasion]  |7.11.0 |4 <<webserver-access-logs-deleted-history, Version history>>

|<<webshell-detection-script-process-child-of-common-web-processes, Webshell Detection: Script Process Child of Common Web Processes>> |Identifies suspicious commands executed via a web server, which may suggest a vulnerability and remote shell access. |[Elastic] [Host] [Windows] [Threat Detection] [Persistence]  |7.15.0 |4 <<webshell-detection-script-process-child-of-common-web-processes-history, Version history>>

|<<whitespace-padding-in-process-command-line, Whitespace Padding in Process Command Line>> |Identifies process execution events where the command line value contains a long sequence of whitespace characters or multiple occurrences of contiguous whitespace. Attackers may attempt to evade signature-based detections by padding their malicious command with unnecessary whitespace characters. These observations should be investigated for malicious behavior. |[Elastic] [Host] [Windows] [Threat Detection] [Defense Evasion]  |7.15.0 |8 <<whitespace-padding-in-process-command-line-history, Version history>>

|<<whoami-process-activity, Whoami Process Activity>> |Identifies use of whoami.exe which displays user, group, and privileges information for the user who is currently logged on to the local system. |[Elastic] [Host] [Windows] [Threat Detection] [Discovery]  |7.6.0 |8 <<whoami-process-activity-history, Version history>>

|<<windows-cryptoapi-spoofing-vulnerability-cve-2020-0601-curveball, Windows CryptoAPI Spoofing Vulnerability (CVE-2020-0601 - CurveBall)>> |A spoofing vulnerability exists in the way Windows CryptoAPI (Crypt32.dll) validates Elliptic Curve Cryptography (ECC) certificates. An attacker could exploit the vulnerability by using a spoofed code-signing certificate to sign a malicious executable, making it appear the file was from a trusted, legitimate source. |[Elastic] [Host] [Windows] [Threat Detection] [Defense Evasion]  |7.7.0 |6 <<windows-cryptoapi-spoofing-vulnerability-cve-2020-0601-curveball-history, Version history>>

|<<windows-defender-disabled-via-registry-modification, Windows Defender Disabled via Registry Modification>> |Identifies modifications to the Windows Defender registry settings to disable the service or set the service to be started manually. |[Elastic] [Host] [Windows] [Threat Detection] [Defense Evasion]  |7.12.0 |5 <<windows-defender-disabled-via-registry-modification-history, Version history>>

|<<windows-defender-exclusions-added-via-powershell, Windows Defender Exclusions Added via PowerShell>> |Identifies modifications to the Windows Defender configuration settings using PowerShell to add exclusions at the folder directory or process level. |[Elastic] [Host] [Windows] [Threat Detection] [Defense Evasion]  |7.14.0 |7 <<windows-defender-exclusions-added-via-powershell-history, Version history>>

|<<windows-event-logs-cleared, Windows Event Logs Cleared>> |Identifies attempts to clear Windows event log stores. This is often done by attackers in an attempt to evade detection or destroy forensic evidence on a system. |[Elastic] [Host] [Windows] [Threat Detection] [Defense Evasion]  |7.12.0 |3 <<windows-event-logs-cleared-history, Version history>>

|<<windows-firewall-disabled-via-powershell, Windows Firewall Disabled via PowerShell>> |Identifies when the Windows Firewall is disabled using PowerShell cmdlets, which can help attackers evade network constraints, like internet and network lateral communication restrictions. |[Elastic] [Host] [Windows] [Threat Detection] [Defense Evasion]  |8.0.0 |4 <<windows-firewall-disabled-via-powershell-history, Version history>>

|<<windows-network-enumeration, Windows Network Enumeration>> |Identifies attempts to enumerate hosts in a network using the built-in Windows net.exe tool. |[Elastic] [Host] [Windows] [Threat Detection] [Discovery]  |7.11.0 |5 <<windows-network-enumeration-history, Version history>>

|<<windows-registry-file-creation-in-smb-share, Windows Registry File Creation in SMB Share>> |Identifies the creation or modification of a medium-size registry hive file on an SMB share, which may indicate an exfiltration attempt of a previously dumped SAM registry hive for credential extraction on an attacker-controlled system. |[Elastic] [Host] [Windows] [Threat Detection] [Lateral Movement] [Credential Access]  |8.2.0 |1

|<<windows-script-executing-powershell, Windows Script Executing PowerShell>> |Identifies a PowerShell process launched by either cscript.exe or wscript.exe. Observing Windows scripting processes executing a PowerShell script, may be indicative of malicious activity. |[Elastic] [Host] [Windows] [Threat Detection] [Initial Access]  |7.6.0 |10 <<windows-script-executing-powershell-history, Version history>>

|<<windows-script-interpreter-executing-process-via-wmi, Windows Script Interpreter Executing Process via WMI>> |Identifies use of the built-in Windows script interpreters (cscript.exe or wscript.exe) being used to execute a process via Windows Management Instrumentation (WMI). This may be indicative of malicious activity. |[Elastic] [Host] [Windows] [Threat Detection] [Initial Access]  |7.11.0 |2 <<windows-script-interpreter-executing-process-via-wmi-history, Version history>>

|<<windows-service-installed-via-an-unusual-client, Windows Service Installed via an Unusual Client>> |Identifies the creation of a Windows service by an unusual client process. Services may be created with administrator privileges but are executed under SYSTEM privileges, so an adversary may also use a service to escalate privileges from administrator to SYSTEM. |[Elastic] [Host] [Windows] [Threat Detection] [Privilege Escalation]  |8.1.0 |1

|<<zoom-meeting-with-no-passcode, Zoom Meeting with no Passcode>> |This rule identifies Zoom meetings that are created without a passcode. Meetings without a passcode are susceptible to Zoombombing. Zoombombing is carried out by taking advantage of Zoom sessions that are not protected with a passcode. Zoombombing refers to the unwanted, disruptive intrusion, generally by Internet trolls and hackers, into a video conference call. In a typical Zoombombing incident, a teleconferencing session is hijacked by the insertion of material that is lewd, obscene, racist, or antisemitic in nature, typically resulting of the shutdown of the session. |[Elastic] [Application] [Communication] [Zoom] [Continuous Monitoring] [SecOps] [Configuration Audit]  |7.10.0 |4 <<zoom-meeting-with-no-passcode-history, Version history>>

|<<macos-installer-spawns-network-event, macOS Installer Spawns Network Event>> |Identifies when the built in macOS Installer program generates a network event after attempting to install a .pkg file. This activity has been observed being leveraged by malware. |[Elastic] [Host] [macOS] [Threat Detection] [Execution]  |7.12.0 |4 <<macos-installer-spawns-network-event-history, Version history>>

|==============================================