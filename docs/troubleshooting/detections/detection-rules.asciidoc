[[ts-detection-rules]]
== Detection rules

This topic covers common troubleshooting issues when creating or managing <<rules-ui-create, detection rules>>.

[discrete]
[[ML-rules-ts]]
=== {ml-cap} rules

[discrete]
[[start-ML-jobs-ts]]
.{ml-cap} rule is failing and a required {ml} job is stopped
[%collapsible]
====
If a {ml} rule is failing, check to make sure the required {ml} jobs are running and start any jobs that have stopped.

. Go to **Manage** -> **Rules**, then select the {ml} rule. The required {ml} jobs and their statuses are listed in the *Definition* section.
+
[role="screenshot"]
image::images/rules-ts-ml-job-stopped.png[Rule details page with ML job stopped]
+
. If a required {ml} job isn't running, turn on the *Run job* toggle next to it.
. Rerun the {ml} detection rule.
====

[discrete]
[[IM-match-rules-ts]]
=== Indicator match rules

[discrete]
[[IM-rule-failure]]
.Rules are failing due to number of alerts
[%collapsible]
====
If you receive the following rule failure: `"Bulk Indexing of signals failed: [parent] Data too large"`, this indicates that the alerts payload was too large to process.

This can be caused by bad indicator data, a misconfigured rule, or too many event matches. Review your indicator data or rule query. If nothing obvious is misconfigured, try executing the rule against a subset of the original data and continue diagnosis.
====

[discrete]
[[IM-rule-timeout]]
.Indicator match rules are timing out
[%collapsible]
====
If you receive the following rule failure: `"An error occurred during rule execution: message: "Request Timeout after 90000ms"`, this indicates that the query phase is timing out. Try refining the time frame or dividing the data defined in the query into multiple rules.
====

[discrete]
[[IM-rule-heap-memory]]
.Indicator match rules are failing because the `maxClauseCount` limit is too low
[%collapsible]
====
If you receive the following rule failure: `Bulk Indexing of signals failed: index: ".index-name" reason: "maxClauseCount is set to 1024" type: "too_many_clauses"`, this indicates that the limit for the total number of clauses that a query tree can have is too low. To update your maximum clause count, {ref}/advanced-configuration.html#set-jvm-heap-size[increase the size of your {es} JVM heap memory]. 1 GB of {es} JVM heap size or more is sufficient.
====

[discrete]
[[IM-slowness]]
.General slowness
[%collapsible]
====
If you notice rule delays, review the suggestions above to troubleshoot, and also consider limiting the number of rules that run simultaneously, as this can cause noticeable performance implications in {kib}.
====

[discrete]
[[rule-exceptions-ts]]
=== Rule exceptions

[discrete]
[[rule-exceptions-autocomplete-ts]]
.No autocomplete suggestions
[%collapsible]
====
When you're creating detection rule exceptions, autocomplete might not provide suggestions in the *Value* field if the values don't exist in the current page's time range.

You can resolve this by expanding the time range, or by configuring {kib}'s autocomplete feature to get suggestions from your full data set instead. Go to *{kib}* -> *Stack Management* -> *Advanced Settings*, then turn off `autocomplete:useTimeRange`.

CAUTION: Turning off `autocomplete:useTimeRange` could cause performance issues if the data set is especially large.
====
