[[get-started-with-kspm]]
=== Get started with KSPM
This page explains how to configure the Kubernetes Security Posture Management (KSPM) integration.

.Requirements
[sidebar]
--
* The KSPM integration is available to all Elastic Cloud users. For on-prem deployments, it requires an https://www.elastic.co/pricing[Enterprise subscription].
* The KSPM integration only works in the `Default` Kibana space. Installing the KSPM integration on a different Kibana space will not work.
* To view posture data, ensure you have the `read` privilege for the following {es} indices:

- `logs-cloud_security_posture.findings_latest-*`
- `logs-cloud_security_posture.scores-*` 
- `logs-cloud_security_posture.findings`
--

The instructions differ depending on whether you're installing on EKS or on unmanaged clusters.

* Install on EKS-managed clusters:
  . <<kspm-setup-eks-start,Name your integration and select a Kubernetes deployment type>>
  . <<kspm-setup-eks-auth,Authenticate to AWS>>
  . <<kspm-setup-eks-finish,Finish configuring the KSPM integration>>
  . <<kspm-setup-eks-modify-deploy,Deploy the DaemonSet to your clusters>>


* Install on unmanaged clusters:
  . <<kspm-setup-unmanaged,Configure the KSPM integration>>
  . <<kspm-setup-unmanaged-modify-deploy,Deploy the DaemonSet manifest to your clusters>>

[discrete]
[[kspm-setup-eks-start]]
=== Set up KSPM for Amazon EKS clusters

[discrete]
==== Name your integration and select a Kubernetes Deployment type

1. Go to *Dashboards -> Cloud Posture*.
2. Click *Add a KSPM integration*.
3. Read the integration's description to understand how it works. Then, click {integrations-docs}/cloud_security_posture[*Add Kubernetes Security Posture Management*].
4. Name your integration. Use a name that matches the purpose or team of the cluster(s) you want to monitor, for example, `IT-dev-k8s-clusters`.
5. Select *EKS* from the *Kubernetes Deployment* menu. A new section for AWS credentials will appear.

[discrete]
[[kspm-setup-eks-auth]]
==== Authenticate to AWS

There are several options for how to provide AWS credentials:

* <<kspm-use-irsa,Use Kubernetes Service Account to assume IAM role>>
* <<kspm-use-instance-role,Use default instance role>>
* <<kspm-use-keys-directly,Use access keys directly>>
* <<kspm-use-temp-credentials,Use temporary security credentials>>
* <<kspm-use-a-shared-credentials-file,Use a shared credentials file>>
* <<kspm-use-iam-arn,Use an IAM role ARN>>

Regardless of which option you use, you'll need to grant the following permissions:



[source,console]
----------------------------------
ecr:GetRegistryPolicy,
eks:ListTagsForResource
elasticloadbalancing:DescribeTags
ecr-public:DescribeRegistries
ecr:DescribeRegistry
elasticloadbalancing:DescribeLoadBalancerPolicyTypes
ecr:ListImages
ecr-public:GetRepositoryPolicy
elasticloadbalancing:DescribeLoadBalancerAttributes
elasticloadbalancing:DescribeLoadBalancers
ecr-public:DescribeRepositories
eks:DescribeNodegroup
ecr:DescribeImages
elasticloadbalancing:DescribeLoadBalancerPolicies
ecr:DescribeRepositories
eks:DescribeCluster
eks:ListClusters
elasticloadbalancing:DescribeInstanceHealth
ecr:GetRepositoryPolicy
----------------------------------

If you are using the AWS visual editor to create and modify your IAM Policies, you can copy and paste this IAM policy JSON object:

.Click to view JSON object
[%collapsible]
====
```
{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Sid": "VisualEditor0",
            "Effect": "Allow",
            "Action": [
                "ecr:GetRegistryPolicy",
                "eks:ListTagsForResource",
                "elasticloadbalancing:DescribeTags",
                "ecr-public:DescribeRegistries",
                "ecr:DescribeRegistry",
                "elasticloadbalancing:DescribeLoadBalancerPolicyTypes",
                "ecr:ListImages",
                "ecr-public:GetRepositoryPolicy",
                "elasticloadbalancing:DescribeLoadBalancerAttributes",
                "elasticloadbalancing:DescribeLoadBalancers",
                "ecr-public:DescribeRepositories",
                "eks:DescribeNodegroup",
                "ecr:DescribeImages",
                "elasticloadbalancing:DescribeLoadBalancerPolicies",
                "ecr:DescribeRepositories",
                "eks:DescribeCluster",
                "eks:ListClusters",
                "elasticloadbalancing:DescribeInstanceHealth",
                "ecr:GetRepositoryPolicy"
            ],
            "Resource": "*"
        }
    ]
}
```
====


[discrete]
[[kspm-use-irsa]]
===== Option 1 - [Recommended] Use Kubernetes Service Account to assume IAM role

Leverage IRSA (IAM role to Kubernetes service-account) feature to get temporary credentials and scoped permission.
From https://aws.github.io/aws-eks-best-practices/security/docs/iam/#iam-roles-for-service-accounts-irsa[EKS Best Practices]:

> IRSA is a feature that allows you to assign an IAM role to a Kubernetes service account. It works by leveraging a Kubernetes feature known as Service Account Token Volume Projection. When pods are configured with a Service Account that references an IAM Role, the Kubernetes API server will call the public OIDC discovery endpoint for the cluster on startup. The endpoint cryptographically signs the OIDC token issued by Kubernetes and the resulting token is mounted as a volume. This signed token allows the pod to call the AWS API's associated IAM role. When an AWS API is invoked, the AWS SDK calls `sts:AssumeRoleWithWebIdentity`. After validating the token's signature, IAM exchanges the Kubernetes issued token for a temporary AWS role credential.

To use this, do not fill in any part of the "Setup Access" section. Click *Save and continue*, and follow the https://docs.aws.amazon.com/eks/latest/userguide/iam-roles-for-service-accounts.html[IRSA] guide.

[discrete]
[[kspm-use-instance-role]]
===== Option 2 - Use default instance role
https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/iam-roles-for-amazon-ec2.html[IAM roles for Amazon EC2]

> When you create an IAM role using the IAM console, the console creates an instance profile automatically and gives it the same name as the role to which it corresponds.

To use this, do not fill in any part of the "Setup Access" section. Click *Save and continue*.

[discrete]
[[kspm-use-keys-directly]]
===== Option 3 - Use access keys directly
Access keys are long-term credentials for an IAM user or the AWS account root user. To use access keys as credentials, you need to provide the `Access key ID` and the `Secret Access Key`.

For more details, refer to AWS' https://docs.aws.amazon.com/general/latest/gr/aws-sec-cred-types.html[Access Keys and Secret Access Keys] documentation.

IMPORTANT: You must select "Programmatic access" when creating the IAM user.

[discrete]
[[kspm-use-temp-credentials]]
===== Option 4 - Use temporary security credentials
You can configure temporary security credentials in AWS to last for a specified duration. They consist of an access key ID, a secret access key, and a security token, which is typically found using `GetSessionToken`.

Because temporary security credentials are short term, once they expire, you will need to generate new ones and manually update the integration's configuration to continue collecting cloud posture data. Update the credentials before they expire to avoid data loss.

NOTE: IAM users with multi-factor authentication (MFA) enabled need to submit an MFA code when calling `GetSessionToken`. For more details, refer to AWS' https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp.html[Temporary Security Credentials] documentation.

You can use the AWS CLI to generate temporary credentials. For example, you could use the following command if you have MFA enabled:

[source,console]
----------------------------------
`sts get-session-token --serial-number arn:aws:iam::1234:mfa/your-email@example.com --duration-seconds 129600 --token-code 123456`
----------------------------------

The output from this command includes the following fields, which you should provide when configuring the KSPM integration:

* `Access key ID`: The first part of the access key.
* `Secret Access Key`: The second part of the access key.
* `Session Token`: A token required when using temporary security credentials.

[discrete]
[[kspm-use-a-shared-credentials-file]]
===== Option 5 - Use a shared credentials file
If you use different AWS credentials for different tools or applications, you can use profiles to define multiple access keys in the same configuration file. For more details refer to AWS' https://docs.aws.amazon.com/sdkref/latest/guide/file-format.html[Shared Credentials Files] documentation.

Instead of providing the `Access key ID` and `Secret Access Key` to the integration, provide the information required to locate the access keys within the shared credentials file:

* `Credential Profile Name`: The profile name in the shared credentials file.
* `Shared Credential File`: The directory of the shared credentials file.

If you don't provide values for all configuration fields, the integration will use these defaults:

- If `Access key ID`, `Secret Access Key`, and `ARN Role` are not provided, then the integration will check for `Credential Profile Name`.
- If there is no `Credential Profile Name`, the default profile will be used.
- If `Shared Credential File` is empty, the default directory will be used.
  - For Linux or Unix, the shared credentials file is located at `~/.aws/credentials`.

[discrete]
[[kspm-use-iam-arn]]
===== Option 6 - Use an IAM role Amazon Resource Name (ARN)
An IAM role Amazon Resource Name (ARN) is an IAM identity that you can create in your AWS account. You define the role's permissions.
Roles do not have standard long-term credentials such as passwords or access keys.
Instead, when you assume a role, it provides you with temporary security credentials for your session.
An IAM role's ARN can be used to specify which AWS IAM role to use to generate temporary credentials.

For more details, refer to AWS' https://docs.aws.amazon.com/STS/latest/APIReference/API_AssumeRole.html[AssumeRole API] documentation.
Follow AWS' instructions to https://docs.aws.amazon.com/IAM/latest/UserGuide/id_users_create.html[create an IAM user], and define the IAM role's permissions using the JSON permissions policy above.

To use an IAM role's ARN, you need to provide either a <<kspm-use-a-shared-credentials-file,credential profile>> or <<kspm-use-keys-directly,access keys>> along with the `ARN role`.
The `ARN Role` value specifies which AWS IAM role to use for generating temporary credentials.

NOTE: If `ARN Role` is present, the integration will check if `Access key ID` and `Secret Access Key` are present.
If not, the package will check for a `Credential Profile Name`.
If a `Credential Profile Name` is not present, the default credential profile will be used.


[[kspm-setup-eks-finish]]
[discrete]
==== Finish configuring the KSPM integration for EKS
Once you've provided AWS credentials, finish configuring the KSPM integration:

1. If you want to monitor Kubernetes clusters that aren’t yet enrolled in {fleet}, select *New Hosts* under “where to add this integration”.
2. Name the {agent} policy. Use a name that matches the purpose or team of the cluster(s) you want to monitor. For example, `IT-dev-k8s-clusters`.
3. Click *Save and continue*, then *Add agent to your hosts*. The *Add agent* wizard appears and provides a DaemonSet manifest `.yaml` file with pre-populated configuration information, such as the `Fleet ID` and `Fleet URL`.

[[kspm-setup-eks-modify-deploy]]
[discrete]
==== Deploy the KSPM integration to EKS clusters
The *Add agent* wizard helps you deploy the KSPM integration on the Kubernetes clusters you wish to monitor. For each cluster:

1. Download the manifest and make any necessary revisions to its configuration to suit the needs of your environment.
2. Apply the manifest using the `kubectl apply -f` command. For example: `kubectl apply -f elastic-agent-managed-kubernetes.yaml`

After a few minutes, a message confirming the {agent} enrollment appears, followed by a message confirming that data is incoming. You can then click *View assets* to see where the newly-collected configuration information appears throughout {kib}, including the <<findings-page,Findings page>> and the <<cloud-posture-dashboard, Cloud Posture dashboard>>.


[discrete]
[[kspm-setup-unmanaged]]
=== Set up KSPM for unmanaged Kubernetes clusters

Follow these steps to deploy the KSPM integration to unmanaged clusters. Keep in mind credentials are NOT required for unmanaged deployments.

[discrete]
==== Configure the KSPM integration
To install the integration on unmanaged clusters:

. Go to *Dashboards -> Cloud Posture*.
. Click *Add a KSPM integration*.
. Read the integration's description to understand how it works. Then, click {integrations-docs}/cloud_security_posture[*Add Kubernetes Security Posture Management*].
. Name your integration. Use a name that matches the purpose or team of the cluster(s) you want to monitor, for example, `IT-dev-k8s-clusters`.
. Select *Unmanaged Kubernetes* from the *Kubernetes Deployment* menu.
. If you want to monitor Kubernetes clusters that aren’t yet enrolled in {fleet}, select *New Hosts* when choosing the {agent} policy.
. Select the {agent} policy where you want to add the integration.
. Click *Save and continue*, then *Add agent to your hosts*. The *Add agent* wizard appears and provides a DaemonSet manifest `.yaml` file with pre-populated configuration information, such as the `Fleet ID` and `Fleet URL`.

[role="screenshot"]
image::images/kspm-add-agent-wizard.png[The KSPM integration's Add agent wizard]

[[kspm-setup-unmanaged-modify-deploy]]
[discrete]
==== Deploy the KSPM integration to unmanaged clusters

The *Add agent* wizard helps you deploy the KSPM integration on the Kubernetes clusters you wish to monitor. To do this, for each cluster:

1. Download the manifest and make any necessary revisions to its configuration to suit the needs of your environment.
2. Apply the manifest using the `kubectl apply -f` command. For example: `kubectl apply -f elastic-agent-managed-kubernetes.yaml`

After a few minutes, a message confirming the {agent} enrollment appears, followed by a message confirming that data is incoming. You can then click *View assets* to see where the newly-collected configuration information appears throughout {kib}, including the <<findings-page,Findings page>> and the <<cloud-posture-dashboard, Cloud Posture dashboard>>.
