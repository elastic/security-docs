[[alerts-ui-manage]]
[role="xpack"]
== Managing detection alerts

The Detections page displays all alerts. From the Alerts table, you can change
alerts statuses, and start investigating and analyzing alerts in Timeline.

TIP: From Timeline, you can <<cases-ui-open, create cases>> to track issues and
share information with colleagues.

To view detection alerts created by a specific rule, you can:

* Filter for a specific rule in the KQL bar (for example,
`signal.rule.name :"SSH (Secure Shell) from the Internet"`).
* View detection alerts in the *Rule details* page (click
*Manage signal detection rules* -> rule name in the *All rules* table).

NOTE: KQL autocomplete for `.siem-signals-*` indices is available on the 
*Detections* and *Rule details* pages, and in Timeline when either `All` or
`Detection alerts` is selected. 

To view alerts from external data shippers, click *External alerts*.

[float]
[[detection-alert-status]]
=== Change an alert's status

You can set an alert's status to indicate whether it needs to be investigated
(`Open`), is under active investigation (`In progress`), or resolved
(`Closed`). By default, the Alerts table displays open signals. To view alerts
with other statuses, click *In progress* or *Closed*.

To change alert statuses, either:

* In the alert's row, click the *more options* icon, and then select the
required status (*Mark in progress*, *Close alert*, or *Open alert*).
* In the Alerts table, select all the alerts you want to change, and then select
*Take action* -> *Close selected*, *Open selected*, or *Mark in progress*.

[float]
[[signals-to-timelines]]
=== Investigate alerts in Timeline

To investigate an alert in Timeline, click the *Investigate in timeline*
icon.

If the rule that generated the alert uses a Timeline template, when you
investigate the alert in Timeline, the dropzone query values defined in the
template are replaced with their corresponding signal values.

// * `host.name`
// * `host.hostname`
// * `host.domain`
// * `host.id`
// * `host.ip`
// * `client.ip`
// * `destination.ip`
// * `server.ip`
// * `source.ip`
// * `network.community_id`
// * `user.name`
// * `process.name`

*Example*

The Timeline template used in the rule has this dropzone query:
`host.name: "Linux-LiverpoolFC"`. When alerts generated by the rule are
investigated in Timeline, the `host.name` value is replaced with the alert's
`host.name` value. If the alerts's `host.name` value is `Windows-ArsenalFC`,
the Timeline dropzone query is `host.name: "Windows-ArsenalFC"`.

NOTE: See BEN: xref for information on creating Timelines and Timeline
templates. For information on how to add timeline templates to rules, see
<<create-rule-ui>>.

[float]
[[alerts-to-resolver]]
=== Analyze alerts in Timeline resolver

BEN: Short explanation and link
